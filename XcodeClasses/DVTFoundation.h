//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun 13 2017 20:28:01).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ArrayBuilder {
    id _field1[62];
    id *_field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct CC_MD5state_st {
    unsigned int A;
    unsigned int B;
    unsigned int C;
    unsigned int D;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
};

struct CC_SHA1state_st {
    unsigned int h0;
    unsigned int h1;
    unsigned int h2;
    unsigned int h3;
    unsigned int h4;
    unsigned int Nl;
    unsigned int Nh;
    unsigned int data[16];
    int num;
};

struct CC_SHA256state_st {
    unsigned int count[2];
    unsigned int hash[8];
    unsigned int wbuf[16];
};

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct DVTBitSet {
    unsigned long long _field1;
    unsigned long long _field2[0];
};

struct DVTMacroNameLookupCursor {
    id _field1;
    unsigned long long _field2;
    id _field3;
    id _field4;
    struct DVTMacroValueAssignment *_field5;
    id _field6;
};

struct DVTMacroValueAssignment;

struct DVTMacroValueAssignmentMapTable {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    void *_field5;
};

struct DVTNestedMacroExpansionState {
    id _field1;
    unsigned int _field2;
    struct DVTMacroNameLookupCursor _field3;
    id _field4;
    struct DVTNestedMacroExpansionState *_field5;
};

struct DVTStringBuilder {
    unsigned short _field1[512];
    unsigned short *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct NSSet {
    Class _field1;
};

struct UParseError {
    int _field1;
    int _field2;
    unsigned short _field3[16];
    unsigned short _field4[16];
};

struct _CSTypeRef {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _DVTDiffContextFlags {
    unsigned int ignoresCase:1;
    unsigned int ignoresLeadingSpaces:1;
    unsigned int ignoresSpacesInRuns:1;
    unsigned int ignoresTrailingSpaces:1;
    unsigned int ignoresLineEnds:1;
    unsigned int ignoresCommon:1;
    unsigned int RESERVED:26;
};

struct _DVTTextLineOffsetTable {
    unsigned long long capacity;
    unsigned long long count;
    unsigned long long *offsets;
    unsigned long long deferredAdjustmentIndex;
    long long deferredAdjustment;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*> *__next_;
};

struct __sFILE {
    char *_field1;
    int _field2;
    int _field3;
    short _field4;
    short _field5;
    struct __sbuf _field6;
    int _field7;
    void *_field8;
    CDUnknownFunctionPointerType _field9;
    CDUnknownFunctionPointerType _field10;
    CDUnknownFunctionPointerType _field11;
    CDUnknownFunctionPointerType _field12;
    struct __sbuf _field13;
    struct __sFILEX *_field14;
    int _field15;
    unsigned char _field16[3];
    unsigned char _field17[1];
    struct __sbuf _field18;
    int _field19;
    long long _field20;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct __va_list_tag {
    unsigned int _field1;
    unsigned int _field2;
    void *_field3;
    void *_field4;
};

struct fastsimplearray {
    unsigned long long _field1;
    unsigned long long _field2;
    void **_field3;
};

struct fsid {
    int _field1[2];
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct sockaddr {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[14];
};

struct sockaddr_storage {
    unsigned char ss_len;
    unsigned char ss_family;
    char __ss_pad1[6];
    long long __ss_align;
    char __ss_pad2[112];
};

struct stat {
    int _field1;
    unsigned short _field2;
    unsigned short _field3;
    unsigned long long _field4;
    unsigned int _field5;
    unsigned int _field6;
    int _field7;
    struct timespec _field8;
    struct timespec _field9;
    struct timespec _field10;
    struct timespec _field11;
    long long _field12;
    long long _field13;
    int _field14;
    unsigned int _field15;
    unsigned int _field16;
    int _field17;
    long long _field18[2];
};

struct statfs {
    unsigned int _field1;
    int _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct fsid _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    char _field13[16];
    char _field14[1024];
    char _field15[1024];
    unsigned int _field16[8];
};

struct timespec {
    long long _field1;
    long long _field2;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<DVTFuture *, long, (anonymous namespace)::objc_pointer_hasher, std::__1::equal_to<DVTFuture *>, std::__1::allocator<std::__1::pair<DVTFuture *const, long>>> {
    struct __hash_table<std::__1::__hash_value_type<DVTFuture *, long>, std::__1::__unordered_map_hasher<DVTFuture *, std::__1::__hash_value_type<DVTFuture *, long>, (anonymous namespace)::objc_pointer_hasher, true>, std::__1::__unordered_map_equal<DVTFuture *, std::__1::__hash_value_type<DVTFuture *, long>, std::__1::equal_to<DVTFuture *>, true>, std::__1::allocator<std::__1::__hash_value_type<DVTFuture *, long>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<DVTFuture *, long>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<DVTFuture *, std::__1::__hash_value_type<DVTFuture *, long>, (anonymous namespace)::objc_pointer_hasher, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<DVTFuture *, std::__1::__hash_value_type<DVTFuture *, long>, std::__1::equal_to<DVTFuture *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<void (^)(DVTFutureState, id, NSError *), std::__1::allocator<void (^)(DVTFutureState, id, NSError *)>> {
    CDUnknownBlockType *__begin_;
    CDUnknownBlockType *__end_;
    struct __compressed_pair<void (^__strong *)(DVTFutureState, id, NSError *), std::__1::allocator<void (^)(DVTFutureState, id, NSError *)>> {
        CDUnknownBlockType *__first_;
    } __end_cap_;
};

struct vector<void (^)(long, signed char *), std::__1::allocator<void (^)(long, signed char *)>> {
    CDUnknownBlockType *__begin_;
    CDUnknownBlockType *__end_;
    struct __compressed_pair<void (^__strong *)(long, signed char *), std::__1::allocator<void (^)(long, signed char *)>> {
        CDUnknownBlockType *__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
} CDStruct_d2b197d1;

typedef struct {
    long long location;
    long long length;
} CDStruct_627e0f85;

typedef struct {
    int tokenType;
    int tokenAltType;
    CDStruct_627e0f85 charRange;
    char *lexeme;
    int lexemeLength;
    int outOfBand;
} CDStruct_341fcc3f;

typedef struct {
    struct _NSRange range;
    unsigned long long hash;
    unsigned long long type;
} CDStruct_3dd9eb72;

#pragma mark Typedef'd Unions

typedef union {
    struct {
        unsigned short updateComponent;
        unsigned short minorComponent;
        unsigned int majorComponent;
    } independent;
    unsigned long long combined;
} CDUnion_7de6e739;

#pragma mark -

//
// File: /Applications/Xcode.app/Contents/SharedFrameworks/DVTFoundation.framework/Versions/A/DVTFoundation
// UUID: E962D069-0B28-33F2-887C-23FC5EB3A976
//
//                           Arch: x86_64
//                Current version: 1.0.0
//          Compatibility version: 1.0.0
//                 Source version: 13152.16.0.0.0
//       Minimum Mac OS X version: 10.12.1
//                    SDK version: 10.13.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/../../../
//                               = /Applications/Xcode.app/Contents/SharedFrameworks
//                       Run path: @loader_path/../../../../Frameworks
//                               = /Applications/Xcode.app/Contents/Frameworks
//

@protocol DTXAllowedRPC <NSObject>
@end

@protocol DVTAssertionHandling <NSObject>
- (void)handleWarningInFunction:(NSString *)arg1 fileName:(NSString *)arg2 lineNumber:(long long)arg3 messageFormat:(NSString *)arg4 arguments:(struct __va_list_tag [1])arg5;
- (void)handleWarningInMethod:(SEL)arg1 object:(id)arg2 fileName:(NSString *)arg3 lineNumber:(long long)arg4 messageFormat:(NSString *)arg5 arguments:(struct __va_list_tag [1])arg6;
- (void)handleFailureInFunction:(NSString *)arg1 fileName:(NSString *)arg2 lineNumber:(long long)arg3 assertionSignature:(NSString *)arg4 messageFormat:(NSString *)arg5 arguments:(struct __va_list_tag [1])arg6;
- (void)handleFailureInMethod:(SEL)arg1 object:(id)arg2 fileName:(NSString *)arg3 lineNumber:(long long)arg4 assertionSignature:(NSString *)arg5 messageFormat:(NSString *)arg6 arguments:(struct __va_list_tag [1])arg7;
@end

@protocol DVTBasicDevice <DVTCodesignableDevice>
@property(readonly) _Bool deviceIsBusy;
@property(readonly) NSError *unavailabilityError;
@property(readonly, getter=isAvailable) BOOL available;
@property(readonly) BOOL isProxiedDevice;
@property(readonly, copy) NSString *nativeArchitecture;
@property(readonly) DVTPlatform *platform;
@property(readonly, copy, nonatomic) NSString *operatingSystemVersionWithBuildNumber;
@property(readonly, copy) NSString *operatingSystemBuild;
@property(readonly, copy) NSString *operatingSystemVersion;
@property(readonly, copy) NSString *processorDescription;
@property(readonly, copy, nonatomic) NSString *modelUTI;
@property(readonly, copy, nonatomic) NSString *modelCode;
@property(readonly, copy, nonatomic) NSString *modelName;

@optional
- (DTXConnection *)primaryInstrumentsServer;
@end

@protocol DVTCacheDeleteExtension <NSObject>
- (NSNumber *)purgeVolume:(DVTFilePath *)arg1 amount:(unsigned long long)arg2 urgency:(int)arg3 error:(id *)arg4;
- (NSNumber *)purgeableSizeOnVolume:(DVTFilePath *)arg1 urgency:(int)arg2 error:(id *)arg3;
@end

@protocol DVTCancellable <NSObject>
@property(readonly, getter=isCancelled) BOOL cancelled;
- (void)cancel;
@end

@protocol DVTCancellationBlockCompletion <NSObject>
- (void)waitForCancellation;
@end

@protocol DVTCertificateRecordVendor
- (NSSet *)certificateRecordsWithContext:(NSManagedObjectContext *)arg1;
@end

@protocol DVTCodesignableDevice <NSObject>
@property(readonly, copy) NSSet *proxiedDevices;
@property(readonly) BOOL supportsProvisioning;
@property(readonly) DVTPlatform *platform;
@property(readonly, copy) NSString *platformIdentifier;
@property(readonly, copy, nonatomic) NSString *identifier;
@property(readonly, copy) NSString *nameForDeveloperPortal;
@property(readonly, copy, nonatomic) NSString *name;
@end

@protocol DVTCustomDataStoring <NSObject>
@property(readonly) NSString *displayName;
- (BOOL)supportsCustomDataForOwnership:(DVTCustomDataOwnership *)arg1;
- (void)moveCustomDataWithSpecifier:(DVTCustomDataSpecifier *)arg1 toSpecifier:(DVTCustomDataSpecifier *)arg2 completionQueue:(NSOperationQueue *)arg3 completionBlock:(void (^)(BOOL, NSError *))arg4;
- (void)removeCustomDataWithSpecifier:(DVTCustomDataSpecifier *)arg1 completionQueue:(NSOperationQueue *)arg2 completionBlock:(void (^)(BOOL, NSError *))arg3;
- (void)writeCustomData:(NSData *)arg1 withSpecifier:(DVTCustomDataSpecifier *)arg2 forceOverwrite:(BOOL)arg3 completionQueue:(NSOperationQueue *)arg4 completionBlock:(void (^)(BOOL, NSError *))arg5;
- (NSData *)readCustomDataWithSpecifier:(DVTCustomDataSpecifier *)arg1 error:(id *)arg2;
- (NSArray *)customDataOwnershipsForGrouping:(NSString *)arg1;
- (NSArray *)customDataSpecifiersForGrouping:(NSString *)arg1 ownership:(DVTCustomDataOwnership *)arg2;
@end

@protocol DVTDTApplicationWorkspaceClient <DTXAllowedRPC>
- (void)applicationUninstalled:(NSDictionary *)arg1;
- (void)applicationInstalled:(NSDictionary *)arg1;
@end

@protocol DVTDeveloperProfileAccountProvider <NSObject>
@property(readonly) NSString *typeIdentifier;
- (BOOL)importAccountsFromKeychain:(struct OpaqueSecKeychainRef *)arg1 propertyList:(NSDictionary *)arg2 numberOfAccounts:(unsigned long long *)arg3 error:(id *)arg4;
- (BOOL)exportAccountsToKeychain:(struct OpaqueSecKeychainRef *)arg1 propertyList:(id *)arg2 numberOfAccounts:(unsigned long long *)arg3 error:(id *)arg4;
@end

@protocol DVTDeviceApplication <DVTDeviceApplicationItem>
@property(readonly) BOOL isHidden;
@property(readonly, copy) NSSet *rootContainerApplicationItems;
@property(readonly) BOOL isFairPlayEncrypted;
@property(readonly) NSString *bundleIdentifier;
@property(readonly) NSString *version;
@end

@protocol DVTDeviceApplicationItem <NSObject>
@property(readonly) BOOL isLeaf;
@property(readonly) NSSet *children;
@property(readonly) NSString *name;

@optional
@property(readonly, copy) NSString *installedPath;
@end

@protocol DVTDeviceApplicationProvider <NSObject>
@property(readonly) NSSet *applications;

@optional
@property(readonly) NSSet *systemApplications;
@end

@protocol DVTDiagnosticsClient <NSObject>
- (void)collect:(DVTDiagnosticsCollector *)arg1;

@optional
- (void)willCollect;
@end

@protocol DVTDiffHashing
- (unsigned long long)dvt_diffHashForDataSource:(DVTDiffDataSource *)arg1;
@end

@protocol DVTDirectoryServicesSessionDescription <NSObject>
@property(readonly, copy, nonatomic) NSData *sessionData;
@property(readonly, copy, nonatomic) NSString *sessionID;
@property(readonly, nonatomic) DVTDeveloperAccount *account;
@end

@protocol DVTDiskStock <NSObject>
@property(readonly) float diskStockLowWaterTarget;
@property(readonly) unsigned long long diskStockCapacity;
@property(readonly) NSString *diskStockDisplayName;
@property(readonly) NSString *diskStockIdentifier;
- (void)diskStockManager:(DVTDiskStockManager *)arg1 didCullDiskStockMembers:(NSArray *)arg2;
- (NSSet *)diskStockMembers;

@optional
- (unsigned long long)diskStockSizeForMembers:(NSSet *)arg1;
- (BOOL)diskStockManager:(DVTDiskStockManager *)arg1 willCullDiskStockMembers:(NSArray *)arg2;
@end

@protocol DVTDiskStockMember <NSObject>
@property(readonly) NSString *diskStockMemberDisplayName;
@property(readonly) NSDate *diskStockMemberTTL;
@property(readonly) DVTFilePath *diskStockMemberRepresentation;
@property(readonly) __weak NSObject<DVTDiskStock> *diskStock;
- (long long)diskStockMemberCompareTo:(NSObject<DVTDiskStockMember> *)arg1;
- (void)diskStockManager:(DVTDiskStockManager *)arg1 didCullThisMemberFromDiskStock:(NSObject<DVTDiskStock> *)arg2;

@optional
- (BOOL)diskStockManager:(DVTDiskStockManager *)arg1 willCullThisMemberFromDiskStock:(NSObject<DVTDiskStock> *)arg2;
@end

@protocol DVTDownloadableInstallationHelper <NSObject>
- (void)downloadableNamed:(NSString *)arg1 needsTerminationOfAppsWithBundleIdentifier:(NSString *)arg2 completionBlock:(void (^)(BOOL, NSError *))arg3;
@end

@protocol DVTDownloadableProvider <NSObject>
@property(readonly) NSSet *downloadables;
- (NSSet *)downloadablesWithError:(id *)arg1;
@end

@protocol DVTFileDataTypeDetector
+ (NSNumber *)fileURL:(NSURL *)arg1 matchesFileDataTypeDetectorForExtension:(NSString *)arg2 error:(id *)arg3;
@end

@protocol DVTFileSystemRepresentationProviding
- (void)dvt_provideFileSystemRepresentationToBlock:(void (^)(char *, unsigned long long))arg1;
@end

@protocol DVTInvalidation <NSObject>
- (void)primitiveInvalidate;

@optional
+ (BOOL)supportsInvalidationPrevention;
+ (unsigned long long)assertionBehaviorForKeyValueObservationsAtEndOfEvent;
+ (unsigned long long)assertionBehaviorAfterEndOfEventForSelector:(SEL)arg1;
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
@end

@protocol DVTLocking
- (void)dvt_asyncPerformLockedBlock:(void (^)(void))arg1;
- (void)dvt_performLockedBlock:(void (^)(void))arg1;
@end

@protocol DVTMacroExpansion <NSObject, NSCopying>
- (NSString *)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (NSString<DVTMacroExpansion> *)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (NSArray *)dvt_evaluateAsStringListInScope:(DVTMacroExpansionScope *)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (NSString *)dvt_evaluateAsStringInScope:(DVTMacroExpansionScope *)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
@end

@protocol DVTModelObject <NSObject>
@property(readonly, nonatomic) DVTModelObjectGraph *objectGraph;
@end

@protocol DVTObserveXPCServicesProtocol
- (void)enableExtensionWithIdentifier:(NSString *)arg1;
- (void)stopObservingServicesForPid:(int)arg1;
- (void)observerServiceNamed:(NSString *)arg1 parentPid:(int)arg2 args:(NSArray *)arg3 env:(NSDictionary *)arg4 startSuspended:(BOOL)arg5 interposeBinaryAtPath:(NSString *)arg6;
@end

@protocol DVTObserveXPCServicesProtocol_Callback
- (void)attachToServiceName:(NSString *)arg1 pid:(int)arg2 parentPID:(int)arg3 stdoutFH:(NSFileHandle *)arg4 stderrFH:(NSFileHandle *)arg5;
@end

@protocol DVTProductCategoryProvider
+ (NSSet *)overridingDeviceTypes;
@end

@protocol DVTProgressReporting <NSObject>
@property(readonly) long long progress;
@end

@protocol DVTPropertyListEncoding <NSObject>
- (void)encodeIntoPropertyList:(NSMutableDictionary *)arg1;
- (id)initWithPropertyList:(NSDictionary *)arg1 owner:(id)arg2;
@end

@protocol DVTProvisioningDataProvider <NSObject>
- (NSObject<DVTProvisioningProfileDataSource> *)dataSourceWithProfileData:(NSData *)arg1;
@end

@protocol DVTProvisioningProfile <NSObject, DVTQualifiableProfile>
@property(readonly) NSArray *identityCertificates;
@property(readonly) NSArray *certificates;
@property(readonly) BOOL isPushEnabled;
@property(readonly) BOOL isOMCEnabled;
@property(readonly) BOOL isWACEnabled;
@property(readonly) BOOL isHomeKitEnabled;
@property(readonly) BOOL isHealthKitEnabled;
@property(readonly) NSString *dataProtectionLevel;
@property(readonly) BOOL isAssociatedDomainsEnabled;
@property(readonly) BOOL isVPNLiteEnabled;
@property(readonly) BOOL isApplicationGroupsEnabled;
@property(readonly) BOOL isKeychainAccessGroupsEnabled;
@property(readonly) BOOL isGameCenterEnabled;
@property(readonly) BOOL isMapsEnabled;
@property(readonly) BOOL isInterAppAudioEnabled;
@property(readonly) BOOL isNetworkExtensionsEnabled;
@property(readonly) BOOL isMultipathEnabled;
@property(readonly) BOOL isHotspotConfigurationEnabled;
@property(readonly) BOOL isSiriEnabled;
@property(readonly) BOOL isDataProtectionEnabled;
@property(readonly) BOOL isPassbookEnabled;
@property(readonly) BOOL isICloudEnabled;
@property(readonly) BOOL usesExplicitAppIdentifier;
@property(readonly) NSData *dataRepresentation;
@property(readonly) NSSet *supportedUDIDs;
@property(readonly) DVTPlatform *dvt_platform;
@property(readonly) NSString *platform;
@property(readonly) NSString *preferredFilenameExtension;
@property(readonly) BOOL isMacProfile;
@property(readonly) BOOL isUniversal;
@property(readonly) BOOL expiredOrWillExpireSoon;
@property(readonly) BOOL willExpireSoon;
@property(readonly) NSArray *signingCertificates;
@property(readonly, copy) DVTFilePath *filePath;
@property(readonly) NSDate *creationDate;
@property(readonly) NSArray *teamIdentifierPrefixes;
@property(readonly) NSString *appIdentifierName;
@property(readonly) NSArray *appIdentifierPrefixes;
@property(readonly) NSString *appIdentifierEntitlementWithoutPrefix;
@property(readonly) NSString *appIdentifierEntitlement;
@property(readonly) DVTAppIDFeatures *features;
@property(readonly) NSDictionary *entitlements;
@property(readonly) int version;
@property(readonly) NSString *teamID;
@property(readonly) NSString *UUID;
- (BOOL)containsCertificate:(struct OpaqueSecCertificateRef *)arg1;
- (NSString *)longDescription;
- (BOOL)writeToURL:(NSURL *)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)writeToFile:(NSString *)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (long long)dateCompareDecending:(id <DVTProvisioningProfile>)arg1;
- (long long)dateCompare:(id <DVTProvisioningProfile>)arg1;
- (long long)localizedCompare:(id <DVTProvisioningProfile>)arg1;
- (long long)compare:(id <DVTProvisioningProfile>)arg1;
- (BOOL)canBeInstalledOnDeviceWithIdentifier:(NSString *)arg1;
- (BOOL)canBeInstalledOnDevice:(DVTDevice *)arg1;
- (BOOL)containsSigningCertificate:(DVTSigningCertificate *)arg1;
- (BOOL)hasCertificateMatchingIdentity:(NSString *)arg1 includeExpired:(BOOL)arg2;
- (BOOL)allowsFeatures:(DVTAppIDFeatures *)arg1 missingFeatures:(id *)arg2;
@end

@protocol DVTProvisioningProfileSource <NSObject>
- (NSSet *)allProfiles_sync;
- (void)forceProfileLoading;
@end

@protocol DVTQualifiableProfile
@property(readonly) BOOL isActive;
@property(readonly) BOOL expired;
@property(readonly) NSDate *expirationDate;
@property(readonly) NSString *appIdentifierUserDescription;
@property(readonly) NSString *provisioningProfilePlatformIdentifier;
@property(readonly) NSString *teamName;
@property(readonly) NSString *teamID;
@property(readonly) NSString *name;
- (BOOL)isXcodeManaged;
- (BOOL)matchesBundleIdentifier:(NSString *)arg1;

@optional
- (BOOL)isAppleInternal;
@end

@protocol DVTRadarSupport <NSObject>
+ (id)sharedClient;
@property id <DVTRadar_AttachmentDownloadDelegate> attachmentDownloadDelegate;
- (void)reportSelfDiagnosisIssueWithSignature:(NSString *)arg1 title:(NSString *)arg2 componentName:(NSString *)arg3 componentVersion:(NSString *)arg4 description:(NSString *)arg5 keywords:(NSArray *)arg6 classification:(unsigned long long)arg7 ownerProblemID:(NSNumber *)arg8 canFileNewProblem:(BOOL)arg9 completionBlock:(void (^)(BOOL, unsigned long long, BOOL))arg10;
- (void)reportSelfDiagnosisIssueWithSignature:(NSString *)arg1 title:(NSString *)arg2 componentName:(NSString *)arg3 componentVersion:(NSString *)arg4 description:(NSString *)arg5 keywords:(NSArray *)arg6 classification:(unsigned long long)arg7 ownerProblemID:(NSNumber *)arg8 completionBlock:(void (^)(BOOL, unsigned long long, BOOL))arg9;
- (void)reportSelfDiagnosisIssueWithSignature:(NSString *)arg1 title:(NSString *)arg2 componentName:(NSString *)arg3 componentVersion:(NSString *)arg4 description:(NSString *)arg5 keywords:(NSArray *)arg6 ownerProblemID:(NSNumber *)arg7 canFileNewProblem:(BOOL)arg8 completionBlock:(void (^)(BOOL, unsigned long long, BOOL))arg9;
- (void)reportSelfDiagnosisIssueWithSignature:(NSString *)arg1 title:(NSString *)arg2 componentName:(NSString *)arg3 componentVersion:(NSString *)arg4 description:(NSString *)arg5 keywords:(NSArray *)arg6 ownerProblemID:(NSNumber *)arg7 completionBlock:(void (^)(BOOL, unsigned long long, BOOL))arg8;
- (void)asyncPrepareToReportSelfDiagnosisIssueWithBlock:(void (^)(void))arg1;
- (BOOL)selfDiagnosisEnabled;
- (void)validateRadarComponentName:(NSString *)arg1 version:(NSString *)arg2 completionBlock:(void (^)(BOOL, NSError *))arg3;
- (id <DVTRadar_ComponentForIdentifier>)bestComponentForBundleName:(NSString *)arg1;
- (id <DVTRadar_ComponentForIdentifier>)bestComponentForClassName:(NSString *)arg1;
- (id <DVTRadar_ComponentForIdentifier>)bestComponentForFrame:(DVTStackBacktraceFrame *)arg1;
- (id <DVTRadar_ComponentForIdentifier>)bestComponentForPath:(NSString *)arg1;
- (id <DVTRadar_ComponentForIdentifier>)defaultComponent;
- (NSArray *)hltComponentForBundleNames;
- (NSArray *)hltComponentForClassNames;
- (NSArray *)hltComponentForPaths;
- (id)attachmentFromData:(NSData *)arg1 withFilename:(NSString *)arg2 isPicture:(BOOL)arg3;
- (id)attachmentFromFile:(NSString *)arg1;
- (void)associateProblem:(id <DVTRadar_Problem>)arg1 withAssociate:(id <DVTRadar_Associate>)arg2;
- (void)problemsForKeyword:(NSString *)arg1 completionBlock:(void (^)(NSError *, NSArray *))arg2;
- (void)problemsForProblemIDs:(NSArray *)arg1 completionBlock:(void (^)(NSError *, NSArray *))arg2;
- (void)showRadarNumberPromptForIssues:(NSArray *)arg1 attachedToWindow:(NSWindow *)arg2 completionBlock:(void (^)(NSError *, unsigned long long))arg3;
- (void)showRadarNumberPromptForIssue:(id <DVTRadarSupport_Issue>)arg1 attachedToWindow:(NSWindow *)arg2 completionBlock:(void (^)(NSError *, unsigned long long))arg3;
- (void)showRadarUIForIssues:(NSArray *)arg1 bugTitle:(NSString *)arg2 componentName:(NSString *)arg3 componentVersion:(NSString *)arg4 keywords:(NSArray *)arg5 attachmentDownloadDelegate:(id <DVTRadar_AttachmentDownloadDelegate>)arg6 attachedToWindow:(NSWindow *)arg7 completionBlock:(void (^)(NSError *, unsigned long long))arg8;
- (void)showRadarUIForIssue:(id <DVTRadarSupport_Issue>)arg1 componentName:(NSString *)arg2 componentVersion:(NSString *)arg3 keywords:(NSArray *)arg4 attachmentDownloadDelegate:(id <DVTRadar_AttachmentDownloadDelegate>)arg5 attachedToWindow:(NSWindow *)arg6 completionBlock:(void (^)(NSError *, unsigned long long))arg7;
@end

@protocol DVTRegistrable <NSObject>
@property(readonly) NSString *identifier;

@optional
@property(readonly) NSString *displayDescription;
@property(readonly) NSString *displayName;
@property(readonly) DVTVersion *version;
@property(readonly) NSArray *aliases;
@end

@protocol DVTSelfInstrumentationSession <NSObject>
+ (NSString *)fileExtensionForTimeProfile;
+ (id)timeProfileSessionOrError:(id *)arg1;
+ (void)sendStopSignalWithName:(NSString *)arg1;
+ (void)sendPointSignalWithName:(NSString *)arg1;
+ (void)sendStartSignalWithName:(NSString *)arg1;
- (BOOL)endSessionAndDiscardResultsWithError:(id *)arg1;
- (NSString *)endSessionAndSaveToPath:(NSString *)arg1 error:(id *)arg2;
@end

@protocol DVTSigningCertificateSourceDelegate <NSObject>
- (void)signingCertificateSourceShouldDoFullResetFromSigningCertificates:(DVTSigningCertificateSource *)arg1;
- (void)signingCertificateSourcePrivateKeyStatusForCertificatesMayHaveChanged:(DVTSigningCertificateSource *)arg1;
- (void)signingCertificateSource:(DVTSigningCertificateSource *)arg1 didRemoveCertificate:(DVTSigningCertificate *)arg2;
- (void)signingCertificateSource:(DVTSigningCertificateSource *)arg1 didAddCertificate:(DVTSigningCertificate *)arg2;
@end

@protocol DVTSimpleSerialization
- (void)dvt_writeToSerializer:(DVTSimpleSerializer *)arg1;
- (id)dvt_initFromDeserializer:(DVTSimpleDeserializer *)arg1;
@end

@protocol DVTSpecificApplicationProvider <NSObject>
- (id <DVTDeviceApplication>)applicationForURL:(NSURL *)arg1;
@end

@protocol DVTStreamingZipArchiver <NSObject>
@end

@protocol DVTStringRepresentationPersistable <NSObject>
- (NSString *)dvt_persistableStringRepresentation;
- (id)dvt_initFromPersistableStringRepresentation:(NSString *)arg1 error:(id *)arg2;
@end

@protocol DVTTextReplacable <NSObject>
- (BOOL)replaceFindResults:(NSArray *)arg1 withString:(NSString *)arg2 withError:(id *)arg3;

@optional
- (BOOL)replaceFindResults:(NSArray *)arg1 inSelection:(struct _NSRange)arg2 withString:(NSString *)arg3 withError:(id *)arg4;
- (BOOL)replaceTextWithContentsOfURL:(NSURL *)arg1 error:(id *)arg2;
@end

@protocol DVTTextlikeFindDescriptor <NSObject>
@property(readonly) int matchStyle;
@end

@protocol DVTUserDefaults <NSObject>
- (void)setObject:(id)arg1 forKeyedSubscript:(NSString *)arg2;
- (id)objectForKeyedSubscript:(NSString *)arg1;
- (void)removeObjectForKey:(NSString *)arg1;
- (void)setObject:(id)arg1 forKey:(NSString *)arg2;
- (NSURL *)URLForKey:(NSString *)arg1;
- (double)doubleForKey:(NSString *)arg1;
- (NSArray *)stringArrayForKey:(id)arg1;
- (long long)integerForKey:(NSString *)arg1;
- (float)floatForKey:(NSString *)arg1;
- (NSData *)dataForKey:(NSString *)arg1;
- (NSDictionary *)dictionaryForKey:(NSString *)arg1;
- (NSArray *)arrayForKey:(NSString *)arg1;
- (BOOL)boolForKey:(NSString *)arg1;
- (NSString *)stringForKey:(NSString *)arg1;
- (id)objectForKey:(NSString *)arg1;
@end

@protocol DVTXMLUnarchiving <NSObject>
- (id)initFromXMLUnarchiver:(DVTXMLUnarchiver *)arg1 archiveVersion:(float)arg2;
@end

@protocol ITunesSoftwareServiceAuthenticationDelegate <NSObject>

@optional
- (void)willAuthenticateWithContext:(id <ITunesAuthenticationContextProtocol>)arg1;
@end

@protocol ITunesSoftwareServiceUploadDelegate <NSObject>

@optional
- (void)softwareService:(id <ITunesSoftwareService>)arg1 didCompleteUploadForApplication:(id <ITunesSoftwareApplicationDescription>)arg2;
- (BOOL)softwareService:(id <ITunesSoftwareService>)arg1 shouldContinueUploadForApplication:(id <ITunesSoftwareApplicationDescription>)arg2;
- (void)softwareService:(id <ITunesSoftwareService>)arg1 didUpdatePercentageComplete:(NSNumber *)arg2 forApplication:(id <ITunesSoftwareApplicationDescription>)arg3;
- (void)softwareService:(id <ITunesSoftwareService>)arg1 didUpdateStatusMessage:(NSString *)arg2 forApplication:(id <ITunesSoftwareApplicationDescription>)arg3;
- (void)softwareService:(id <ITunesSoftwareService>)arg1 willBeginUploadForApplication:(id <ITunesSoftwareApplicationDescription>)arg2;
@end

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSCopying
- (id)copyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSFastEnumeration
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
@end

@protocol NSKeyedUnarchiverDelegate <NSObject>

@optional
- (void)unarchiverDidFinish:(NSKeyedUnarchiver *)arg1;
- (void)unarchiverWillFinish:(NSKeyedUnarchiver *)arg1;
- (void)unarchiver:(NSKeyedUnarchiver *)arg1 willReplaceObject:(id)arg2 withObject:(id)arg3;
- (id)unarchiver:(NSKeyedUnarchiver *)arg1 didDecodeObject:(id)arg2;
- (Class)unarchiver:(NSKeyedUnarchiver *)arg1 cannotDecodeObjectOfClassName:(NSString *)arg2 originalClasses:(NSArray *)arg3;
@end

@protocol NSMutableCopying
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSSecureCoding <NSCoding>
+ (BOOL)supportsSecureCoding;
@end

@protocol NSURLConnectionDataDelegate <NSURLConnectionDelegate>

@optional
- (void)connectionDidFinishLoading:(NSURLConnection *)arg1;
- (NSCachedURLResponse *)connection:(NSURLConnection *)arg1 willCacheResponse:(NSCachedURLResponse *)arg2;
- (void)connection:(NSURLConnection *)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (NSInputStream *)connection:(NSURLConnection *)arg1 needNewBodyStream:(NSURLRequest *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveData:(NSData *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveResponse:(NSURLResponse *)arg2;
- (NSURLRequest *)connection:(NSURLConnection *)arg1 willSendRequest:(NSURLRequest *)arg2 redirectResponse:(NSURLResponse *)arg3;
@end

@protocol NSURLConnectionDelegate <NSObject>

@optional
- (void)connection:(NSURLConnection *)arg1 didCancelAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (void)connection:(NSURLConnection *)arg1 didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (BOOL)connection:(NSURLConnection *)arg1 canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)arg2;
- (void)connection:(NSURLConnection *)arg1 willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)arg2;
- (BOOL)connectionShouldUseCredentialStorage:(NSURLConnection *)arg1;
- (void)connection:(NSURLConnection *)arg1 didFailWithError:(NSError *)arg2;
@end

@protocol NSUserNotificationCenterDelegate <NSObject>

@optional
- (BOOL)userNotificationCenter:(NSUserNotificationCenter *)arg1 shouldPresentNotification:(NSUserNotification *)arg2;
- (void)userNotificationCenter:(NSUserNotificationCenter *)arg1 didActivateNotification:(NSUserNotification *)arg2;
- (void)userNotificationCenter:(NSUserNotificationCenter *)arg1 didDeliverNotification:(NSUserNotification *)arg2;
@end

@protocol _TtPs9AnyObject_
@end

@interface DVTDeviceCapability : NSObject
{
    NSDictionary *_properties;
}

+ (id)deviceCapabilityWithProperties:(id)arg1;
@property(readonly, copy) NSDictionary *properties; // @synthesize properties=_properties;
- (void).cxx_destruct;
- (id)description;
- (BOOL)matchesCapability:(id)arg1;
- (id)initWithProperties:(id)arg1;

@end

@interface DVTDeviceCapabilityMatchAnythingObject : NSObject
{
}

@end

@interface DVTXMLArchiver : NSObject
{
    DVTSimpleXMLWriter *_writer;
    NSMapTable *_classesToElementNames;
    id _delegate;
    id _context;
    NSArray *_extraAttributes;
    unsigned long long _currentExtraAttributeIdx;
}

+ (id)archivedDataWithRootObject:(id)arg1;
+ (void)setElementNamePrefix:(id)arg1;
+ (id)elementNameForClass:(Class)arg1;
+ (void)setElementName:(id)arg1 forClass:(Class)arg2;
@property(retain) id context; // @synthesize context=_context;
- (void).cxx_destruct;
- (void)_encodeExtraRelationshipsForObject:(id)arg1;
- (void)_finishEncodingAttributes;
- (void)_beginEncodingAttributesForObject:(id)arg1;
- (void)_didEncodeAttributeWithName:(id)arg1;
- (void)finishEncoding;
- (void)encodeIntegerAttribute:(id)arg1 withValue:(long long)arg2;
- (void)encodeBoolAttribute:(id)arg1 withValue:(BOOL)arg2;
- (void)encodeStringAttribute:(id)arg1 withValue:(id)arg2;
- (void)encodeObjectArray:(id)arg1 withTagName:(id)arg2;
- (void)encodeRootObjectArray:(id)arg1 withTagName:(id)arg2 archiveVersion:(id)arg3;
- (void)_encodeObjectArray:(id)arg1 withTagName:(id)arg2 archiveVersion:(id)arg3;
- (void)encodeObject:(id)arg1;
- (void)encodeRootObject:(id)arg1 withArchiveVersion:(id)arg2;
- (void)_encodeVersionAttribute:(id)arg1;
- (id)xmlWriter;
- (id)elementNameForClass:(Class)arg1;
- (void)setElementName:(id)arg1 forClass:(Class)arg2;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)init;
- (id)initForWritingWithMutableData:(id)arg1;

@end

@interface DVTMacroDefinitionTable : NSObject <NSCopying, NSMutableCopying>
{
    struct DVTMacroValueAssignmentMapTable *_mapTable;
    NSString *_label;
    struct os_unfair_lock_s _cacheLock;
    NSDictionary *_cachedDictRep;
    NSSet *_cachedMacroNameSet;
    unsigned long long _cachedHash;
    BOOL _isImmutable;
    BOOL _postsChangeNotifications;
    CDUnknownBlockType _willSetValueBlock;
    CDUnknownBlockType _didSetValueBlock;
    DVTStackBacktrace *_rootBacktrace;
}

+ (id)macroNameRegistry;
+ (id)newWithLabel:(id)arg1;
@property BOOL postsChangeNotifications; // @synthesize postsChangeNotifications=_postsChangeNotifications;
- (void).cxx_destruct;
- (id)description;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (void)assertInternalConsistency;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)valueForKey:(id)arg1;
- (void)makeImmutable;
- (BOOL)isImmutable;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)removeAllMacros;
- (void)removeMacroNames:(id)arg1;
- (void)removeMacroNames:(id)arg1 arguments:(struct __va_list_tag [1])arg2;
- (void)removeMacroName:(id)arg1;
- (void)setMacroNamesAndValuesFromMacroDefinitionTable:(id)arg1;
- (void)setMacroNamesAndValuesFromDictionary:(id)arg1;
- (id)allMacroNames;
- (id)dictionaryRepresentation;
- (void)enumerateMacroNamesAndValuesUsingBlock:(CDUnknownBlockType)arg1;
- (void)enumerateValuesForMacroName:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)valueForMacroName:(id)arg1 conditionSet:(id)arg2;
- (void)parseAndSetValue:(id)arg1 forMacroName:(id)arg2 conditionSet:(id)arg3;
- (void)setLiteralValue:(id)arg1 forMacroName:(id)arg2 conditionSet:(id)arg3;
- (void)setValue:(id)arg1 forMacroName:(id)arg2 conditionSet:(id)arg3;
- (void)discardCaches;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(copy) CDUnknownBlockType didSetValueBlock;
@property(copy) CDUnknownBlockType willSetValueBlock;
- (unsigned long long)count;
- (unsigned long long)numberOfDefinitions;
- (unsigned long long)numberOfMacros;
@property(copy) NSString *label;
- (void)dealloc;
- (id)init;
- (id)initWithLabel:(id)arg1;
- (id)initWithLabel:(id)arg1 rootBacktrace:(id)arg2;

@end

@interface DVTSourceModelParserInteriorProductionRule : NSObject
{
    int _rc;
    BOOL _optional;
    BOOL _repeatable;
    DVTSourceModelParserProductionRule *_prodRule;
    DVTSourceModelParserInteriorProductionRule *_nextCandidate;
    unsigned long long _temporaryLexerFlags;
}

@property(nonatomic) unsigned long long temporaryLexerFlags; // @synthesize temporaryLexerFlags=_temporaryLexerFlags;
@property(retain, nonatomic) DVTSourceModelParserInteriorProductionRule *nextCandidate; // @synthesize nextCandidate=_nextCandidate;
@property(readonly, nonatomic) BOOL repeatable; // @synthesize repeatable=_repeatable;
@property(readonly, nonatomic) BOOL optional; // @synthesize optional=_optional;
@property(readonly, nonatomic) DVTSourceModelParserProductionRule *prodRule; // @synthesize prodRule=_prodRule;
- (void).cxx_destruct;
- (id)description;
- (id)initWithProductionRule:(id)arg1 optional:(BOOL)arg2 repeatable:(BOOL)arg3;

@end

@interface DVTSourceModelParserProductionRule : NSObject
{
    int _rc;
    id *_tokenPredictSetBuffer;
    unsigned long long _tokenPredictSetBufferSize;
    id *_nodePredictSetBuffer;
    unsigned long long _nodePredictSetBufferSize;
    BOOL _blockScope;
    BOOL _inheritsNodeType;
    BOOL _ignoreToken;
    BOOL _itemIsVolatile;
    BOOL _saveEndToken;
    BOOL _interiorRuleMayHaveTemporaryLexerFlags;
    short _itemSyntaxType;
    int _startToken;
    int _endToken;
    int _altEndToken;
    DVTLanguageSpecification *_startProduction;
    DVTLanguageSpecification *_endProduction;
    DVTLanguageSpecification *_altEndProduction;
    NSArray *_predictSet;
    NSArray *_interiorProductionRules;
    DVTLanguageSpecification *_langSpec;
    long long _itemToken;
    unsigned long long _lexerMode;
    NSArray *_tokenInteriorPredictSet;
    NSArray *_nodeInteriorPredictSet;
}

+ (void)initializeProductionsForLanguageSpecification:(id)arg1;
+ (unsigned long long)indexOfProductionMatchingNode:(id)arg1 inProduction:(id)arg2;
+ (unsigned long long)indexOfProductionMatchingToken:(int)arg1 inProduction:(id)arg2;
+ (int)tokenForSymbol:(id)arg1;
@property(nonatomic) BOOL interiorRuleMayHaveTemporaryLexerFlags; // @synthesize interiorRuleMayHaveTemporaryLexerFlags=_interiorRuleMayHaveTemporaryLexerFlags;
@property(retain, nonatomic) NSArray *nodeInteriorPredictSet; // @synthesize nodeInteriorPredictSet=_nodeInteriorPredictSet;
@property(retain, nonatomic) NSArray *tokenInteriorPredictSet; // @synthesize tokenInteriorPredictSet=_tokenInteriorPredictSet;
@property(nonatomic) unsigned long long lexerMode; // @synthesize lexerMode=_lexerMode;
@property(nonatomic) BOOL saveEndToken; // @synthesize saveEndToken=_saveEndToken;
@property(nonatomic) BOOL itemIsVolatile; // @synthesize itemIsVolatile=_itemIsVolatile;
@property(nonatomic) BOOL ignoreToken; // @synthesize ignoreToken=_ignoreToken;
@property(nonatomic) BOOL inheritsNodeType; // @synthesize inheritsNodeType=_inheritsNodeType;
@property(nonatomic) BOOL blockScope; // @synthesize blockScope=_blockScope;
@property(nonatomic) short itemSyntaxType; // @synthesize itemSyntaxType=_itemSyntaxType;
@property(nonatomic) long long itemToken; // @synthesize itemToken=_itemToken;
@property(readonly, nonatomic) DVTLanguageSpecification *langSpec; // @synthesize langSpec=_langSpec;
@property(retain, nonatomic) NSArray *interiorProductionRules; // @synthesize interiorProductionRules=_interiorProductionRules;
@property(readonly, nonatomic) NSArray *predictSet; // @synthesize predictSet=_predictSet;
@property(nonatomic) DVTLanguageSpecification *altEndProduction; // @synthesize altEndProduction=_altEndProduction;
@property(nonatomic) int altEndToken; // @synthesize altEndToken=_altEndToken;
@property(nonatomic) DVTLanguageSpecification *endProduction; // @synthesize endProduction=_endProduction;
@property(readonly, nonatomic) DVTLanguageSpecification *startProduction; // @synthesize startProduction=_startProduction;
@property(readonly, nonatomic) int endToken; // @synthesize endToken=_endToken;
@property(readonly, nonatomic) int startToken; // @synthesize startToken=_startToken;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (BOOL)matchEndNode:(id)arg1;
- (BOOL)matchEndToken:(int)arg1;
- (BOOL)matchNode:(id)arg1;
- (BOOL)matchToken:(int)arg1;
@property(readonly, nonatomic) BOOL scopeProduction;
- (id *)_nodePredictSetBuffer;
- (id *)_tokenPredictSetBuffer;
- (void)dealloc;
- (id)initWithStartProduction:(id)arg1 langSpec:(id)arg2;
- (id)initWithStartToken:(int)arg1 endToken:(int)arg2 langSpec:(id)arg3 predictSet:(id)arg4;

@end

@interface DVTDotSeparatedVersion : NSObject <NSCopying, NSCoding>
{
    long long _components[8];
    NSString *_description;
}

- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (long long)compareMajorMinorVersion:(id)arg1;
- (long long)compare:(id)arg1;
- (long long)_compare:(id)arg1 withPrecision:(unsigned long long)arg2;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly) unsigned long long componentCount;
- (long long)componentAtIndex:(unsigned long long)arg1;
- (id)initWithString:(id)arg1;

@end

@interface DVTDeveloperPortalDefaults : DVTServiceDefaults
{
    DVTDispatchLock *_lock;
    NSString *_portalServiceXcodeClientID;
    NSString *_portalServiceXcodeServerClientID;
    NSString *_portalServiceProtocolVersion;
    NSString *_portalServiceHostname;
    NSString *_portalServiceCertificateHostname;
}

+ (id)sharedDefaults;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSString *portalServiceCertificateHostname; // @synthesize portalServiceCertificateHostname=_portalServiceCertificateHostname;
@property(readonly, copy, nonatomic) NSString *portalServiceHostname; // @synthesize portalServiceHostname=_portalServiceHostname;
@property(readonly, copy, nonatomic) NSString *portalServiceProtocolVersion; // @synthesize portalServiceProtocolVersion=_portalServiceProtocolVersion;
@property(readonly, copy, nonatomic) NSString *portalServiceXcodeServerClientID; // @synthesize portalServiceXcodeServerClientID=_portalServiceXcodeServerClientID;
@property(readonly, copy, nonatomic) NSString *portalServiceXcodeClientID; // @synthesize portalServiceXcodeClientID=_portalServiceXcodeClientID;
- (id)_stringForKey:(id)arg1 legacyKey:(id)arg2;
- (id)init;

@end

@interface DVTCommandLineOptionDefinition : NSObject
{
    NSString *_name;
    NSString *_usageName;
    NSString *_usageDescription;
    long long _argumentType;
    NSString *_argumentKey;
    CDUnknownBlockType _handlerBlock;
}

+ (id)optionDefinitionWithName:(id)arg1 usageName:(id)arg2 usageDescription:(id)arg3 argumentType:(long long)arg4 argumentKey:(id)arg5 handlerBlock:(CDUnknownBlockType)arg6;
@property(copy) CDUnknownBlockType handlerBlock; // @synthesize handlerBlock=_handlerBlock;
@property(copy) NSString *argumentKey; // @synthesize argumentKey=_argumentKey;
@property long long argumentType; // @synthesize argumentType=_argumentType;
@property(copy) NSString *usageDescription; // @synthesize usageDescription=_usageDescription;
@property(copy) NSString *usageName; // @synthesize usageName=_usageName;
@property(copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (BOOL)handleArgument:(id)arg1 remainingArguments:(id)arg2 options:(id)arg3 status:(char *)arg4 error:(id *)arg5;
- (BOOL)matchesArgument:(id)arg1;
- (id)description;
- (id)initWithName:(id)arg1 usageName:(id)arg2 usageDescription:(id)arg3 argumentType:(long long)arg4 argumentKey:(id)arg5 handlerBlock:(CDUnknownBlockType)arg6;

@end

@interface DVTRegexCommandLineOptionDefinition : DVTCommandLineOptionDefinition
{
    DVTRegularExpression *_matchRegex;
}

@property(readonly, copy) DVTRegularExpression *matchRegex; // @synthesize matchRegex=_matchRegex;
- (void).cxx_destruct;
- (BOOL)handleArgument:(id)arg1 remainingArguments:(id)arg2 options:(id)arg3 status:(char *)arg4 error:(id *)arg5;
- (BOOL)matchesArgument:(id)arg1;
- (id)initWithName:(id)arg1 matchRegex:(id)arg2 usageName:(id)arg3 usageDescription:(id)arg4 argumentType:(long long)arg5 handlerBlock:(CDUnknownBlockType)arg6;

@end

@interface DVTCommandLineParser : NSObject
{
    NSString *_usageBanner;
    NSArray *_optionDefinitions;
    CDUnknownBlockType _fallbackOptionHandlerBlock;
}

@property(copy) CDUnknownBlockType fallbackOptionHandlerBlock; // @synthesize fallbackOptionHandlerBlock=_fallbackOptionHandlerBlock;
@property(copy) NSArray *optionDefinitions; // @synthesize optionDefinitions=_optionDefinitions;
@property(copy) NSString *usageBanner; // @synthesize usageBanner=_usageBanner;
- (void).cxx_destruct;
- (id)usageString;
- (id)parseArguments:(id)arg1 intoOptionsDictionary:(id)arg2 error:(id *)arg3;
- (id)lookUpOptionDefinitionForArgument:(id)arg1;
- (id)init;

@end

@interface DVTPatienceDiffContext : DVTDiffContext
{
}

+ (id)patienceLogAspect;
- (void)_buildDiffDescriptors;

@end

@interface DVTBlockScanner : DVTSourceScanner
{
    NSString *startString;
    NSString *endString;
    NSString *altEndString;
    unsigned short startChar;
    unsigned short endChar;
    unsigned short altEndChar;
    unsigned short escapeChar;
    unsigned int recursive:1;
    unsigned int dontIncludeEnd:1;
    unsigned int parseEndBeforeIncludedRules:1;
    unsigned int caseSensitive:1;
    unsigned int isVolatile:1;
    long long startToken;
    long long endToken;
    long long altEndToken;
    long long altToken;
}

- (void).cxx_destruct;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (id)parseRecursive:(id)arg1 withContext:(id)arg2 inputStream:(id)arg3 range:(struct _NSRange)arg4 dirtyRange:(struct _NSRange *)arg5;
- (int)actionForEndToken:(id)arg1 inContext:(id)arg2 inputStream:(id)arg3;
- (long long)nextToken:(id)arg1 withItem:(id)arg2 inTree:(id)arg3 withContext:(id)arg4 initialToken:(long long)arg5 insideBlock:(BOOL)arg6 range:(struct _NSRange)arg7 dirtyRange:(struct _NSRange *)arg8 reusedToken:(char *)arg9;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTDeveloperProfile : NSObject
{
}

+ (id)currentProfile;

@end

@interface DVTMacroExpansionScope : NSObject <NSCopying>
{
    DVTMacroExpansionScope *_parentScope;
    DVTMacroDefinitionTable *_macroDefnTable;
    NSDictionary *_condParamValues;
    NSDictionary *_allCondParamValues;
    NSDictionary *_condParamFallbackValues;
    NSDictionary *_allCondParamFallbackValues;
    unsigned int _expansionOptions:8;
    unsigned int _defnLevel:8;
    unsigned int _highestDefnLevel:8;
    unsigned int _unused:8;
    id *_nextScopeByDefnLevel;
}

+ (id)newWithParentScope:(id)arg1 macroDefinitionTables:(id)arg2;
+ (id)newWithParentScope:(id)arg1 macroDefinitionTables:(id)arg2 conditionParameterValues:(id)arg3;
+ (id)newWithParentScope:(id)arg1 macroDefinitionTables:(id)arg2 conditionParameterValues:(id)arg3 options:(unsigned long long)arg4;
+ (id)newWithParentScope:(id)arg1 definitionLevelsToClear:(id)arg2 macroDefinitionTables:(id)arg3 conditionParameterValues:(id)arg4 options:(unsigned long long)arg5 knownStringMapping:(id)arg6;
+ (id)newWithParentScope:(id)arg1 macros:(id)arg2 definitionLevel:(long long)arg3;
+ (id)newWithParentScope:(id)arg1 macros:(id)arg2 definitionLevel:(long long)arg3 conditionParameterValues:(id)arg4;
+ (id)newWithParentScope:(id)arg1 macros:(id)arg2 definitionLevel:(long long)arg3 conditionParameterValues:(id)arg4 preserveUnresolvedReferences:(BOOL)arg5;
+ (id)stringForDefinitionLevel:(long long)arg1;
+ (id)newWithParentScope:(id)arg1 macroDefinitionTable:(id)arg2 definitionLevel:(unsigned long long)arg3;
+ (id)newWithParentScope:(id)arg1 macroDefinitionTable:(id)arg2 definitionLevel:(unsigned long long)arg3 definitionLevelsToClear:(id)arg4 conditionParameterValues:(id)arg5;
+ (id)newWithParentScope:(id)arg1 macroDefinitionTable:(id)arg2 definitionLevel:(unsigned long long)arg3 definitionLevelsToClear:(id)arg4 conditionParameterValues:(id)arg5 expansionOptions:(unsigned long long)arg6;
+ (id)newWithParentScope:(id)arg1 macroDefinitionTable:(id)arg2 definitionLevel:(unsigned long long)arg3 definitionLevelsToClear:(id)arg4 conditionParameterValues:(id)arg5 conditionParameterFallbackValues:(id)arg6 expansionOptions:(unsigned long long)arg7;
- (void).cxx_destruct;
- (void)appendDebugDescriptionToStringBuilder:(struct DVTStringBuilder *)arg1 indent:(unsigned long long)arg2;
- (id)nextScopeForOwnDefinitionLevel;
- (id)scopeByRemovingAllTablesAtDefinitionLevel:(long long)arg1;
- (id)sortedLongDescription;
- (id)longDescriptionInSortedMacroNameOrder;
- (id)longDescriptionInScopeAncestryOrder;
- (id)longDescriptionInMacroLookupOrder;
- (id)description;
- (id)descriptionWithLocale:(id)arg1 indent:(unsigned long long)arg2;
- (void)appendAdditionalContentToStringBuilder:(struct DVTStringBuilder *)arg1 indent:(unsigned long long)arg2;
- (id)allMacroNames;
- (id)allConditionParameterValues;
- (id)valueForConditionParameter:(id)arg1;
- (long long)definitionLevel;
- (id)macroDefinitionTable;
- (unsigned long long)options;
@property(readonly) BOOL preserveUnresolvedReferences;
- (id)parentScope;
- (id)longDescription;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (void)dealloc;
- (id)initWithParentScope:(id)arg1 macroDefinitionTable:(id)arg2 definitionLevel:(unsigned long long)arg3 definitionLevelsToClear:(id)arg4 conditionParameterValues:(id)arg5 expansionOptions:(unsigned long long)arg6;
- (id)initWithParentScope:(id)arg1 macroDefinitionTable:(id)arg2 definitionLevel:(unsigned long long)arg3 definitionLevelsToClear:(id)arg4 conditionParameterValues:(id)arg5 conditionParameterFallbackValues:(id)arg6 expansionOptions:(unsigned long long)arg7;
- (id)evaluateMacroExpression:(id)arg1 asStringListForLiteralStringValue:(id)arg2;
- (id)evaluateMacroExpression:(id)arg1 asStringForLiteralStringValue:(id)arg2;
- (BOOL)evaluatedBooleanValueForMacroExpression:(id)arg1;
- (id)evaluatedStringListValueForMacroExpression:(id)arg1;
- (id)evaluatedStringValueForMacroExpression:(id)arg1;
- (BOOL)evaluatedBooleanValueForMacroNamed:(id)arg1;
- (id)evaluatedStringListValueForMacroNamed:(id)arg1;
- (id)evaluatedStringValueForMacroNamed:(id)arg1;
- (id)evaluatedStringValueForMacroNamed:(id)arg1 returningFallbackConditionsUsed:(id *)arg2;
- (id)lookupValueForMacroName:(id)arg1 hash:(unsigned int)arg2 withCursor:(struct DVTMacroNameLookupCursor *)arg3;

@end

@interface DVTDeveloperPaths : NSObject
{
    NSString *_developerFolderPath;
    NSString *_developerUsrPath;
}

+ (id)pathsWithDeveloperFolderPath:(id)arg1 developerUsrPath:(id)arg2;
+ (id)defaultPaths;
+ (void)setDefaultDeveloperPathsClass:(Class)arg1;
+ (void)initializeApplicationDirectoryName:(id)arg1;
+ (id)applicationDirectoryName;
- (void).cxx_destruct;
- (id)cacheDirectoryForXcodeServerApplication;
- (id)developerPlatformsDirectory;
- (id)toolchainSearchPath;
- (id)embeddedApplicationsDirectory;
- (id)xcodeApplicationFilePath;
- (id)sharedFrameworksDirectory;
- (id)developerAppleInternalXcodeDirectory;
- (id)developerApplicationsDirectory;
- (id)userDataDirectoryForCurrentApplication;
- (id)documentationCacheDirectoryForCurrentApplication;
- (id)dataDirectoryForCurrentApplication;
- (id)cacheDirectoryWithOptions:(unsigned long long)arg1;
- (id)binSearchPathForSystem;
- (id)binSearchPathForPlatform:(id)arg1;
- (id)usrSearchPathForPlatform:(id)arg1;
- (id)sdksSearchPathForPlatform:(id)arg1;
- (id)developerInstallationInfoDirectoryForPlatform:(id)arg1;
- (id)sourceSpecificationSearchPathForPlatform:(id)arg1;
- (id)appleInternalPrivatePlugInSearchPathForPlatform:(id)arg1;
- (id)thirdPartyPlugInSearchPathForPlatform:(id)arg1;
- (id)corePlugInSearchPathForPlatform:(id)arg1;
- (id)developerPrivateFrameworksDirectoryPlatform:(id)arg1;
- (id)developerFrameworksDirectoryPlatform:(id)arg1;
- (id)developerLibraryDirectoryPlatform:(id)arg1;
- (id)developerDirectory;
- (id)searchPathForDirectory:(unsigned long long)arg1 inDomains:(unsigned long long)arg2 forPlatforms:(id)arg3 withNonPlatformPaths:(BOOL)arg4 appendingPathComponents:(id)arg5;
- (id)_pathForDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 forPlatform:(id)arg3;
- (id)_rootPathForPlatform:(id)arg1 inDomain:(unsigned long long)arg2;
- (id)_platformsPathInDomain:(unsigned long long)arg1;
- (id)_developerFolderPathInDomain:(unsigned long long)arg1 platform:(id)arg2;
- (id)_developerUsrPath;
- (id)_developerFolderPath;
- (id)init;

@end

@interface _DeviceSupportInfo : NSObject
{
    NSString *_filename;
    NSString *_platformName;
    NSString *_version;
    NSString *_train;
    NSString *_build;
}

+ (BOOL)_parseDeviceSupportURL:(id)arg1 intoPlatform:(id *)arg2 version:(id *)arg3 build:(id *)arg4;
+ (BOOL)_parseDeviceSupportURL:(id)arg1 intoPlatform:(id *)arg2;
@property(readonly, nonatomic) NSString *build; // @synthesize build=_build;
@property(readonly, nonatomic) NSString *train; // @synthesize train=_train;
@property(readonly, nonatomic) NSString *version; // @synthesize version=_version;
@property(readonly, nonatomic) NSString *platformName; // @synthesize platformName=_platformName;
@property(readonly, nonatomic) NSString *filename; // @synthesize filename=_filename;
- (void).cxx_destruct;
- (id)initWithURL:(id)arg1;

@end

@interface DVTDeviceSupportDiskStock : NSObject <DVTDiskStock>
{
    DVTPlatform *_platform;
}

+ (id)diskStockForPlatform:(id)arg1;
+ (id)_diskStockIdentifierForPlatform:(id)arg1;
- (void).cxx_destruct;
- (void)diskStockManager:(id)arg1 didCullDiskStockMembers:(id)arg2;
- (BOOL)diskStockManager:(id)arg1 willCullDiskStockMembers:(id)arg2;
@property(readonly) NSString *diskStockDisplayName;
@property(readonly) NSString *diskStockIdentifier;
@property(readonly) float diskStockLowWaterTarget;
@property(readonly) unsigned long long diskStockCapacity;
- (id)diskStockMembers;
- (id)initWithPlatform:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDeviceSupportFiles : NSObject
{
}

+ (id)exactSymbolsDirectoryForPlatform:(id)arg1 version:(id)arg2 build:(id)arg3;
+ (id)exactSymbolsDirectoryForVersion:(id)arg1 andBuild:(id)arg2;
+ (id)idealSymbolsDirectoryForPlatform:(id)arg1 version:(id)arg2 build:(id)arg3;
+ (id)idealSymbolsDirectoryForVersion:(id)arg1 andBuild:(id)arg2;
+ (id)idealDeveloperDiskImageForVersion:(id)arg1 andBuild:(id)arg2 allowFallback:(_Bool)arg3;
+ (id)exactSymbolsDirectoryForModel:(id)arg1 version:(id)arg2 build:(id)arg3;
+ (id)exactSymbolsDirectoryForPlatform:(id)arg1 preferringPlatformForModel:(id)arg2 version:(id)arg3 build:(id)arg4;
+ (id)exactSymbolsDirectoryForPlatform:(id)arg1 model:(id)arg2 version:(id)arg3 build:(id)arg4;
+ (id)_exactSymbolsDirectoryForPlatform:(id)arg1 model:(id)arg2 version:(id)arg3 build:(id)arg4;
+ (id)idealExistingSymbolsDirectoryForModel:(id)arg1 version:(id)arg2 build:(id)arg3;
+ (id)idealExistingSymbolsDirectoryForPlatform:(id)arg1 model:(id)arg2 version:(id)arg3 build:(id)arg4;
+ (id)_idealExistingSymbolsDirectoryForPlatform:(id)arg1 model:(id)arg2 version:(id)arg3 build:(id)arg4;
+ (id)_exactDeveloperDiskImageForPlatform:(id)arg1 version:(id)arg2 build:(id)arg3;
+ (id)_idealDeveloperDiskImageForPlatform:(id)arg1 version:(id)arg2 build:(id)arg3;
+ (id)idealDeveloperDiskImageForModel:(id)arg1 version:(id)arg2 build:(id)arg3;
+ (id)idealDeveloperDiskImageForPlatform:(id)arg1 model:(id)arg2 version:(id)arg3 build:(id)arg4;
+ (id)idealDeveloperDiskImageForPlatform:(id)arg1 version:(id)arg2 build:(id)arg3 allowFallback:(_Bool)arg4;

@end

@interface DVTUserNotificationCenter : NSObject <NSUserNotificationCenterDelegate>
{
    NSMutableDictionary *_handlers;
}

+ (id)defaultUserNotificationCenter;
- (void).cxx_destruct;
- (BOOL)userNotificationCenter:(id)arg1 shouldPresentNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didRemoveDeliveredNotifications:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didActivateNotification:(id)arg2;
- (void)userNotificationCenter:(id)arg1 didDeliverNotification:(id)arg2;
- (void)removeAllDeliveredNotifications;
- (void)removeDeliveredNotification:(id)arg1;
- (void)deliverNotification:(id)arg1 withEventHandler:(CDUnknownBlockType)arg2;
- (void)deliverNotification:(id)arg1;
@property(readonly) NSArray *deliveredNotifications;
- (void)removeScheduledNotification:(id)arg1;
- (void)scheduleNotification:(id)arg1 withEventHandler:(CDUnknownBlockType)arg2;
- (void)scheduleNotification:(id)arg1;
@property(copy) NSArray *scheduledNotifications;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDiagnosticsXcodeSupport : NSObject <DVTDiagnosticsClient>
{
    NSMutableDictionary *_info;
    NSFileManager *_fm;
}

@property(retain, nonatomic) NSFileManager *fm; // @synthesize fm=_fm;
@property(retain, nonatomic) NSMutableDictionary *info; // @synthesize info=_info;
- (void).cxx_destruct;
- (void)_captureCrashReporterLogs:(id)arg1;
- (void)_captureCrashLogs:(id)arg1;
- (id)_unknownPlatform;
- (id)_captureSDKInfoUsingPlatform:(id)arg1 xcodePath:(id)arg2;
- (void)_captureAllSDKInfo:(id)arg1;
- (id)_selectedXcodePath;
- (void)_captureXcodeInfo:(id)arg1;
- (void)collect:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTPlugInScanRecord : NSObject <DVTPropertyListEncoding>
{
    NSString *_path;
    NSString *_bundlePath;
    NSBundle *_bundle;
    NSString *_identifier;
    BOOL _isApplePlugIn;
    NSString *_marketingVersion;
    NSDictionary *_bundleRawInfoPlist;
    NSDictionary *_plugInPlist;
    NSSet *_requiredCapabilities;
    DVTVersion *_minimumRequiredSystemVersion;
    DVTVersion *_maximumAllowedSystemVersion;
    DVTPlugIn *_plugIn;
    NSSet *_plugInCompatibilityUUIDs;
    NSArray *_modificationDates;
}

+ (void)initialize;
@property(retain) DVTPlugIn *plugIn; // @synthesize plugIn=_plugIn;
@property(readonly, copy) NSDictionary *plugInPlist; // @synthesize plugInPlist=_plugInPlist;
@property(readonly, copy) NSSet *plugInCompatibilityUUIDs; // @synthesize plugInCompatibilityUUIDs=_plugInCompatibilityUUIDs;
@property(readonly, copy) DVTVersion *maximumAllowedSystemVersion; // @synthesize maximumAllowedSystemVersion=_maximumAllowedSystemVersion;
@property(readonly, copy) DVTVersion *minimumRequiredSystemVersion; // @synthesize minimumRequiredSystemVersion=_minimumRequiredSystemVersion;
@property(readonly, copy) NSSet *requiredCapabilities; // @synthesize requiredCapabilities=_requiredCapabilities;
@property(readonly, copy) NSDictionary *bundleRawInfoPlist; // @synthesize bundleRawInfoPlist=_bundleRawInfoPlist;
@property(readonly, copy) NSString *marketingVersion; // @synthesize marketingVersion=_marketingVersion;
@property(readonly) BOOL isApplePlugIn; // @synthesize isApplePlugIn=_isApplePlugIn;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) NSBundle *bundle; // @synthesize bundle=_bundle;
@property(readonly, copy) NSString *bundlePath; // @synthesize bundlePath=_bundlePath;
@property(readonly, copy) NSString *path; // @synthesize path=_path;
- (void).cxx_destruct;
- (BOOL)loadRequiredCapabilities:(id *)arg1;
- (BOOL)_loadBundleRawInfoPlist:(id *)arg1;
- (BOOL)loadPlugInPlist:(id *)arg1;
- (id)_contentsOfPlistAtURL:(id)arg1 error:(id *)arg2;
- (void)_instantiateBundleIfNecessary;
- (BOOL)isEquivalentToPlistRepresentation:(id)arg1;
- (void)encodeIntoPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
@property(readonly, copy) NSString *description;
- (long long)compare:(id)arg1;
- (id)initWithPath:(id)arg1 bundle:(id)arg2 plugInPlist:(id)arg3;
- (id)initWithPath:(id)arg1 bundlePath:(id)arg2 plugInPlist:(id)arg3;
- (void)recordModificationDates:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTToolsVersion : NSObject
{
    NSString *_versionName;
    NSString *_versionNameWithoutUpdate;
    unsigned long long _versionMajor;
    unsigned long long _versionMinor;
    unsigned long long _versionUpdate;
}

+ (id)versionWithMajor:(unsigned long long)arg1 minor:(unsigned long long)arg2 update:(unsigned long long)arg3;
+ (id)version9_0_0;
+ (id)version8_3_3;
+ (id)version8_3_2;
+ (id)version8_3_1;
+ (id)version8_3_0;
+ (id)version8_2_1;
+ (id)version8_2_0;
+ (id)version8_1_0;
+ (id)version8_0_0;
+ (id)version7_3_1;
+ (id)version7_3_0;
+ (id)version7_2_2;
+ (id)version7_2_1;
+ (id)version7_2_0;
+ (id)version7_1_1;
+ (id)version7_1_0;
+ (id)version7_0_1;
+ (id)version7_0_0;
+ (id)version6_4_0;
+ (id)version6_3_2;
+ (id)version6_3_1;
+ (id)version6_3_0;
+ (id)version6_2_0;
+ (id)version6_1_1;
+ (id)version6_1_0;
+ (id)version6_0_0;
+ (id)version5_1_0;
+ (id)version5_0_2;
+ (id)version5_0_1;
+ (id)version5_0_0;
+ (id)version4_7_0;
+ (id)version4_6_3;
+ (id)version4_6_2;
+ (id)version4_6_1;
+ (id)version4_6_0;
+ (id)version4_5_2;
+ (id)version4_5_1;
+ (id)version4_5_0;
+ (id)version4_4_1;
+ (id)version4_4_0;
+ (id)version4_3_3;
+ (id)version4_3_2;
+ (id)version4_3_1;
+ (id)version4_3_0;
+ (id)version4_2_5;
+ (id)version4_2_1;
+ (id)version4_2_0;
+ (id)version4_1_0;
+ (id)version4_0_2;
+ (id)version4_0_1;
+ (id)version4_0_0;
+ (id)version3_2_6;
+ (id)version3_2_5;
+ (id)version3_2_4;
+ (id)version3_2_3;
+ (id)version3_2_2;
+ (id)version3_2_1;
+ (id)version3_2_0;
+ (id)version3_1_4;
+ (id)version3_1_3;
+ (id)version3_1_2;
+ (id)version3_1_1;
+ (id)version3_1_0;
+ (id)version3_0_0;
+ (id)version2_5_0;
+ (id)versionWithString:(id)arg1;
+ (id)allKnownVersions;
+ (id)currentVersion;
- (void).cxx_destruct;
- (id)description;
- (unsigned long long)versionUpdateComponent;
- (unsigned long long)versionMinorComponent;
- (unsigned long long)versionMajorComponent;
- (id)nameWithoutUpdate;
- (id)name;
- (unsigned long long)hash;
- (long long)compare:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)init;
- (id)initWithVersionMajor:(unsigned long long)arg1 minor:(unsigned long long)arg2 update:(unsigned long long)arg3;

@end

@interface DVTInvalidExtension : DVTExtension
{
}

+ (void)initialize;
- (BOOL)hasValueForKey:(id)arg1;
- (id)valueForKey:(id)arg1;
- (id)extensionElement;
- (id)basedOnExtension;
- (id)extensionPoint;
- (id)plugIn;
- (BOOL)isValid;
- (id)bundle;
- (id)initWithIdentifier:(id)arg1;
- (void)_throwInvalidExtensionExceptionForProperty:(id)arg1;

@end

@interface DVTPinger : NSObject
{
    NSObject<OS_dispatch_source> *_source;
    unsigned short _identifier;
    int _sequenceNumber;
    double _timeout;
    NSMutableDictionary *_futures;
    DVTDispatchLock *_futuresLock;
    struct sockaddr_storage _addr;
}

+ (id)pingerWithAddress:(id)arg1;
+ (id)pingerWithSocketAddress:(const struct sockaddr *)arg1;
@property unsigned short identifier; // @synthesize identifier=_identifier;
@property int sequenceNumber; // @synthesize sequenceNumber=_sequenceNumber;
@property(retain) DVTDispatchLock *futuresLock; // @synthesize futuresLock=_futuresLock;
@property(retain) NSMutableDictionary *futures; // @synthesize futures=_futures;
@property struct sockaddr_storage addr; // @synthesize addr=_addr;
@property double timeout; // @synthesize timeout=_timeout;
- (void).cxx_destruct;
- (id)ping;
- (void)_promiseWithSequenceNumber:(unsigned long long)arg1 endedAt:(double)arg2;
- (id)_createSourceIfNecessary;
- (void)dealloc;

@end

@interface DVTGeneratedContentProvider : NSObject <DVTInvalidation>
{
}

+ (void)initialize;
+ (id)sourceFilePathForGeneratedContentURL:(id)arg1;
- (void)primitiveInvalidate;
- (void)generateContentForURL:(id)arg1 waitingBlock:(CDUnknownBlockType)arg2 completionBlock:(CDUnknownBlockType)arg3;
@property(readonly) NSString *displayName;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTDelayedInvocation : NSObject <DVTInvalidation>
{
    CDUnknownBlockType _block;
    NSRunLoop *_schedulingRunLoop;
    DVTStackBacktrace *_schedulingBacktrace;
    struct {
        unsigned int scheduledInvocation:1;
        unsigned int shouldInvokeIfNeededWhenAppTerminates:1;
        unsigned int disablesSuddenTermination:1;
        unsigned int disablesAutomaticTermination:1;
        unsigned int didDisableSuddenTermination:1;
        unsigned int didDisableAutomaticTermination:1;
        unsigned int invoking:1;
        unsigned int isInvalidated:1;
        unsigned int _reserved:1;
    } _flags;
    DVTDelayedInvocationScheduler *_scheduler;
    NSArray *_runLoopModes;
    NSString *_terminationDisablingReason;
}

+ (void)initialize;
+ (id)delayedInvocationWithTerminationDisablingReason:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
@property(copy) NSString *terminationDisablingReason; // @synthesize terminationDisablingReason=_terminationDisablingReason;
@property(copy, nonatomic) NSArray *runLoopModes; // @synthesize runLoopModes=_runLoopModes;
@property(copy, nonatomic) DVTDelayedInvocationScheduler *scheduler; // @synthesize scheduler=_scheduler;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
- (void)appWillTerminate:(id)arg1;
- (void)invoke;
- (void)cancelScheduledInvocation;
- (void)rescheduleInvocation;
- (void)scheduleInvocation;
- (void)invokeIfNeeded;
- (void)unscheduleInvocation;
- (void)runBlock:(id)arg1;
@property BOOL disablesAutomaticTermination;
@property BOOL disablesSuddenTermination;
@property BOOL shouldInvokeIfNeededWhenAppTerminates;
@property(copy, nonatomic) NSNumber *delay;
@property(copy, nonatomic) NSNumber *priority;
@property(readonly) BOOL isInvoking;
@property(readonly) BOOL hasScheduledInvocation;
- (void)setAutomaticTerminationBlocked:(BOOL)arg1;
- (void)setSuddenTerminationBlocked:(BOOL)arg1;
- (void)primitiveInvalidate;
- (id)initWithBlock:(CDUnknownBlockType)arg1;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTDelayedInvocationScheduler : NSObject
{
}

- (void)willRunBlockForDelayedInvocation:(id)arg1;
- (void)unscheduleDelayedInvocation:(id)arg1;
- (void)scheduleDelayedInvocation:(id)arg1;

@end

@interface DVTDelayedInvocationPriorityScheduler : DVTDelayedInvocationScheduler
{
    long long _priority;
}

+ (id)schedulerWithPriority:(long long)arg1;
+ (id)defaultScheduler;
@property(readonly, nonatomic) long long priority; // @synthesize priority=_priority;
- (void)unscheduleDelayedInvocation:(id)arg1;
- (void)scheduleDelayedInvocation:(id)arg1;
- (id)initWithPriority:(long long)arg1;

@end

@interface DVTDelayedInvocationDelayScheduler : DVTDelayedInvocationScheduler
{
    double _delay;
}

+ (id)schedulerWithDelay:(double)arg1;
@property(readonly, nonatomic) double delay; // @synthesize delay=_delay;
- (void)unscheduleDelayedInvocation:(id)arg1;
- (void)scheduleDelayedInvocation:(id)arg1;
- (id)initWithDelay:(double)arg1;

@end

@interface _DVTDelayedInvocationNotificationHandlerNotificationKey : NSObject <NSCopying>
{
    NSString *_notificationName;
    id _object;
}

@property(readonly, nonatomic) id object; // @synthesize object=_object;
@property(readonly, nonatomic) NSString *notificationName; // @synthesize notificationName=_notificationName;
- (void).cxx_destruct;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (BOOL)isEqualToNotificationKey:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)initWithNotificationName:(id)arg1 object:(id)arg2;

@end

@interface DVTDelayedInvocationNotificationHandler : NSObject
{
    NSMutableDictionary *_cacheKeyToSchedulersToDelayedInvocations;
    NSMutableDictionary *_cacheKeyToTokens;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (void)handleNotification:(id)arg1;
- (void)unregisterDelayedInvocation:(id)arg1 withScheduler:(id)arg2;
- (void)_unregisterAllObserversAndInvocationsForCacheKey:(id)arg1;
- (void)registerDelayedInvocation:(id)arg1 withScheduler:(id)arg2;
- (id)init;

@end

@interface DVTDelayedInvocationNotificationScheduler : DVTDelayedInvocationScheduler <NSCopying>
{
    NSString *_notificationName;
    id _object;
    long long _priority;
}

+ (id)schedulerWithNotificationName:(id)arg1 object:(id)arg2 priority:(long long)arg3;
@property(readonly, nonatomic) long long priority; // @synthesize priority=_priority;
@property(readonly, nonatomic) id object; // @synthesize object=_object;
@property(readonly, copy, nonatomic) NSString *notificationName; // @synthesize notificationName=_notificationName;
- (void).cxx_destruct;
- (void)unscheduleDelayedInvocation:(id)arg1;
- (void)scheduleDelayedInvocation:(id)arg1;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqualToScheduler:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithNotificationName:(id)arg1 object:(id)arg2 priority:(long long)arg3;

@end

@interface DVTDelayedInvocationCompoundScheduler : DVTDelayedInvocationScheduler
{
    NSArray *_schedulers;
}

@property(readonly, nonatomic) NSArray *schedulers; // @synthesize schedulers=_schedulers;
- (void).cxx_destruct;
- (void)willRunBlockForDelayedInvocation:(id)arg1;
- (void)unscheduleDelayedInvocation:(id)arg1;
- (void)scheduleDelayedInvocation:(id)arg1;
- (id)initWithSchedulers:(id)arg1;

@end

@interface DVTDelayedInvocationNew : DVTDelayedInvocation
{
}

@end

@interface DVTKVCMethodStyle : NSObject
{
    int mask;
    unsigned long long numSubexpressions;
    DVTRegularExpression *regex;
    DVTDispatchLock *regexLock;
    NSArray *patterns;
}

@property(readonly) NSArray *patterns; // @synthesize patterns;
@property(readonly) DVTDispatchLock *regexLock; // @synthesize regexLock;
@property(readonly) DVTRegularExpression *regex; // @synthesize regex;
@property(readonly) unsigned long long numSubexpressions; // @synthesize numSubexpressions;
@property(readonly) int mask; // @synthesize mask;
- (void).cxx_destruct;
- (id)initWithMask:(int)arg1 numSubexpressions:(unsigned long long)arg2 regex:(id)arg3 patterns:(id)arg4;

@end

@interface DVTMockDeveloperAccount : DVTDeveloperAccount
{
    NSString *_mockUsername;
    NSString *_mockPassword;
}

@property(copy) NSString *mockPassword; // @synthesize mockPassword=_mockPassword;
@property(copy) NSString *mockUsername; // @synthesize mockUsername=_mockUsername;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (id)password;
- (id)username;

@end

@interface DVTLogger : NSObject
{
}

+ (void)removeActiveLogger:(id)arg1;
+ (void)addActiveLogger:(id)arg1;
+ (id)activeLoggers;
+ (void)initialize;
- (void)decreaseIndentLevelForAspect:(id)arg1;
- (void)increaseIndentLevelForAspect:(id)arg1;
- (void)logMessage:(id)arg1 forAspect:(id)arg2 logLevel:(int)arg3;
- (id)stringForIndentLevel:(unsigned long long)arg1;
- (id)threadPrefixString;

@end

@interface DVTModelObject : NSObject <DVTModelObject>
{
    DVTModelObjectGraph *_objectGraph;
    id _observationInfo;
}

- (void).cxx_destruct;
@property(retain, nonatomic) DVTModelObjectGraph *objectGraph;
- (void)setObservationInfo:(id)arg1;
- (id)observationInfo;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTInvalidationAssertionBehaviorOverride : NSObject
{
    id _object;
    SEL _selector;
    unsigned long long _behavior;
}

@property unsigned long long behavior; // @synthesize behavior=_behavior;
@property SEL selector; // @synthesize selector=_selector;
@property id object; // @synthesize object=_object;

@end

@interface DVTAppExtensionInstallPromiseManager : NSObject <DVTDTApplicationWorkspaceClient>
{
    NSMapTable *_promiseMap;
    DVTDispatchLock *_promiseMapLock;
    DVTPerformanceMetric *_extensionLoggingMetric;
}

+ (id)sharedManager;
- (void).cxx_destruct;
- (void)applicationUninstalled:(id)arg1;
- (void)applicationInstalled:(id)arg1;
- (void)listenForIDs:(id)arg1 promise:(id)arg2 channel:(id)arg3;
- (id)_initInternal;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTExtension : NSObject <DVTPropertyListEncoding>
{
    NSMutableDictionary *_extensionData;
    DVTPlugInManager *_plugInManager;
    NSString *_identifier;
    NSString *_version;
    NSString *_name;
    DVTPlugIn *_plugIn;
    DVTExtensionPoint *_extensionPoint;
    DVTExtension *_basedOnExtension;
    NSXMLElement *_extensionElement;
    DVTDispatchLock *_faultFiringLock;
    struct {
        unsigned int reserved:60;
        unsigned int _adjustedExtensionData:1;
        unsigned int _checkedExtensionXML:1;
        unsigned int _faultingState:2;
    } _flags;
}

+ (void)initialize;
@property(readonly) DVTExtension *basedOnExtension; // @synthesize basedOnExtension=_basedOnExtension;
@property(readonly) DVTExtensionPoint *extensionPoint; // @synthesize extensionPoint=_extensionPoint;
@property(readonly) DVTPlugIn *plugIn; // @synthesize plugIn=_plugIn;
@property(readonly) NSDictionary *extensionData; // @synthesize extensionData=_extensionData;
@property(readonly) DVTPlugInManager *plugInManager; // @synthesize plugInManager=_plugInManager;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
@property(readonly, copy) NSString *version; // @synthesize version=_version;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)_localizedStringForString:(id)arg1;
- (BOOL)_fireExtensionFault:(id *)arg1;
- (void)_adjustClassReferencesInParameterData:(id)arg1 usingSchema:(id)arg2;
- (void)_adjustElementClassAttributes:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (void)_adjustClassAttribute:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (BOOL)_adjustElement:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (BOOL)_adjustAttribute:(id)arg1 forKey:(id)arg2 inParameterData:(id)arg3;
- (BOOL)_adjustParameterData:(id)arg1 usingSchema:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (BOOL)hasValueForKey:(id)arg1;
- (BOOL)_hasValueForKey:(id)arg1 inParameterData:(id)arg2 usingSchema:(id)arg3;
- (id)valueForKey:(id)arg1 error:(id *)arg2;
- (id)valueForKey:(id)arg1;
- (id)_valueForKey:(id)arg1 inParameterData:(id)arg2 usingSchema:(id)arg3 error:(id *)arg4;
@property(readonly, copy) NSXMLElement *extensionElement;
@property(readonly, getter=isValid) BOOL valid;
@property(readonly) NSBundle *bundle;
@property(readonly, copy) NSString *description;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeFromPropertyList;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithExtensionData:(id)arg1 plugIn:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTSigningCertificate : NSObject
{
    NSNumber *_isTrusted;
    SFCertificateData *_certificateData;
    NSNumber *_isValidForCodeSigning;
    DVTLogAspect *_logAspect;
    NSString *_certificateKind;
    NSString *_trimmedName;
    NSString *_commonName;
    NSString *_portalTeamID;
    NSString *_portalTeamName;
    NSString *_portalMemberID;
    NSString *_portalTeamMemberID;
    NSDate *_issueDate;
    NSDate *_expirationDate;
    NSString *_sha1Hash;
    NSString *_serialNumber;
    id _underlyingType;
    NSArray *_keychainSearchList;
}

+ (id)serialNumberForCerificate:(struct OpaqueSecCertificateRef *)arg1;
@property(readonly) NSArray *keychainSearchList; // @synthesize keychainSearchList=_keychainSearchList;
@property(readonly) id underlyingType; // @synthesize underlyingType=_underlyingType;
@property(readonly) DVTLogAspect *logAspect; // @synthesize logAspect=_logAspect;
- (void).cxx_destruct;
- (BOOL)deleteFromKeychain:(id *)arg1;
- (id)p12DataWithPassword:(id)arg1 error:(id *)arg2;
- (id)_valueInSubjectNameSectionFromCertificate:(struct OpaqueSecCertificateRef *)arg1 forOID:(id)arg2;
- (id)_dateFromCertificate:(struct OpaqueSecCertificateRef *)arg1 forOID:(id)arg2;
- (id)certificateData;
- (id)defaultDesignatedRequirementsForIdentifier:(id)arg1;
- (id)defaultDesignatedRequirements;
@property(readonly) NSString *serialNumber; // @synthesize serialNumber=_serialNumber;
@property(readonly) NSString *sha1Hash; // @synthesize sha1Hash=_sha1Hash;
@property(readonly, getter=isForServer) BOOL forServer;
@property(readonly, getter=isTrusted) BOOL trusted;
@property(readonly, getter=isExpired) BOOL expired;
@property(readonly) NSDate *expirationDate; // @synthesize expirationDate=_expirationDate;
@property(readonly) NSDate *issueDate; // @synthesize issueDate=_issueDate;
- (BOOL)isValidForCodeSigning;
- (BOOL)isIdentityOnKeychains:(id)arg1;
@property(readonly, getter=isIdentity) BOOL identity;
@property(readonly) NSString *portalMemberID; // @synthesize portalMemberID=_portalMemberID;
@property(readonly) NSString *portalTeamName; // @synthesize portalTeamName=_portalTeamName;
@property(readonly) NSString *portalTeamID; // @synthesize portalTeamID=_portalTeamID;
- (BOOL)isFromPortal;
@property(readonly) NSString *portalTeamMemberID; // @synthesize portalTeamMemberID=_portalTeamMemberID;
@property(readonly) NSString *commonName; // @synthesize commonName=_commonName;
@property(readonly) NSString *trimmedName; // @synthesize trimmedName=_trimmedName;
@property(readonly) NSString *certificateKind; // @synthesize certificateKind=_certificateKind;
- (long long)compare:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (struct OpaqueSecCertificateRef *)certificateRef;
- (id)description;
- (id)initWithUnderlyingType:(id)arg1 logAspect:(id)arg2;
- (id)initWithUnderlyingType:(id)arg1 keychainSearchList:(id)arg2 logAspect:(id)arg3;

@end

@interface DVTObjCPlusPlusSourceModelParser : DVTObjCSourceModelParser
{
}

+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (void)initializeLexerModes;
+ (id)languageSpecification;
- (void)_resetLexerWithInputString:(id)arg1;
- (id)init;

@end

@interface DVTModelTreeNode : NSObject <DVTModelObject, DVTInvalidation>
{
    DVTModelTree *_tree;
    DVTModelTreeNode *_parentNode;
    NSMutableArray *_childNodes;
}

+ (BOOL)automaticallyNotifiesObserversOfSubclass_mutableChildNodes;
+ (BOOL)automaticallyNotifiesObserversOfSubclass_childNodes;
+ (BOOL)automaticallyNotifiesObserversOfSubclass_parentNode;
+ (BOOL)automaticallyNotifiesObserversOfSubclass_tree;
+ (void)synthesizeCoverAPIWithKeyForTree:(id)arg1 keyForParentNode:(id)arg2 keyForChildNodes:(id)arg3;
+ (BOOL)automaticallyNotifiesObserversOfObjectGraph;
+ (void)initialize;
@property(readonly) DVTModelTreeNode *subclass_parentNode; // @synthesize subclass_parentNode=_parentNode;
@property(readonly) DVTModelTree *subclass_tree; // @synthesize subclass_tree=_tree;
- (void).cxx_destruct;
- (void)removeSubclass_childNodesAtIndexes:(id)arg1;
- (void)insertSubclass_childNodes:(id)arg1 atIndexes:(id)arg2;
- (id)subclass_childNodesAtIndexes:(id)arg1;
- (id)objectInSubclass_childNodesAtIndex:(unsigned long long)arg1;
- (unsigned long long)countOfSubclass_childNodes;
@property(readonly) NSMutableArray *subclass_mutableChildNodes;
@property(copy) NSArray *subclass_childNodes;
- (void)_setSubclass_parentNode:(id)arg1;
- (void)_setSubclass_tree:(id)arg1;
@property(readonly, nonatomic) DVTModelObjectGraph *objectGraph;
- (void)primitiveInvalidate;
- (id)init;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTMixIn : NSObject
{
}

+ (void)mixInExtendClass:(Class)arg1;

@end

@interface DVTInvalidationMixIn : DVTMixIn <DVTInvalidation>
{
}

+ (void)mixInExtendClass:(Class)arg1 deallocAssertionBehavior:(unsigned long long)arg2;
+ (BOOL)supportsInvalidationPrevention;
+ (unsigned long long)assertionBehaviorForKeyValueObservationsAtEndOfEvent;
+ (unsigned long long)assertionBehaviorAfterEndOfEventForSelector:(SEL)arg1;
+ (BOOL)__classIsDVTInvalidation;
- (void)DVTInvalidationMixIn_SoftAssertDidInvalidateDealloc;
- (void)DVTInvalidationMixIn_HardAssertDidInvalidateDealloc;
- (void)DVTInvalidationMixIn_DeZombifyDealloc;
- (void)invalidate;
- (void)primitiveInvalidate;
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (BOOL)__isDVTInvalidation;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTInvalidationMixIn_MultipleInvalidateSoftAssertion : DVTInvalidationMixIn
{
}

+ (unsigned long long)assertionBehaviorAfterEndOfEventForSelector:(SEL)arg1;
- (void)invalidate;

@end

@interface DVTInvalidationMixIn_NoMultipleInvalidateAssertion : DVTInvalidationMixIn
{
}

+ (unsigned long long)assertionBehaviorAfterEndOfEventForSelector:(SEL)arg1;
- (void)invalidate;

@end

@interface DVTInvalidation_NSObject : NSObject <DVTInvalidation>
{
}

+ (void)initialize;
- (void)primitiveInvalidate;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTLocalComputer : DVTAbstractMacDevice
{
    NSSet *_provisioningProfiles;
    NSMutableDictionary *_pidToXPCServiceConnectionDict;
    NSString *_nameForDeveloperPortal;
    DVTObservingToken *_nameObservingToken;
    NSString *_cpuKind;
    unsigned long long _cpuCount;
    unsigned long long _cpuSpeedInMHz;
    unsigned long long _busSpeedInMHz;
    unsigned long long _ramSizeInMegabytes;
    unsigned long long _physicalCPUCoresPerPackage;
    unsigned long long _logicalCPUCoresPerPackage;
}

+ (id)provisioningManager;
+ (void)initialize;
@property unsigned long long logicalCPUCoresPerPackage; // @synthesize logicalCPUCoresPerPackage=_logicalCPUCoresPerPackage;
@property unsigned long long physicalCPUCoresPerPackage; // @synthesize physicalCPUCoresPerPackage=_physicalCPUCoresPerPackage;
@property unsigned long long ramSizeInMegabytes; // @synthesize ramSizeInMegabytes=_ramSizeInMegabytes;
@property unsigned long long busSpeedInMHz; // @synthesize busSpeedInMHz=_busSpeedInMHz;
@property unsigned long long cpuSpeedInMHz; // @synthesize cpuSpeedInMHz=_cpuSpeedInMHz;
@property unsigned long long cpuCount; // @synthesize cpuCount=_cpuCount;
@property(copy) NSString *cpuKind; // @synthesize cpuKind=_cpuKind;
- (void).cxx_destruct;
- (id)primaryInstrumentsServer;
- (id)listenForInstallOfAppExtensionIdentifiers:(id)arg1 onPairedDevice:(BOOL)arg2;
- (void)stopDebuggingXPCServices:(id)arg1 forPairedDevice:(BOOL)arg2;
- (void)debugXPCServices:(id)arg1 onPairedDevice:(BOOL)arg2 completionSemaphore:(id)arg3;
- (void)_enableExtension:(id)arg1;
- (void)attachToServiceName:(id)arg1 pid:(int)arg2 parentPID:(int)arg3 stdoutFH:(id)arg4 stderrFH:(id)arg5;
- (id)_xpcDebugConnectionForPid:(id)arg1 create:(BOOL)arg2;
- (id)_keyForPid:(int)arg1;
- (void)downloadOptimizationProfilesFromBundleIdentifier:(id)arg1 orPaths:(id)arg2 toFilePath:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (BOOL)supportsLocationSimulation;
- (void)uninstallProvisioningProfile:(id)arg1;
- (BOOL)installProvisioningProfileAtURL:(id)arg1 error:(id *)arg2;
- (void)installProvisioningProfile:(id)arg1;
- (void)profilesDidChange:(id)arg1;
- (id)provisioningProfiles;
- (id)nameForDeveloperPortal;
- (BOOL)supportsProvisioning;
- (BOOL)supportsArchiving;
- (BOOL)supportsDebuggingForAskOnLaunch;
- (unsigned long long)supportedLaunchOptions;
- (BOOL)canRunMultipleInstancesPerApp;
- (BOOL)supportsDebugAsDifferentUser;
- (BOOL)supportsDebuggingDocumentVersioning;
- (BOOL)supportsResumeAndTurningItOnOrOff;
- (BOOL)supportsCustomWorkingDirectory;
- (id)processInformations;
- (id)processorDescription;
- (BOOL)isConcreteDevice;
- (BOOL)isGenericDevice;
- (BOOL)isIgnored;
- (void)setIgnored:(BOOL)arg1;
- (BOOL)isAvailable;
- (void)setAvailable:(BOOL)arg1;
- (void)dealloc;
- (id)init;

@end

@interface DVTScannerRule : NSObject
{
    long long _token;
    NSSet *_tokenSet;
    BOOL _optional;
    BOOL _allowMultiple;
    DVTSourceScanner *_scanner;
}

@property(readonly) DVTSourceScanner *scanner; // @synthesize scanner=_scanner;
@property(readonly) BOOL allowMultiple; // @synthesize allowMultiple=_allowMultiple;
@property(readonly) BOOL optional; // @synthesize optional=_optional;
- (void).cxx_destruct;
- (BOOL)matchesToken:(long long)arg1;
- (id)initWithString:(id)arg1;

@end

@interface DVTRuleScanner : DVTSourceScanner
{
    NSMutableArray *_rules;
    unsigned short _startChar;
    unsigned int _isVolatile:1;
}

- (void).cxx_destruct;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (long long)nextToken:(id)arg1 withItemArray:(id)arg2 inTree:(id)arg3 withContext:(id)arg4 initialToken:(long long)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTLineOffsetAwareStringWrapper : NSObject <NSSecureCoding>
{
    struct _DVTTextLineOffsetTable _lineOffsets;
    NSString *_string;
}

+ (BOOL)supportsSecureCoding;
@property(readonly, copy) NSString *string; // @synthesize string=_string;
- (void).cxx_destruct;
- (id)debugDescription;
- (void)dealloc;
- (struct _NSRange)characterRangeFromDocumentLocation:(id)arg1;
- (id)convertLocationToUTF8EncodedLocation:(id)arg1;
- (id)convertLocationToNativeNSStringEncodedLocation:(id)arg1;
- (struct _NSRange)lineRangeForCharacterRange:(struct _NSRange)arg1;
- (struct _NSRange)characterRangeForLineRange:(struct _NSRange)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithString:(id)arg1;

@end

@interface DVTDownloadableManagerIOCache : NSObject
{
    DVTDispatchLock *_lock;
    NSFileManager *_fileManager;
    NSMutableDictionary *_fileExistsCache;
    NSMutableDictionary *_shasumCache;
    NSMutableDictionary *_packageVersionCache;
}

+ (id)sharedCache;
- (void).cxx_destruct;
- (id)packageVersionOfIdentifer:(id)arg1 atInstallPrefix:(id)arg2;
- (id)shasumOfFileAtPath:(id)arg1;
- (BOOL)fileExistsAtPath:(id)arg1;
- (id)_objectForKey:(id)arg1 fromCache:(id)arg2 orCreate:(CDUnknownBlockType)arg3;
- (void)clear;
- (id)init;

@end

@interface DVTDownloadableManager : NSObject <DVTInvalidation>
{
    DVTDispatchLock *_lock;
    DVTDelayedInvocation *_updateDownloadables;
    NSMutableSet *_downloadables;
    NSMutableSet *_downloadedDownloadables;
    NSMutableDictionary *_downloadablesByIdentifier;
    NSOperationQueue *_downloadQueue;
    NSMutableSet *_operations;
    DVTMacroDefinitionTable *_macroDefinitionTable;
    DVTMacroExpansionScope *_macroExpansionScope;
    NSMutableDictionary *_predicateSubstitutionVariables;
    BOOL _automaticUpdate;
    NSURL *_cacheURL;
    NSDate *_doNotPromptAboutUpdatesUntilDate;
}

+ (void)deferActivity:(id)arg1 untilDate:(id)arg2 gracePeriod:(double)arg3 allowBattery:(BOOL)arg4 block:(CDUnknownBlockType)arg5;
+ (void)initialize;
+ (id)defaultDownloadableManager;
@property(retain) NSDate *doNotPromptAboutUpdatesUntilDate; // @synthesize doNotPromptAboutUpdatesUntilDate=_doNotPromptAboutUpdatesUntilDate;
@property BOOL automaticUpdate; // @synthesize automaticUpdate=_automaticUpdate;
@property(copy) NSURL *cacheURL; // @synthesize cacheURL=_cacheURL;
- (void).cxx_destruct;
- (void)setValue:(id)arg1 forMacroName:(id)arg2;
- (void)updateOutdatedDownloadables:(id)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (id)download:(id)arg1 authorization:(struct AuthorizationOpaqueRef *)arg2 error:(id *)arg3;
- (id)operationForDownload:(id)arg1 authorization:(struct AuthorizationOpaqueRef *)arg2 error:(id *)arg3;
- (id)operationForDownload:(id)arg1 authorization:(struct AuthorizationOpaqueRef *)arg2 shouldAuthorizeIfNeeded:(BOOL)arg3 error:(id *)arg4;
- (void)addOperation:(id)arg1;
@property(readonly) NSSet *operations;
- (id)_candidatesForDependency:(id)arg1;
- (void)_triggerAutomaticUpdateCheck;
- (id)outdatedDownloadables;
- (BOOL)hasDownloadedDownloadableOrNewer:(id)arg1;
- (BOOL)isDownloadedDownloadable:(id)arg1;
- (BOOL)_isDownloadedDownloadable:(id)arg1;
- (BOOL)deleteFromCache:(id)arg1 error:(id *)arg2;
- (BOOL)isCachedDownloadable:(id)arg1;
- (id)cacheURLForDownloadable:(id)arg1;
- (id)downloadableForIdentifier:(id)arg1 version:(id)arg2;
- (id)_downloadableForIdentifier:(id)arg1 version:(id)arg2;
- (id)downloadablesForIdentifier:(id)arg1;
- (id)_downloadablesForIdentifier:(id)arg1;
- (void)_willInstallDownloadable:(id)arg1;
@property(readonly) NSSet *downloadedDownloadables;
@property(readonly) NSSet *downloadables;
- (void)rebuildDownloadables;
- (BOOL)refreshWithError:(id *)arg1;
@property(readonly) id <DVTDownloadableInstallationHelper> installationHelper;
- (void)_lockedSetMutation:(id)arg1 key:(id)arg2 kind:(unsigned long long)arg3 change:(id)arg4;
- (void)_withWillDidChangeSetMutationNotifications:(id)arg1 kind:(unsigned long long)arg2 change:(id)arg3 withBlock:(CDUnknownBlockType)arg4;
- (id)_performLockedReturningBlock:(CDUnknownBlockType)arg1;
- (id)_downloadableFilters;
- (void)primitiveInvalidate;
- (id)init;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTDeveloperPortalDatabase : NSObject
{
}

+ (id)createProvisioningProfileOperationForToken:(id)arg1 withName:(id)arg2 appID:(id)arg3 devices:(id)arg4 certificates:(id)arg5 platform:(id)arg6 andTeam:(id)arg7;
+ (id)renewProvisioningProfileOperationForToken:(id)arg1 andProvisioningProfile:(id)arg2;
+ (void)renewProvisioningProfile:(id)arg1 withCallback:(CDUnknownBlockType)arg2;
+ (void)createProvisioningProfileNamed:(id)arg1 withAppID:(id)arg2 devices:(id)arg3 certificates:(id)arg4 andPlatform:(id)arg5 toTeam:(id)arg6 withCallback:(CDUnknownBlockType)arg7;
+ (id)fetchDistributionProfileOperationForToken:(id)arg1 andPlatform:(id)arg2 andSubPlatform:(id)arg3 forBundleIdentifier:(id)arg4 withFeatures:(id)arg5 includeDevices:(BOOL)arg6;
+ (id)fetchTeamDistributionProfileOperationForToken:(id)arg1 andPlatform:(id)arg2 andSubPlatform:(id)arg3 forBundleIdentifier:(id)arg4 withFeatures:(id)arg5;
+ (id)fetchTeamProfileOperationForToken:(id)arg1 andPlatform:(id)arg2 andSubPlatform:(id)arg3 forBundleIdentifier:(id)arg4 withFeatures:(id)arg5;
+ (id)_fetchTeamDistributionProfileOperationForSingleTeamToken:(id)arg1 andPlatform:(id)arg2 andSubPlatform:(id)arg3 forBundleIdentifier:(id)arg4 withFeatures:(id)arg5 includeDevices:(BOOL)arg6;
+ (id)_fetchTeamProfileOperationForSingleTeamToken:(id)arg1 andPlatform:(id)arg2 andSubPlatform:(id)arg3 forBundleIdentifier:(id)arg4 withFeatures:(id)arg5;
+ (id)_fetchOrCreateAppIDForSingleTeamToken:(id)arg1 andPlatform:(id)arg2 forBundleIdentifier:(id)arg3 withFeatures:(id)arg4;
+ (id)fetchOrCreateAppIDOperationForSingleTeamToken:(id)arg1 andPlatform:(id)arg2 forBundleIdentifier:(id)arg3 withFeatures:(id)arg4;
+ (id)_updateAppIdId:(id)arg1 appIdName:(id)arg2 token:(id)arg3 andPlatform:(id)arg4 withFeatures:(id)arg5;
+ (id)_updatePortalIdentifiers:(id)arg1 appIdId:(id)arg2 token:(id)arg3 andPlatform:(id)arg4 listTeamItemsOpClass:(Class)arg5 teamItemsKeyPath:(id)arg6 itemIdentifierKeyPath:(id)arg7 itemPortalIdentifierKeyPath:(id)arg8 addTeamItemsOpClass:(Class)arg9 addAppItemsOpClass:(Class)arg10;
+ (id)addDeviceOperationForToken:(id)arg1 withUUID:(id)arg2 name:(id)arg3 portalDeviceClass:(id)arg4 andPlatform:(id)arg5;
+ (id)downloadProfilesOperationForToken:(id)arg1;
+ (id)downloadCertificatesOperationForToken:(id)arg1 developmentCertificatesOnly:(BOOL)arg2 restrictToPlatform:(id)arg3;
+ (id)lightweightSyncOperationForToken:(id)arg1;
+ (id)developersAndTeamsSyncOperation;
+ (void)_refreshFromToken:(id)arg1 andTeamListResponse:(id)arg2;
+ (void)_refreshFromToken:(id)arg1 andServiceResponses:(id)arg2 logAspect:(id)arg3;
+ (void)_purgeOrphanedEntitiesInContext:(id)arg1 withLogAspect:(id)arg2;
+ (_Bool)_purgeOrphanedEntitiesOfType:(id)arg1 inContext:(id)arg2 withLogAspect:(id)arg3;
+ (void)_refreshFromServiceResponse:(id)arg1 signingCertificateManager:(id)arg2 provisioningProfileManager:(id)arg3 logAspect:(id)arg4;
+ (id)provisioningProfileForDTDKProvisioningProfile:(id)arg1 inContext:(id)arg2;
+ (id)provisioningProfileForDVTProvisioningProfile:(id)arg1 inContext:(id)arg2;
+ (id)teamNameForProfile:(id)arg1 inContext:(id)arg2;
+ (id)teamForProfile:(id)arg1 inContext:(id)arg2;
+ (id)provisioningProfileFromPortalResponse:(id)arg1 logAspect:(id)arg2;
+ (id)provisioningProfilesFromPortalResponses:(id)arg1 logAspect:(id)arg2;
+ (id)provisioningProfileForUUID:(id)arg1 inContext:(id)arg2;
+ (id)provisioningProfileForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)provisioningProfilesInContext:(id)arg1;
+ (id)provisioningProfileMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)provisioningProfilesMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)deviceFromPortalResponse:(id)arg1 updateIfFound:(_Bool)arg2;
+ (id)devicesFromPortalResponses:(id)arg1 updateIfFound:(_Bool)arg2;
+ (id)deviceForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)devicesForUUID:(id)arg1 inContext:(id)arg2;
+ (id)devicesInContext:(id)arg1;
+ (id)deviceMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)devicesMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)omcIdentifierFromPortalResponse:(id)arg1;
+ (id)omcIdentifiersFromPortalResponses:(id)arg1;
+ (id)omcIdentifierForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)omcIdentifierMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)omcIdentifiersMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)applicationGroupFromPortalResponse:(id)arg1;
+ (id)applicationGroupsFromPortalResponses:(id)arg1;
+ (id)applicationGroupForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)applicationGroupsInContext:(id)arg1;
+ (id)applicationGroupMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)applicationGroupsMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)cloudContainerFromPortalResponse:(id)arg1;
+ (id)cloudContainersFromPortalResponses:(id)arg1;
+ (id)cloudContainerForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)cloudContainersInContext:(id)arg1;
+ (id)cloudContainerMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)cloudContainersMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)shoeboxIDFromPortalResponse:(id)arg1;
+ (id)shoeboxIDsFromPortalResponses:(id)arg1;
+ (id)shoeboxIDForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)shoeboxIDsInContext:(id)arg1;
+ (id)shoeboxIDMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)shoeboxIDsMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)wildcardAppIDForTeam:(id)arg1 andPlatform:(id)arg2;
+ (id)appIdsForTeam:(id)arg1 andPlatform:(id)arg2 forBundleIdentifier:(id)arg3 withFeatures:(id)arg4;
+ (id)appIdsForTeam:(id)arg1 andPlatform:(id)arg2 forBundleIdentifier:(id)arg3 allowWildcards:(_Bool)arg4;
+ (id)appIdsForTeam:(id)arg1 andPlatform:(id)arg2 forBundleIdentifier:(id)arg3;
+ (id)appIDFromPortalResponse:(id)arg1;
+ (id)appIDsFromPortalResponses:(id)arg1;
+ (id)appIDForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)appIDsInContext:(id)arg1;
+ (id)appIDMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)appIDsMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)roleForTeam:(id)arg1 developer:(id)arg2 role:(id)arg3;
+ (id)roleMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (void)refreshAllTeamsFromPortal;
+ (id)_listTeamsOperationForToken:(id)arg1;
+ (id)teamNameForID:(id)arg1 inContext:(id)arg2;
+ (id)teamFromPortalResponse:(id)arg1;
+ (id)teamForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)teamsInContext:(id)arg1;
+ (id)teamMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)teamsMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)developerFromPortalResponse:(id)arg1;
+ (id)developerForPortalId:(id)arg1 inContext:(id)arg2;
+ (id)developerForPersonId:(id)arg1 inContext:(id)arg2;
+ (id)developerForAccount:(id)arg1 inContext:(id)arg2;
+ (id)developersInContext:(id)arg1;
+ (id)developerMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)developersMatchingPredicate:(id)arg1 inContext:(id)arg2;
+ (id)objectWithEntityName:(id)arg1 matchingPredicate:(id)arg2 inContext:(id)arg3;
+ (id)objectsWithEntityName:(id)arg1 matchingPredicate:(id)arg2 inContext:(id)arg3;
+ (id)conditionalMoc;
+ (id)temporaryMoc;
+ (id)mainThreadMoc;
+ (id)moc;
+ (id)mocWithLogAspect:(id)arg1;

@end

@interface DVTDeveloperRecord : NSManagedObject
{
}

- (_Bool)hasRoleOnTeam:(id)arg1 forPlatform:(id)arg2;
- (_Bool)isAdminOrAgentOfTeam:(id)arg1;
- (_Bool)isMemberOfTeam:(id)arg1;
@property(readonly, nonatomic) _Bool isAgent;
@property(readonly, nonatomic) _Bool isMacTeamMember;
@property(readonly, nonatomic) _Bool isMacAdmin;
@property(readonly, nonatomic) _Bool isIOSTeamMember;
@property(readonly, nonatomic) _Bool isIOSAdmin;
- (void)replaceRolesForTeam:(id)arg1 withRoles:(id)arg2;
@property(readonly, nonatomic) DVTDeveloperAccount *account;

// Remaining properties
@property(retain, nonatomic) NSString *developerId; // @dynamic developerId;
@property(retain, nonatomic) NSString *developerStatus; // @dynamic developerStatus;
@property(retain, nonatomic) NSString *email; // @dynamic email;
@property(retain, nonatomic) NSString *firstName; // @dynamic firstName;
@property(retain, nonatomic) NSSet *iosTeams; // @dynamic iosTeams;
@property(retain, nonatomic) NSString *lastName; // @dynamic lastName;
@property(retain, nonatomic) NSSet *macTeams; // @dynamic macTeams;
@property(retain, nonatomic) NSNumber *personId; // @dynamic personId;
@property(retain, nonatomic) NSSet *roles; // @dynamic roles;
@property(retain, nonatomic) NSSet *teams; // @dynamic teams;
@property(retain, nonatomic) NSString *username; // @dynamic username;

@end

@interface DVTTeamRecord : NSManagedObject
{
}

+ (id)keyPathsForValuesAffectingDisplayName;
- (id)rolesForDeveloper:(id)arg1;
- (void)pruneInstalledProvisioningProfiles;
@property(readonly, nonatomic) NSString *displayName;

// Remaining properties
@property(retain, nonatomic) NSSet *appIDs; // @dynamic appIDs;
@property(retain, nonatomic) NSSet *applicationGroups; // @dynamic applicationGroups;
@property(retain, nonatomic) NSSet *certificates; // @dynamic certificates;
@property(retain, nonatomic) NSSet *cloudContainers; // @dynamic cloudContainers;
@property(retain, nonatomic) NSSet *developers; // @dynamic developers;
@property(retain, nonatomic) NSSet *devices; // @dynamic devices;
@property(nonatomic) BOOL enhancedDevelopmentForMembers; // @dynamic enhancedDevelopmentForMembers;
@property(retain, nonatomic) NSSet *iosDevelopers; // @dynamic iosDevelopers;
@property(nonatomic) BOOL isFreeProvisioningTeam; // @dynamic isFreeProvisioningTeam;
@property(retain, nonatomic) NSSet *macDevelopers; // @dynamic macDevelopers;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSSet *omcIdentifiers; // @dynamic omcIdentifiers;
@property(retain, nonatomic) NSSet *provisioningProfiles; // @dynamic provisioningProfiles;
@property(retain, nonatomic) NSSet *roles; // @dynamic roles;
@property(retain, nonatomic) NSSet *shoeboxIDs; // @dynamic shoeboxIDs;
@property(retain, nonatomic) NSString *status; // @dynamic status;
@property(retain, nonatomic) NSString *teamId; // @dynamic teamId;
@property(retain, nonatomic) NSString *type; // @dynamic type;

@end

@interface DVTRoleRecord : NSManagedObject
{
}

+ (id)keyPathsForValuesAffectingLevel;
@property(readonly, nonatomic) long long level;

// Remaining properties
@property(retain, nonatomic) DVTDeveloperRecord *developer; // @dynamic developer;
@property(retain, nonatomic) NSString *role; // @dynamic role;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;

@end

@interface DVTAppIDRecord : NSManagedObject
{
}

+ (id)keyPathsForValuesAffectingIsWildcard;
+ (id)keyPathsForValuesAffectingDisplayIdentifier;
+ (id)keyPathsForValuesAffectingFeatures;
+ (id)featureKeys;
@property(readonly, nonatomic) _Bool isWildcard;
@property(readonly, nonatomic) NSString *displayIdentifier;
- (void)setFeatures:(id)arg1;
- (id)features;

// Remaining properties
@property(retain, nonatomic) NSString *appIdId; // @dynamic appIdId;
@property(retain, nonatomic) NSString *appIdPlatform; // @dynamic appIdPlatform;
@property(nonatomic) BOOL applicationGroups; // @dynamic applicationGroups;
@property(nonatomic) BOOL associatedDomains; // @dynamic associatedDomains;
@property(retain, nonatomic) NSSet *cloudContainers; // @dynamic cloudContainers;
@property(retain, nonatomic) NSString *dataProtection; // @dynamic dataProtection;
@property(nonatomic) BOOL featureHK421J6T7P; // @dynamic featureHK421J6T7P;
@property(nonatomic) BOOL gameCenter; // @dynamic gameCenter;
@property(nonatomic) BOOL homeKit; // @dynamic homeKit;
@property(nonatomic) BOOL iCloud; // @dynamic iCloud;
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(nonatomic) BOOL inAppPurchase; // @dynamic inAppPurchase;
@property(nonatomic) BOOL interAppAudio; // @dynamic interAppAudio;
@property(nonatomic) BOOL maps; // @dynamic maps;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(nonatomic) BOOL omc; // @dynamic omc;
@property(nonatomic) BOOL passbook; // @dynamic passbook;
@property(retain, nonatomic) NSString *prefix; // @dynamic prefix;
@property(retain, nonatomic) NSSet *provisioningProfiles; // @dynamic provisioningProfiles;
@property(nonatomic) BOOL push; // @dynamic push;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;
@property(nonatomic) BOOL vpnLite; // @dynamic vpnLite;
@property(nonatomic) BOOL wac; // @dynamic wac;

@end

@interface DVTDeviceRecord : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSString *deviceId; // @dynamic deviceId;
@property(retain, nonatomic) NSString *deviceNumber; // @dynamic deviceNumber;
@property(retain, nonatomic) NSString *devicePlatform; // @dynamic devicePlatform;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;
@end

@interface DVTProvisioningProfileRecord : NSManagedObject
{
}

- (BOOL)isActive;

// Remaining properties
@property(retain, nonatomic) NSString *appIdId; // @dynamic appIdId;
@property(retain, nonatomic) NSDate *dateExpire; // @dynamic dateExpire;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSString *proProPlatform; // @dynamic proProPlatform;
@property(retain, nonatomic) NSData *profileData; // @dynamic profileData;
@property(retain, nonatomic) NSString *provisioningProfileId; // @dynamic provisioningProfileId;
@property(retain, nonatomic) NSString *status; // @dynamic status;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;
@property(retain, nonatomic) NSString *type; // @dynamic type;
@property(retain, nonatomic) NSString *uuid; // @dynamic uuid;
@property(retain, nonatomic) NSString *version; // @dynamic version;

@end

@interface DVTShoeboxIDRecord : NSManagedObject
{
}


// Remaining properties
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSString *shoeboxId; // @dynamic shoeboxId;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;
@end

@interface DVTCloudContainerRecord : NSManagedObject
{
}

+ (id)coreDataEntityName;

// Remaining properties
@property(retain, nonatomic) NSString *cloudContainer; // @dynamic cloudContainer;
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;

@end

@interface DVTApplicationGroupRecord : NSManagedObject
{
}

+ (id)coreDataEntityName;

// Remaining properties
@property(retain, nonatomic) NSString *applicationGroup; // @dynamic applicationGroup;
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;

@end

@interface DVTOMCRecord : NSManagedObject
{
}

+ (id)coreDataEntityName;

// Remaining properties
@property(retain, nonatomic) NSString *identifier; // @dynamic identifier;
@property(retain, nonatomic) NSString *name; // @dynamic name;
@property(retain, nonatomic) NSString *omcId; // @dynamic omcId;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;

@end

@interface DVTCertificateRecord : NSManagedObject
{
    NSString *_kind;
    NSString *_name;
}

- (void).cxx_destruct;
@property(readonly, nonatomic) unsigned long long type;
- (id)kind;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;

// Remaining properties
@property(retain, nonatomic) NSData *certContent; // @dynamic certContent;
@property(retain, nonatomic) NSString *certificateId; // @dynamic certificateId;
@property(retain, nonatomic) NSString *certificatePlatform; // @dynamic certificatePlatform;
@property(retain, nonatomic) NSDate *expirationDate; // @dynamic expirationDate;
@property(retain, nonatomic) NSSet *provisioningProfiles; // @dynamic provisioningProfiles;
@property(retain, nonatomic) NSString *serialNumber; // @dynamic serialNumber;
@property(retain, nonatomic) NSString *status; // @dynamic status;
@property(retain, nonatomic) DVTTeamRecord *team; // @dynamic team;

@end

@interface DVTPortalOperation : DVTOperationGroup
{
    _Bool _cancelOnDependencies;
    _Bool _cancelOnSuboperations;
    DVTPortalOperationToken *_token;
    DVTLogAspect *_logAspect;
    NSString *_name;
    DTDKDeveloperPortalService *_service;
}

+ (id)keyPathsForValuesAffectingResultCode;
+ (id)operationForService:(id)arg1;
+ (id)operationForService:(id)arg1 withToken:(id)arg2;
+ (id)operationWithBlock:(CDUnknownBlockType)arg1;
+ (id)operationWithName:(id)arg1;
+ (id)operationWithToken:(id)arg1;
+ (id)operationWithToken:(id)arg1 name:(id)arg2 andBlock:(CDUnknownBlockType)arg3;
@property(retain) DTDKDeveloperPortalService *service; // @synthesize service=_service;
@property _Bool cancelOnSuboperations; // @synthesize cancelOnSuboperations=_cancelOnSuboperations;
@property _Bool cancelOnDependencies; // @synthesize cancelOnDependencies=_cancelOnDependencies;
@property(copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (long long)resultCode;
@property(readonly, copy) NSArray *responseWrappers;
@property(readonly, copy) NSArray *responseDictionaries;
@property(readonly, copy) NSArray *errors;
- (id)error;
@property(retain) DVTLogAspect *logAspect; // @synthesize logAspect=_logAspect;
@property(retain) DVTPortalOperationToken *token; // @synthesize token=_token;
- (id)description;
- (void)_updateCaches;
- (void)_success;
- (void)_failure:(id)arg1;
- (void)main;
- (void)start;
- (void)addSuboperations:(id)arg1;
- (double)_retryDelay;
- (unsigned long long)_maxRetryAttempts;
- (_Bool)_shouldRetryOnServiceError:(id)arg1;
- (id)init;

@end

@interface DVTDeveloperInfoOperation : DVTPortalOperation
{
}

+ (id)operationWithToken:(id)arg1;
- (id)description;

@end

@interface DVTListTeamOperation : DVTPortalOperation
{
}

+ (id)operationWithToken:(id)arg1;
- (void)_success;
- (id)description;

@end

@interface DVTListTeamForServerOperation : DVTListTeamOperation
{
}

+ (id)operationWithToken:(id)arg1;
- (void)_success;
- (id)description;

@end

@interface DVTPortalInfoOperation : DVTPortalOperation
{
}

+ (id)operationWithToken:(id)arg1;
- (id)description;

@end

@interface DVTTeamOperationBase : DVTPortalOperation
{
    NSString *_platform;
}

+ (id)operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;
+ (id)operationWithToken:(id)arg1;
+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;
+ (id)_operationsWithToken:(id)arg1;
@property(copy) NSString *platform; // @synthesize platform=_platform;
- (void).cxx_destruct;
- (id)description;

@end

@interface DVTListDevicesOperation : DVTTeamOperationBase
{
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;

@end

@interface DVTListAppIDsOperation : DVTTeamOperationBase
{
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;

@end

@interface DVTAddAppIDOperation : DVTPortalOperation
{
}

+ (id)operationWithSingleTeamToken:(id)arg1 name:(id)arg2 andPlatform:(id)arg3;
+ (id)operationWithSingleTeamToken:(id)arg1 name:(id)arg2 bundleIdentifier:(id)arg3 andPlatform:(id)arg4;
+ (id)operationWithSingleTeamToken:(id)arg1 name:(id)arg2 prefix:(id)arg3 bundleIdentifier:(id)arg4 andPlatform:(id)arg5;

@end

@interface DVTUpdateAppIDOperation : DVTPortalOperation
{
}

+ (id)operationWithToken:(id)arg1 appIDRecord:(id)arg2 andFeatures:(id)arg3;
+ (id)operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2 appIDID:(id)arg3 appIdName:(id)arg4 andFeatures:(id)arg5;

@end

@interface DVTCreateProfileOperation : DVTPortalOperation
{
}

+ (id)operationWithSingleTeamToken:(id)arg1 profileName:(id)arg2 appId:(id)arg3 devices:(id)arg4 includeAllDevices:(BOOL)arg5 subPlatform:(id)arg6 andCertificates:(id)arg7;

@end

@interface DVTDeleteProfileOperation : DVTPortalOperation
{
}

+ (id)operationWithSingleTeamToken:(id)arg1 platform:(id)arg2 andProfileID:(id)arg3;

@end

@interface DVTListProvisioningProfilesOperation : DVTTeamOperationBase
{
    NSSet *_profileRecords;
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;
@property(retain, nonatomic) NSSet *profileRecords; // @synthesize profileRecords=_profileRecords;
- (void).cxx_destruct;

@end

@interface DVTListShoeboxIDsOperation : DVTTeamOperationBase
{
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;

@end

@interface DVTListCloudContainersForTeamOperation : DVTTeamOperationBase
{
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;

@end

@interface DVTListCloudContainersForAppIDOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 andPlatform:(id)arg2 appIdId:(id)arg3;

@end

@interface DVTAddCloudContainersToAppIDOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 andPlatform:(id)arg2 portalIdentifiers:(id)arg3 appIdId:(id)arg4;

@end

@interface DVTAddCloudContainerToTeamOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 andPlatform:(id)arg2 identifier:(id)arg3 name:(id)arg4;

@end

@interface DVTListApplicationGroupsForTeamOperation : DVTTeamOperationBase
{
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;

@end

@interface DVTAddApplicationGroupToTeamOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 andPlatform:(id)arg2 identifier:(id)arg3 name:(id)arg4;

@end

@interface DVTAddApplicationGroupsToAppIDOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 andPlatform:(id)arg2 portalIdentifiers:(id)arg3 appIdId:(id)arg4;

@end

@interface DVTListOMCIdentifiersForTeamOperation : DVTTeamOperationBase
{
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;

@end

@interface DVTAddOMCIdentifierToTeamOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 andPlatform:(id)arg2 identifier:(id)arg3 name:(id)arg4;

@end

@interface DVTAddOMCIdentifiersToAppIDOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 andPlatform:(id)arg2 portalIdentifiers:(id)arg3 appIdId:(id)arg4;

@end

@interface DVTListCertsOperation : DVTTeamOperationBase <DVTCertificateRecordVendor>
{
    DVTDispatchLock *_certificateSerialNumbersLock;
    NSSet *_certificateSerialNumbers;
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;
- (void).cxx_destruct;
- (id)certificateRecordsWithContext:(id)arg1;
- (void)_extractSerialNumbersFromResponseDictionaries;
- (id)init;

@end

@interface DVTListEverythingOperation : DVTTeamOperationBase
{
}

+ (id)_operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;
+ (id)operationWithSingleTeamToken:(id)arg1 andPlatform:(id)arg2;
+ (id)operationWithToken:(id)arg1;

@end

@interface DVTServerJoinTeamOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 teamId:(id)arg2 clientName:(id)arg3 clientUID:(id)arg4 csrContent:(id)arg5;

@end

@interface DVTServerCancelJoinTeamOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 teamId:(id)arg2 clientName:(id)arg3 clientUID:(id)arg4;

@end

@interface DVTServerDownloadTeamClientCertificateOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 teamId:(id)arg2 clientUID:(id)arg3;

@end

@interface DVTServerRenewTeamMembershipTeamOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 teamId:(id)arg2 clientName:(id)arg3 clientUID:(id)arg4 csrContent:(id)arg5;

@end

@interface DVTServerRevokeTeamMembershipTeamOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 teamId:(id)arg2 clientName:(id)arg3 clientUID:(id)arg4;

@end

@interface DVTServerRequestTeamDevelopmentCertificateOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 teamId:(id)arg2 platform:(id)arg3 certificateSigningRequest:(id)arg4;

@end

@interface DVTServerDownloadTeamDevelopmentCertificateOperation : DVTTeamOperationBase
{
}

+ (id)operationWithToken:(id)arg1 teamId:(id)arg2 platform:(id)arg3;

@end

@interface DVTAddDeviceOperation : DVTPortalOperation
{
}

+ (id)operationWithSingleTeamToken:(id)arg1 UUID:(id)arg2 name:(id)arg3 portalDeviceClass:(id)arg4 andPlatform:(id)arg5;
- (void)_failure:(id)arg1;

@end

@interface DVTDownloadCertificateOperation : DVTPortalOperation <DVTCertificateRecordVendor>
{
    BOOL _shouldRetryDownload;
}

+ (id)operationWithSingleTeamToken:(id)arg1 certificateType:(unsigned long long)arg2 andPlatform:(id)arg3;
@property(nonatomic) BOOL shouldRetryDownload; // @synthesize shouldRetryDownload=_shouldRetryDownload;
- (id)certificateRecordsWithContext:(id)arg1;
- (_Bool)_shouldRetryOnServiceError:(id)arg1;
- (void)_failure:(id)arg1;

@end

@interface DVTRevokeCertificateOperation : DVTPortalOperation
{
}

+ (id)operationWithSingleTeamToken:(id)arg1 certificateType:(unsigned long long)arg2 andPlatform:(id)arg3 serialNumber:(id)arg4;

@end

@interface DVTDownloadWWDRCertificateAuthorityOperation : DVTPortalOperation
{
}

+ (id)operationWithToken:(id)arg1;

@end

@interface DVTDownloadDeveloperIDCertificateAuthorityOperation : DVTPortalOperation
{
}

+ (id)operationWithToken:(id)arg1;

@end

@interface DVTDownloadProfileOperation : DVTPortalOperation
{
}

+ (id)operationWithSingleTeamToken:(id)arg1 appIdId:(id)arg2 andPlatform:(id)arg3;
+ (id)operationWithSingleTeamToken:(id)arg1 profileIds:(id)arg2 andPlatform:(id)arg3;
+ (id)operationWithSingleTeamToken:(id)arg1 profileId:(id)arg2 andPlatform:(id)arg3;
- (_Bool)_shouldRetryOnServiceError:(id)arg1;

@end

@interface DVTDownloadTeamProfileOperation : DVTDownloadProfileOperation
{
}

+ (id)operationWithSingleTeamToken:(id)arg1 appIdIds:(id)arg2 andPlatform:(id)arg3 andSubPlatform:(id)arg4;
+ (id)operationWithSingleTeamToken:(id)arg1 appIdId:(id)arg2 andPlatform:(id)arg3 andSubPlatform:(id)arg4;
- (_Bool)_shouldRetryOnServiceError:(id)arg1;

@end

@interface DVTUpdatePortalDatabaseOperation : DVTPortalOperation
{
}

+ (id)operationWithDependency:(id)arg1;
+ (id)operationWithDependencies:(id)arg1;
+ (id)operationWithToken:(id)arg1 dependencies:(id)arg2;
+ (id)operation;

@end

@interface DVTCollectCertificateFailuresOperation : DVTPortalOperation
{
}

+ (id)operationWithToken:(id)arg1;
+ (id)_nonUIOperationWithToken:(id)arg1;

@end

@interface DVTPortalOperationToken : NSObject <NSCopying>
{
    _Bool _useServerContext;
    _Bool _userHasPicked;
    NSArray *_teams;
    DVTDeveloperAccount *_account;
    NSError *_error;
    DVTSigningCertificateManager *_signingCertificateManager;
    DVTProvisioningProfileManager *_provisioningProfileManager;
}

+ (id)tokenWithDeveloperAccount:(id)arg1 useServerContext:(_Bool)arg2;
+ (id)tokenWithDeveloperAccount:(id)arg1;
@property(retain, nonatomic) DVTProvisioningProfileManager *provisioningProfileManager; // @synthesize provisioningProfileManager=_provisioningProfileManager;
@property(retain, nonatomic) DVTSigningCertificateManager *signingCertificateManager; // @synthesize signingCertificateManager=_signingCertificateManager;
@property _Bool userHasPicked; // @synthesize userHasPicked=_userHasPicked;
@property(copy) NSError *error; // @synthesize error=_error;
@property _Bool useServerContext; // @synthesize useServerContext=_useServerContext;
@property(retain) DVTDeveloperAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (void)executeWithSession:(CDUnknownBlockType)arg1;
- (id)individualTeamTokens;
@property(readonly, copy) NSString *teamId;
- (void)setTeam:(id)arg1;
@property(readonly, copy) NSDictionary *team;
@property(copy) NSArray *teams; // @synthesize teams=_teams;
- (_Bool)filterTeamsUsingBlock:(CDUnknownBlockType)arg1;
- (_Bool)filterTeamsToSingleTeamId:(id)arg1;
- (_Bool)filterTeamsToTeamIds:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DTDKDeveloperPortalService : NSObject
{
    DVTDeveloperPortalResponseWrapper *_responseWrapper;
    _Bool _ignoreSession;
    _Bool _success;
    int _remainingLoginAttempts;
    DVTLogAspect *_logAspect;
    DVTDeveloperAccountSession *_session;
    DVTPortalOperationToken *_token;
    NSMutableURLRequest *_request;
    NSMutableDictionary *_requestDictionary;
    CDUnknownBlockType _callback;
    NSDictionary *_responseDictionary;
    NSError *_error;
}

+ (id)_service:(id)arg1 requestPropertyList:(id)arg2;
+ (id)_createRequestDictionary;
+ (id)guaranteedComprehensiveResponseKeys;
+ (id)_serviceVersion;
+ (id)alloc;
@property _Bool success; // @synthesize success=_success;
@property(copy) NSError *error; // @synthesize error=_error;
@property(copy) NSDictionary *responseDictionary; // @synthesize responseDictionary=_responseDictionary;
@property(copy) CDUnknownBlockType callback; // @synthesize callback=_callback;
@property(retain) NSMutableDictionary *requestDictionary; // @synthesize requestDictionary=_requestDictionary;
@property(retain) NSMutableURLRequest *request; // @synthesize request=_request;
@property int remainingLoginAttempts; // @synthesize remainingLoginAttempts=_remainingLoginAttempts;
@property(retain) DVTPortalOperationToken *token; // @synthesize token=_token;
@property _Bool ignoreSession; // @synthesize ignoreSession=_ignoreSession;
@property(retain) DVTDeveloperAccountSession *session; // @synthesize session=_session;
- (void).cxx_destruct;
@property(retain) DVTLogAspect *logAspect; // @synthesize logAspect=_logAspect;
- (void)_success;
- (void)_failure:(id)arg1;
- (void)_callCallback;
- (void)executeWithCallback:(CDUnknownBlockType)arg1;
- (id)_errorInfo;
- (BOOL)_handlePortalResultCode:(long long)arg1;
- (void)_internalParseResponse:(id)arg1 data:(id)arg2;
- (void)_parseResponse:(id)arg1 data:(id)arg2;
- (void)_internalExecute;
@property(readonly) DVTDeveloperAccount *account;
@property(readonly, nonatomic) DVTDeveloperPortalResponseWrapper *responseWrapper;
@property(readonly) long long resultCode;
- (id)uuid;
@property(readonly) _Bool synchronous;
- (id)init;
- (id)_userAgent;
- (id)_clientID;

@end

@interface DTDKCertificateAuthorityService : DTDKDeveloperPortalService
{
    NSData *_certificateData;
}

+ (id)serviceForDeveloperID;
+ (id)serviceForWWDR;
+ (id)_serviceForURL:(id)arg1;
@property(retain) NSData *certificateData; // @synthesize certificateData=_certificateData;
- (void).cxx_destruct;
- (void)_internalExecute;

@end

@interface DTDKDeveloperInfoService : DTDKDeveloperPortalService
{
}

+ (id)keyPathsForValuesAffectingPersonID;
+ (id)keyPathsForValuesAffectingFamilyName;
+ (id)keyPathsForValuesAffectingGivenName;
+ (id)keyPathsForValuesAffectingLastName;
+ (id)keyPathsForValuesAffectingFirstName;
+ (id)keyPathsForValuesAffectingEmail;
+ (id)keyPathsForValuesAffectingDeveloperStatus;
+ (id)keyPathsForValuesAffectingDeveloperID;
+ (id)keyPathsForValuesAffectingDeveloper;
+ (id)service;
@property(readonly) NSString *personID;
@property(readonly) NSString *familyName;
@property(readonly) NSString *givenName;
@property(readonly) NSString *lastName;
@property(readonly) NSString *firstName;
@property(readonly) NSString *email;
@property(readonly) NSString *developerStatus;
@property(readonly) NSString *developerID;
@property(readonly) NSDictionary *developer;

@end

@interface DTDKListTeamService : DTDKDeveloperPortalService
{
}

+ (id)keyPathsForValuesAffectingTeams;
+ (id)service;
@property(readonly) NSArray *teams;

@end

@interface DTDKListTeamForServerService : DTDKDeveloperPortalService
{
}

+ (id)filterTeams:(id)arg1;
+ (id)keyPathsForValuesAffectingTeams;
+ (id)service;
@property(readonly) NSArray *teams;

@end

@interface DTDKTeamBasedService : DTDKDeveloperPortalService
{
}

+ (id)_service:(id)arg1 requestPropertyList:(id)arg2;
+ (id)_createRequestDictionaryForTeam:(id)arg1 andPlatform:(id)arg2;
+ (id)_createRequestDictionaryForTeam:(id)arg1;
- (void)_success;
- (void)_failure:(id)arg1;
@property(readonly, copy) NSString *subPlatform;
@property(readonly, copy) NSString *platform;
@property(readonly, copy) NSString *teamID;

@end

@interface DTDKListEverythingService : DTDKTeamBasedService
{
}

+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1;
- (void)_success;
- (void)_failure:(id)arg1;

@end

@interface DTDKServerJoinTeamService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 clientName:(id)arg2 clientUID:(id)arg3 csrContent:(id)arg4;

@end

@interface DTDKServerCancelJoinTeamService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 clientName:(id)arg2 clientUID:(id)arg3;

@end

@interface DTDKServerRenewTeamMembershipTeamService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 clientName:(id)arg2 clientUID:(id)arg3 csrContent:(id)arg4;

@end

@interface DTDKServerRevokeTeamMembershipTeamService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 clientName:(id)arg2 clientUID:(id)arg3;

@end

@interface DTDKServerDownloadTeamClientCertificateService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 clientUID:(id)arg2;

@end

@interface DTDKServerRequestTeamDevelopmentCertificateService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 platform:(id)arg2 certificateSigningRequest:(id)arg3;

@end

@interface DTDKServerDownloadTeamDevelopmentCertificateService : DTDKDeveloperPortalService
{
}

+ (id)serviceForTeam:(id)arg1 platform:(id)arg2;

@end

@interface DTDKListDeviceService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingDevices;
+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2;
@property(readonly) NSArray *devices;

@end

@interface DTDKAddDeviceService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingDeviceID;
+ (id)keyPathsForValuesAffectingDeviceNumber;
+ (id)keyPathsForValuesAffectingDeviceName;
+ (id)keyPathsForValuesAffectingDevice;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 withDeviceIndentifier:(id)arg3 name:(id)arg4 portalDeviceClass:(id)arg5;
- (BOOL)_handlePortalResultCode:(long long)arg1;
@property(readonly) NSString *deviceID;
@property(readonly) NSString *deviceNumber;
@property(readonly) NSString *deviceName;
@property(readonly) NSDictionary *device;
- (id)_errorInfo;

@end

@interface DTDKRenameDeviceService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingDeviceID;
+ (id)keyPathsForValuesAffectingDeviceNumber;
+ (id)keyPathsForValuesAffectingDeviceName;
+ (id)keyPathsForValuesAffectingDevice;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 deviceID:(id)arg3 newName:(id)arg4;
@property(readonly) NSString *deviceID;
@property(readonly) NSString *deviceNumber;
@property(readonly) NSString *deviceName;
@property(readonly) NSDictionary *device;

@end

@interface DTDKRemoveDeviceService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 deviceID:(id)arg3;

@end

@interface DTDKListAppIDsService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingAppIDs;
+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 andAppIDID:(id)arg3;
- (void)_success;
@property(readonly) NSArray *appIDs;

@end

@interface DTDKDeleteAppIDService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 andAppIDID:(id)arg3;

@end

@interface DTDKFetchAppIDService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingAppID;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 andAppIDID:(id)arg3;
@property(readonly) NSDictionary *appID;

@end

@interface DTDKAddAppIDService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingAppID;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 name:(id)arg3 andEntitlements:(id)arg4;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 name:(id)arg3 bundleIdentifier:(id)arg4 andEntitlements:(id)arg5;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 name:(id)arg3 prefix:(id)arg4 bundleIdentifier:(id)arg5 andEntitlements:(id)arg6;
@property(readonly) NSDictionary *appID;

@end

@interface DTDKUpdateAppIDService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingAppID;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 appIDID:(id)arg3 appIdName:(id)arg4 andFeatures:(id)arg5;
@property(readonly) NSDictionary *appID;

@end

@interface DTDKListShoeboxIDsService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingShoeboxIDs;
+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2;
@property(readonly) NSArray *shoeboxIDs;

@end

@interface DTDKDeleteShoeboxIDService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 andShoeboxIdId:(id)arg3;

@end

@interface DTDKAddShoeboxIDService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingShoeboxID;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 shoeboxIdentifier:(id)arg3;
@property(readonly) NSDictionary *shoeboxID;

@end

@interface DTDKListCloudContainersForTeamService : DTDKTeamBasedService
{
    NSArray *_cloudContainers;
}

+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2;
@property(readonly) NSArray *cloudContainers; // @synthesize cloudContainers=_cloudContainers;
- (void).cxx_destruct;

@end

@interface DTDKListCloudContainersForAppIDService : DTDKTeamBasedService
{
}

+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 appIdId:(id)arg3;

@end

@interface DTDKAddCloudContainerToTeamService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 identifier:(id)arg3 name:(id)arg4;

@end

@interface DTDKAddCloudContainersToAppIDService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 portalIdentifiers:(id)arg3 appIdId:(id)arg4;

@end

@interface DTDKListApplicationGroupsForTeamService : DTDKTeamBasedService
{
    NSArray *_cloudContainers;
}

+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2;
@property(readonly) NSArray *cloudContainers; // @synthesize cloudContainers=_cloudContainers;
- (void).cxx_destruct;

@end

@interface DTDKAddApplicationGroupToTeamService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 identifier:(id)arg3 name:(id)arg4;

@end

@interface DTDKAddApplicationGroupsToAppIDService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 portalIdentifiers:(id)arg3 appIdId:(id)arg4;

@end

@interface DTDKListOMCIdentifiersForTeamService : DTDKTeamBasedService
{
    NSArray *_OMCIdentifiers;
}

+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2;
@property(readonly) NSArray *OMCIdentifiers; // @synthesize OMCIdentifiers=_OMCIdentifiers;
- (void).cxx_destruct;

@end

@interface DTDKAddOMCIdentifierToTeamService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 identifier:(id)arg3 name:(id)arg4;

@end

@interface DTDKAddOMCIdentifiersToAppIDService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 portalIdentifiers:(id)arg3 appIdId:(id)arg4;

@end

@interface DTDKCreateProvisioningProfileService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingProfile;
+ (id)keyPathsForValuesAffectingEncodedProfile;
+ (id)keyPathsForValuesAffectingProvisioningProfileID;
+ (id)keyPathsForValuesAffectingProfileDictionary;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 subPlatform:(id)arg3 profileName:(id)arg4 appIDID:(id)arg5 deviceIDs:(id)arg6 includeAllDevices:(BOOL)arg7 certificateIDs:(id)arg8 distributionType:(id)arg9;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 subPlatform:(id)arg3 profileName:(id)arg4 appIDID:(id)arg5 deviceIDs:(id)arg6 includeAllDevices:(BOOL)arg7 certificateIDs:(id)arg8;
@property(readonly) NSData *encodedProfile;
@property(readonly) NSString *provisioningProfileID;
@property(readonly) NSDictionary *profileDictionary;

@end

@interface DTDKListProvisioningProfileService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingProvisioningProfiles;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 includeInvalidProfiles:(_Bool)arg3;
- (id)downloadServices;
@property(readonly) NSArray *provisioningProfiles;

@end

@interface DTDKDownloadProvisioningProfileService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingProfile;
+ (id)keyPathsForValuesAffectingEncodedProfile;
+ (id)keyPathsForValuesAffectingDevices;
+ (id)keyPathsForValuesAffectingExpirationDate;
+ (id)keyPathsForValuesAffectingCertificates;
+ (id)keyPathsForValuesAffectingProvisioningProfileID;
+ (id)keyPathsForValuesAffectingAppID;
+ (id)keyPathsForValuesAffectingProfileDictionary;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 andSubPlatform:(id)arg3 andAppIDIDs:(id)arg4;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 andProfileIDs:(id)arg3;
- (id)encodedProfile;
- (id)devices;
- (id)expirationDate;
- (id)certificates;
- (id)appID;
- (id)provisioningProfileID;
- (id)profileDictionary;

@end

@interface DTDKDeleteProvisioningProfileService : DTDKTeamBasedService
{
}

+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2 andProfileID:(id)arg3;

@end

@interface DTDKCertificateService : DTDKTeamBasedService
{
}

+ (id)_createRequestDictionaryForCertificateType:(unsigned long long)arg1 team:(id)arg2 andPlatform:(id)arg3;
+ (id)_createRequestDictionaryForTeam:(id)arg1 andPlatform:(id)arg2;
- (void)_success;
- (void)_failure:(id)arg1;
@property(readonly) unsigned long long certificateType;

@end

@interface DTDKListCSRsService : DTDKCertificateService
{
}

+ (id)keyPathsForValuesAffectingCertRequests;
+ (id)serviceForCertificateType:(unsigned long long)arg1 team:(id)arg2 andPlatform:(id)arg3;
@property(readonly) NSArray *certRequests;

@end

@interface DTDKDownloadCertService : DTDKCertificateService
{
}

+ (id)keyPathsForValuesAffectingCertificateContents;
+ (id)keyPathsForValuesAffectingCertificates;
+ (id)serviceForCertificateType:(unsigned long long)arg1 team:(id)arg2 andPlatform:(id)arg3;
@property(readonly) NSArray *certificateSerialNumbers;
@property(readonly) NSArray *certificateContents;
@property(readonly) NSArray *certificates;

@end

@interface DTDKRevokeCertService : DTDKCertificateService
{
}

+ (id)serviceForCertificateType:(unsigned long long)arg1 team:(id)arg2 platform:(id)arg3 andSerialNumber:(id)arg4;

@end

@interface DTDKListCertService : DTDKTeamBasedService
{
}

+ (id)keyPathsForValuesAffectingCertificateSerialNumber;
+ (id)guaranteedComprehensiveResponseKeys;
+ (id)serviceForTeam:(id)arg1 andPlatform:(id)arg2;
- (BOOL)_handlePortalResultCode:(long long)arg1;
@property(readonly) NSArray *certificates;

@end

@interface DVTFetchOrCreateAppIDOperation : DVTPortalOperation
{
    NSString *_fetchedOrCreatedAppIDID;
}

@property(copy, nonatomic) NSString *fetchedOrCreatedAppIDID; // @synthesize fetchedOrCreatedAppIDID=_fetchedOrCreatedAppIDID;
- (void).cxx_destruct;

@end

@interface DVTDeveloperPortalResponseWrapper : NSObject
{
    NSDictionary *_responseDictionary;
    NSSet *_guaranteedComprehensiveResponseKeys;
}

+ (id)responseWrapperWithResponseDictionary:(id)arg1 guaranteedComprehensiveResponseKeys:(id)arg2;
@property(readonly, nonatomic) NSSet *guaranteedComprehensiveResponseKeys; // @synthesize guaranteedComprehensiveResponseKeys=_guaranteedComprehensiveResponseKeys;
@property(readonly, nonatomic) NSDictionary *responseDictionary; // @synthesize responseDictionary=_responseDictionary;
- (void).cxx_destruct;
- (id)initWithResponseDictionary:(id)arg1 guaranteedComprehensiveResponseKeys:(id)arg2;

@end

@interface DVTSourceModelItem : NSObject
{
    int _rc;
    struct _NSRange _relativeLocation;
    long long _langId;
    long long _token;
    DVTSourceModelItem *_parent;
    NSMutableArray *_children;
    unsigned int _nodeType:15;
    unsigned int _isOpaque:1;
    unsigned int _dirty:1;
    unsigned int _isBlock:1;
    unsigned int _ignoreToken:1;
    unsigned int _inheritsNodeType:1;
    unsigned int _isIdentifier:1;
    unsigned int _needsAdjustNodeType:1;
    unsigned int _isSimpleToken:1;
    unsigned int _isVolatile:1;
    unsigned int _needToDirtyRightEdges:1;
}

+ (id)sourceModelItemWithRange:(struct _NSRange)arg1 language:(long long)arg2 token:(long long)arg3 nodeType:(short)arg4;
@property struct _NSRange relativeLocation; // @synthesize relativeLocation=_relativeLocation;
@property(retain, nonatomic) NSMutableArray *children; // @synthesize children=_children;
@property(nonatomic) DVTSourceModelItem *parent; // @synthesize parent=_parent;
@property long long token; // @synthesize token=_token;
@property long long langId; // @synthesize langId=_langId;
- (void).cxx_destruct;
- (void)enumerateIdentifierItemsInRelativeRange:(struct _NSRange)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)clearAdjustedNodeTypes;
- (long long)compare:(id)arg1;
- (id)followingItem;
- (id)precedingItem;
- (id)_lastLeafItem;
- (id)_firstLeafItem;
- (id)nextItem;
- (id)previousItem;
- (BOOL)isAncestorOf:(id)arg1;
- (id)childAdjoiningLocation:(unsigned long long)arg1;
- (id)childEnclosingLocation:(unsigned long long)arg1;
- (id)_childEnclosingLocation:(unsigned long long)arg1;
- (unsigned long long)indexOfChildAtLocation:(unsigned long long)arg1;
- (unsigned long long)indexOfChildAfterLocation:(unsigned long long)arg1;
- (unsigned long long)indexOfChildBeforeLocation:(unsigned long long)arg1;
- (unsigned long long)numberOfChildren;
- (void)addChildrenFromArray:(id)arg1 inRange:(struct _NSRange)arg2;
- (void)addChildren:(id)arg1;
- (void)addChild:(id)arg1;
- (void)assignAllParents:(id)arg1;
- (void)assignParents:(id)arg1;
- (BOOL)isVolatile;
- (void)setVolatile:(BOOL)arg1;
@property BOOL needsAdjustNodeType;
- (BOOL)needToDirtyRightEdges;
- (void)setNeedToDirtyRightEdges:(BOOL)arg1;
- (BOOL)isSimpleToken;
- (void)setIsSimpleToken:(BOOL)arg1;
- (BOOL)inheritsNodeType;
- (void)setInheritsNodeType:(BOOL)arg1;
- (BOOL)ignoreToken;
- (void)setIgnoreToken:(BOOL)arg1;
- (BOOL)dirty;
- (void)setDirty:(BOOL)arg1;
- (BOOL)isIdentifier;
- (short)rawNodeType;
- (BOOL)isOpaque;
- (void)setIsOpaque:(BOOL)arg1;
- (short)nodeType;
- (void)setNodeType:(short)arg1;
- (struct _NSRange)innerRange;
- (void)offsetBy:(long long)arg1;
- (void)setRange:(struct _NSRange)arg1;
- (struct _NSRange)range;
- (id)enclosingBlock;
- (long long)blockDepth;
- (void)setIsBlock:(BOOL)arg1;
- (BOOL)isBlock;
- (void)dirtyRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (void)dirtyRelativeRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (void)validate;
- (id)dumpContext;
- (id)contextArray;
- (id)simpleDescription;
- (id)diffableDescription;
- (id)description;
- (id)innerDescription:(id)arg1 showSelf:(BOOL)arg2;
- (id)initWithRange:(struct _NSRange)arg1 language:(long long)arg2 token:(long long)arg3 nodeType:(short)arg4;

@end

@interface DVTDeviceService : NSObject
{
    DVTDevice *_device;
    DVTExtension *_extension;
    DVTDeviceCapability *_currentCapability;
}

+ (id)capability;
@property(readonly) DVTDeviceCapability *currentCapability; // @synthesize currentCapability=_currentCapability;
@property(readonly) DVTDevice *device; // @synthesize device=_device;
- (void).cxx_destruct;
- (id)initForDevice:(id)arg1 extension:(id)arg2 capability:(id)arg3;

@end

@interface DVTCopyOnWriteMutableArray : NSMutableArray
{
    NSMutableArray *_backingArray;
    BOOL _hasHandedOutArray;
}

- (void).cxx_destruct;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeLastObject;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)addObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (void)_willMutate;
@property(readonly) NSArray *copiedArray;
- (id)init;

@end

@interface DVTHTMLScanner : DVTBlockScanner
{
}

- (id)parseRecursive:(id)arg1 withContext:(id)arg2 inputStream:(id)arg3 range:(struct _NSRange)arg4 dirtyRange:(struct _NSRange *)arg5;
- (int)actionForEndToken:(id)arg1 inContext:(id)arg2 inputStream:(id)arg3;
- (id)_stringByRemovingLeadingAndTrailingCharacters:(id)arg1 fromString:(id)arg2;

@end

@interface DVTMockCodesignableDevice : NSObject <DVTCodesignableDevice>
{
    BOOL _supportsProvisioningMock;
    NSString *_nameMock;
    NSString *_nameForDeveloperPortalMock;
    NSString *_identifierMock;
    NSString *_platformIdentifierMock;
    NSMutableSet *_proxiedDevicesMock;
}

@property(retain) NSMutableSet *proxiedDevicesMock; // @synthesize proxiedDevicesMock=_proxiedDevicesMock;
@property BOOL supportsProvisioningMock; // @synthesize supportsProvisioningMock=_supportsProvisioningMock;
@property(copy) NSString *platformIdentifierMock; // @synthesize platformIdentifierMock=_platformIdentifierMock;
@property(copy) NSString *identifierMock; // @synthesize identifierMock=_identifierMock;
@property(copy) NSString *nameForDeveloperPortalMock; // @synthesize nameForDeveloperPortalMock=_nameForDeveloperPortalMock;
@property(copy) NSString *nameMock; // @synthesize nameMock=_nameMock;
- (void).cxx_destruct;
@property(readonly) DVTPlatform *platform;
@property(readonly, copy) NSSet *proxiedDevices;
@property(readonly) BOOL supportsProvisioning;
@property(readonly, copy) NSString *platformIdentifier;
@property(readonly, copy, nonatomic) NSString *identifier;
@property(readonly, copy) NSString *nameForDeveloperPortal;
@property(readonly, copy, nonatomic) NSString *name;
- (id)snapshot;
- (id)initWithDictionary:(id)arg1;
- (id)initWithPlist:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTFindResult : NSObject <NSCopying, NSCoding>
{
    int _replaceState;
    DVTDocumentLocation *_location;
    NSString *_contextString;
    NSString *_replacedString;
    DVTDocumentLocation *_replacedLocation;
    NSDictionary *_userInfo;
    struct _NSRange _contextRange;
}

+ (struct _NSRange)lineRangeForFoundRange:(struct _NSRange)arg1 inString:(id)arg2;
@property(readonly, copy) NSDictionary *userInfo; // @synthesize userInfo=_userInfo;
@property(copy) DVTDocumentLocation *replacedLocation; // @synthesize replacedLocation=_replacedLocation;
@property(copy, nonatomic) NSString *replacedString; // @synthesize replacedString=_replacedString;
@property int replaceState; // @synthesize replaceState=_replaceState;
@property(readonly) struct _NSRange contextRange; // @synthesize contextRange=_contextRange;
@property(readonly) NSString *contextString; // @synthesize contextString=_contextString;
@property(readonly) DVTDocumentLocation *location; // @synthesize location=_location;
- (void).cxx_destruct;
- (id)copyWithContextString:(id)arg1 contextRange:(struct _NSRange)arg2 userInfo:(id)arg3;
- (id)copyWithUpdatedLocation:(id)arg1;
- (id)stringForReplacementString:(id)arg1;
@property(readonly) NSString *foundString;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithFoundLocation:(id)arg1 withRange:(struct _NSRange)arg2 inContext:(id)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTFilePathEventWatcher : NSObject
{
    struct __FSEventStream *_streamRef;
    NSObject<OS_dispatch_queue> *_watcherQueue;
    double _latency;
    unsigned long long _lastEventHandled;
    NSMutableSet *_watchedFilePaths;
    NSMapTable *_watchedFileMap;
}

+ (id)sharedFilePathEventWatcher;
+ (void)initialize;
- (void).cxx_destruct;
- (void)handleEventsForStream:(struct __FSEventStream *)arg1 numEvents:(unsigned long long)arg2 eventPaths:(const char **)arg3 eventFlags:(const unsigned int *)arg4 eventIds:(const unsigned long long *)arg5;
- (void)stop;
- (void)run;
- (void)_resetStream;
- (void)_teardownStream;
- (void)_setupStream;
- (void)watchFilePath:(id)arg1;
- (BOOL)_shouldWatchWholeVolumes;
@property double eventLatency;
- (void)dealloc;
- (id)init;
- (id)_initPrivate;

@end

@interface DVTCharStream : NSObject
{
    DVTStringBuffer *_stringBuffer;
    NSString *_realString;
    DVTCheapReusableSubstring *_cheapString;
    NSMutableArray *_savedTokens;
    id _savedBottomToken;
    BOOL _isAtBOL;
    BOOL _isAtColumnZero;
    BOOL _BOLIsKnown;
    BOOL _SeenOneCharAtBOL;
    BOOL _SeenWhitespaceAtBOL;
}

- (void).cxx_destruct;
- (id)savedToken;
- (BOOL)hasSavedTokens;
- (void)saveToken:(id)arg1;
- (id)stringWithRange:(struct _NSRange)arg1;
- (unsigned long long)locationOfNewlineFrom:(unsigned long long)arg1 searchBackwards:(BOOL)arg2;
- (unsigned long long)peekCharacterInSet:(id)arg1;
- (unsigned short)peekCharSkippingWhitespace;
- (unsigned short)peekChar;
- (BOOL)isAtColumnZero;
- (BOOL)isAtBOL;
- (void)_computeBOL;
- (unsigned short)nextCharSkippingWhitespace;
- (unsigned short)nextChar;
- (void)setLocation:(unsigned long long)arg1;
- (unsigned long long)location;
- (unsigned long long)length;
- (id)string;
- (void)setString:(id)arg1;
- (id)initWithString:(id)arg1;

@end

@interface DVTSigningCertificateManager : NSObject <DVTSigningCertificateSourceDelegate, DVTInvalidation>
{
    DVTDispatchLock *_certificateLock;
    NSMutableSet *_signingCertificates;
    BOOL _areCertificatesLoaded;
    DVTSigningCertificateSource *_certificateSource;
}

+ (id)defaultCertificateManager;
+ (void)initialize;
@property(retain) DVTSigningCertificateSource *certificateSource; // @synthesize certificateSource=_certificateSource;
@property BOOL areCertificatesLoaded; // @synthesize areCertificatesLoaded=_areCertificatesLoaded;
- (void).cxx_destruct;
- (void)_delayedPostCertificatesChangedNotification;
- (void)forceFullSyncWithCallback:(CDUnknownBlockType)arg1;
- (void)forceFullSync;
- (void)signingCertificateSourceShouldDoFullResetFromSigningCertificates:(id)arg1;
- (void)signingCertificateSourcePrivateKeyStatusForCertificatesMayHaveChanged:(id)arg1;
- (void)signingCertificateSource:(id)arg1 didRemoveCertificate:(id)arg2;
- (void)signingCertificateSource:(id)arg1 didAddCertificate:(id)arg2;
- (id)signingCertificateFromDataObject:(id)arg1;
- (BOOL)isCertificateAnIdentity:(id)arg1;
- (BOOL)installCertificate:(id)arg1 privateKey:(struct OpaqueSecKeyRef *)arg2 keyName:(id)arg3 error:(id *)arg4;
- (id)keychainSearchList;
@property(readonly) NSSet *signingCertificates;
- (id)logAspect;
@property(readonly, copy) NSString *description;
- (void)primitiveInvalidate;
- (id)initWithCertificateSource:(id)arg1;
- (id)init;
- (BOOL)_legacy_installPrivateKey:(struct OpaqueSecKeyRef *)arg1 privateKeyName:(id)arg2 error:(id *)arg3;
- (BOOL)_legacy_installCertificate:(id)arg1 error:(id *)arg2;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTDynamicLogController : NSObject
{
    NSString *_path;
    DVTDispatchLock *_dispatchLock;
}

+ (id)dynamicLogControllerForPath:(id)arg1 createIfNeeded:(BOOL)arg2 returningError:(id *)arg3;
@property(retain) DVTDispatchLock *dispatchLock; // @synthesize dispatchLock=_dispatchLock;
@property(retain) NSString *path; // @synthesize path=_path;
- (void).cxx_destruct;
- (BOOL)writeString:(id)arg1 toFileAtSubpath:(id)arg2 returningError:(id *)arg3;
- (id)initWithPath:(id)arg1;

@end

@interface DVTDiskStockManager : NSObject
{
    CDUnknownBlockType _cullingStrategyBlock;
    DVTDispatchLock *_diskStocksLock;
    NSMutableSet *_diskStocks;
}

+ (unsigned long long)_folderSize:(id)arg1;
+ (id)logAspect;
+ (id)defaultDiskStockManager;
- (void).cxx_destruct;
- (unsigned long long)_calculateSizeOfDiskStock:(id)arg1 members:(id)arg2;
- (void)cullAllDiskStocksOnQueue:(id)arg1 afterDelay:(double)arg2 withCompletionBlock:(CDUnknownBlockType)arg3;
- (void)cullAllDiskStocksOnQueue:(id)arg1 withCompletionBlock:(CDUnknownBlockType)arg2;
- (void)cullDiskStockSynchronously:(id)arg1;
- (id)diskStockForIdentifier:(id)arg1;
- (id)registeredDiskStocks;
- (void)registerDiskStock:(id)arg1;
- (id)initWithCullingStrategyBlock:(CDUnknownBlockType)arg1;
- (id)init;

@end

@interface DVTPlugIn : NSObject <DVTPropertyListEncoding>
{
    DVTPlugInManager *_plugInManager;
    NSString *_identifier;
    NSString *_version;
    NSString *_name;
    NSMutableSet *_extensions;
    NSMutableDictionary *_extensionsByIdentifier;
    NSMutableSet *_extensionPoints;
    NSMutableDictionary *_extensionPointsByIdentifier;
    NSMutableArray *_activationRules;
    NSMutableSet *_requiredPlugIns;
    NSString *_bundlePath;
    NSBundle *_bundle;
    NSDictionary *_bundleRawInfoDictionary;
    NSString *_path;
    NSString *_principalClassName;
    id _principalInstance;
    BOOL _preload;
    BOOL _isLoaded;
    BOOL _isLoading;
}

@property(readonly) NSDictionary *_extensionPointsByIdentifier; // @synthesize _extensionPointsByIdentifier;
@property(readonly) NSDictionary *_extensionsByIdentifier; // @synthesize _extensionsByIdentifier;
@property(readonly, getter=isLoading) BOOL loading; // @synthesize loading=_isLoading;
@property(readonly, getter=isLoaded) BOOL loaded; // @synthesize loaded=_isLoaded;
@property(readonly) BOOL preload; // @synthesize preload=_preload;
@property(readonly) id principalInstance; // @synthesize principalInstance=_principalInstance;
@property(readonly, copy) NSString *path; // @synthesize path=_path;
@property(readonly, copy) NSSet *requiredPlugIns; // @synthesize requiredPlugIns=_requiredPlugIns;
@property(readonly, copy) NSArray *activationRules; // @synthesize activationRules=_activationRules;
@property(readonly, copy) NSSet *extensionPoints; // @synthesize extensionPoints=_extensionPoints;
@property(readonly, copy) NSSet *extensions; // @synthesize extensions=_extensions;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
@property(readonly, copy) NSString *version; // @synthesize version=_version;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) DVTPlugInManager *plugInManager; // @synthesize plugInManager=_plugInManager;
- (void).cxx_destruct;
- (BOOL)load:(id *)arg1;
- (void)_instantiatePrincipalClass;
@property(readonly, getter=isLoadable) BOOL loadable;
@property(readonly) NSBundle *bundle;
@property(readonly, copy) NSString *description;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (void)_configureToUsePath:(id)arg1 andBundle:(id)arg2 rawInfoPlist:(id)arg3;
- (id)initWithPlugInData:(id)arg1 plugInManager:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTFindRegularExpressionResult : DVTFindResult <NSCoding, NSCopying>
{
    NSString *_wholeContextString;
    NSRegularExpression *_regularExpression;
    NSTextCheckingResult *_match;
}

@property(readonly) NSTextCheckingResult *match; // @synthesize match=_match;
@property(readonly) NSRegularExpression *regularExpression; // @synthesize regularExpression=_regularExpression;
- (void).cxx_destruct;
- (id)stringForReplacementString:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithFoundLocation:(id)arg1 withRange:(struct _NSRange)arg2 inContext:(id)arg3 regularExpression:(id)arg4 andRegexMatch:(id)arg5;

@end

@interface DVTFileDataTypeDetectionMagicCache : NSObject
{
    DVTExtension *_extension;
    DVTFileDataType *_matchedType;
    DVTFileDataType *_detectedType;
    NSArray *_magicWords;
}

@property(readonly) NSArray *magicWords; // @synthesize magicWords=_magicWords;
@property(readonly) DVTFileDataType *detectedType; // @synthesize detectedType=_detectedType;
@property(readonly) DVTFileDataType *matchedType; // @synthesize matchedType=_matchedType;
- (void).cxx_destruct;
- (id)initWithExtension:(id)arg1;

@end

@interface DVTFileDataTypeDetection : NSObject
{
}

+ (id)guessFileDataTypeForFileAtPath:(id)arg1 bestCurrentGuessedFileDataType:(id)arg2;
+ (id)_guessFileDataTypeUsingMagicForFileAtPath:(id)arg1 bestCurrentGuessedFileDataType:(id)arg2 fileLength:(unsigned long long)arg3 fileBytes:(const char *)arg4;
+ (id)_magicCaches;

@end

@interface DVTAutosynchingProxyArray : NSArray <DVTInvalidation>
{
    id _observedObject;
    NSString *_observedKeyPath;
    NSArray *_proxies;
    NSMapTable *_objectsToProxies;
    CDUnknownBlockType _proxyObtainBlock;
    CDUnknownBlockType _proxyDiscardBlock;
    id _kvoNotifyObject;
    NSString *_kvoNotifyKeyPath;
}

+ (void)initialize;
+ (id)proxyArrayObservingObject:(id)arg1 keyPath:(id)arg2 withProxyObtainBlock:(CDUnknownBlockType)arg3;
@property(retain) id observedObject; // @synthesize observedObject=_observedObject;
@property(copy) NSString *kvoNotifyKeyPath; // @synthesize kvoNotifyKeyPath=_kvoNotifyKeyPath;
@property(retain) id kvoNotifyObject; // @synthesize kvoNotifyObject=_kvoNotifyObject;
@property(copy) CDUnknownBlockType proxyDiscardBlock; // @synthesize proxyDiscardBlock=_proxyDiscardBlock;
@property(copy) CDUnknownBlockType proxyObtainBlock; // @synthesize proxyObtainBlock=_proxyObtainBlock;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)primitiveInvalidate;
- (id)proxyForObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
@property(readonly) NSString *observedKeyPath;
- (id)init;
- (id)initWithObservedObject:(id)arg1 keyPath:(id)arg2 withProxyObtainBlock:(CDUnknownBlockType)arg3;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTActivationRule : NSObject <DVTPropertyListEncoding>
{
    NSString *_kind;
    NSString *_identifier;
    NSString *_versionString;
    NSPredicate *_query;
}

+ (long long)integerValueForVersionString:(id)arg1;
+ (id)keyPathsForKeysAffectingPredicate;
@property(copy) NSPredicate *query; // @synthesize query=_query;
@property(copy) NSString *versionString; // @synthesize versionString=_versionString;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy) NSString *kind; // @synthesize kind=_kind;
- (void).cxx_destruct;
@property(readonly) NSPredicate *predicate;
- (id)_predicateWithIdentifier:(id)arg1 versionString:(id)arg2 query:(id)arg3;
- (void)encodeIntoPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTKnownStringMapping : NSObject <NSCopying>
{
    CDUnknownFunctionPointerType _strToIdxFunc;
    CDUnknownFunctionPointerType _idxToStrFunc;
}

+ (id)mappingWithKnownStringToIndexFunction:(CDUnknownFunctionPointerType)arg1 indexToKnownStringFunction:(CDUnknownFunctionPointerType)arg2;
- (CDUnknownFunctionPointerType)indexToStringFunction;
- (CDUnknownFunctionPointerType)stringToIndexFunction;
- (unsigned long long)numberOfKnownStrings;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithKnownStringToIndexFunction:(CDUnknownFunctionPointerType)arg1 indexToKnownStringFunction:(CDUnknownFunctionPointerType)arg2;

@end

@interface DVTTextDocumentLocation : DVTDocumentLocation
{
    long long _startingColumnNumber;
    long long _endingColumnNumber;
    long long _startingLineNumber;
    long long _endingLineNumber;
    struct _NSRange _characterRange;
    long long _locationEncoding;
    id _representedObject;
}

+ (BOOL)supportsSecureCoding;
@property(retain) id representedObject; // @synthesize representedObject=_representedObject;
@property(readonly) long long locationEncoding; // @synthesize locationEncoding=_locationEncoding;
@property(readonly) struct _NSRange characterRange; // @synthesize characterRange=_characterRange;
@property(readonly) long long endingLineNumber; // @synthesize endingLineNumber=_endingLineNumber;
@property(readonly) long long startingLineNumber; // @synthesize startingLineNumber=_startingLineNumber;
@property(readonly) long long endingColumnNumber; // @synthesize endingColumnNumber=_endingColumnNumber;
@property(readonly) long long startingColumnNumber; // @synthesize startingColumnNumber=_startingColumnNumber;
- (void).cxx_destruct;
- (id)dvt_persistableStringRepresentation;
- (id)dvt_initFromPersistableStringRepresentation:(id)arg1 error:(id *)arg2;
- (id)copyWithURL:(id)arg1;
- (long long)compare:(id)arg1;
- (BOOL)isEqualDisregardingTimestamp:(id)arg1;
- (BOOL)isEqual:(id)arg1;
@property(readonly) struct _NSRange lineRange;
- (id)description;
- (void)dvt_writeToSerializer:(id)arg1;
- (id)dvt_initFromDeserializer:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 characterRange:(struct _NSRange)arg3;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 characterRange:(struct _NSRange)arg3 locationEncoding:(long long)arg4;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 lineRange:(struct _NSRange)arg3;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 startingColumnNumber:(long long)arg3 endingColumnNumber:(long long)arg4 startingLineNumber:(long long)arg5 endingLineNumber:(long long)arg6 characterRange:(struct _NSRange)arg7;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 startingColumnNumber:(long long)arg3 endingColumnNumber:(long long)arg4 startingLineNumber:(long long)arg5 endingLineNumber:(long long)arg6 characterRange:(struct _NSRange)arg7 locationEncoding:(long long)arg8;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2;

@end

@interface DVTSourceNodeTypes : NSObject
{
}

+ (BOOL)nodeType:(short)arg1 conformsToNodeTypesInList:(const long long *)arg2;
+ (long long *)nodeTypeListForTypeNames:(id)arg1;
+ (BOOL)nodeType:(short)arg1 conformsToNodeTypeNamed:(id)arg2;
+ (long long)nodeTypesCount;
+ (id)nodeTypeNameForId:(short)arg1;
+ (short)registerNodeTypeNamed:(id)arg1;
+ (void)initialize;

@end

@interface DVTDerivedFileSystemContentGenerator : NSObject
{
    DVTFilePath *_sourcePath;
    NSSet *_triggerPaths;
    DVTFilePath *_derivedPath;
    NSObject<OS_dispatch_queue> *_generationQueue;
    // Error parsing type: AB, name: _isSuspended
    // Error parsing type: AB, name: _isCancelled
    // Error parsing type: AB, name: _needsGeneration
    // Error parsing type: AB, name: _hasScheduledGeneration
    // Error parsing type: AB, name: _isGeneratingContent
}

+ (id)filePathAssociationRoleIdentifier;
- (void).cxx_destruct;
- (void)generateContents;
- (_Bool)hasGeneratedContents;
- (id)generatedContentsType;
- (void)cancel;
- (_Bool)isCancelled;
- (void)suspend;
- (void)resume;
- (_Bool)isSuspended;
- (void)scheduleCancellationCleanup;
- (void)scheduleContentGeneration;
- (void)triggerPathDidChange:(id)arg1;
- (id)derivedPath;
- (void)setTriggerPaths:(id)arg1;
- (id)triggerPaths;
- (id)sourcePath;
- (void)dealloc;
- (id)initWithSourcePath:(id)arg1;

@end

@interface DVTTask : NSObject
{
    NSMutableDictionary *_environment;
    NSString *_launchPath;
    NSString *_currentDirectoryPath;
    NSArray *_arguments;
    NSArray *_preferredArchitectures;
    NSMutableArray *_fileDescriptorsToKeepOpen;
    NSNumber *_exitStatus;
    NSNumber *_signalStatus;
    NSNumber *_processIdentifier;
    NSFileHandle *_standardInput;
    NSFileHandle *_standardOutput;
    NSFileHandle *_standardError;
    NSMutableArray *_pipesToRetain;
    NSRunLoop *_waitLoop;
    NSString *_waitRunLoopMode;
    CDUnknownBlockType _runLoopSignaler;
    struct os_unfair_lock_s _runLoopSetupLock;
    // Error parsing type: Ai, name: _runLoopSignal
    NSMutableSet *_fileHandlesToCloseAfterLaunching;
    NSNumber *_argumentEncoding;
    long long _qos;
}

+ (id)launchedTaskWithLaunchPath:(id)arg1 arguments:(id)arg2 error:(id *)arg3;
@property(copy) NSNumber *argumentEncoding; // @synthesize argumentEncoding=_argumentEncoding;
@property(copy) NSString *waitRunLoopMode; // @synthesize waitRunLoopMode=_waitRunLoopMode;
@property(copy) NSNumber *processIdentifier; // @synthesize processIdentifier=_processIdentifier;
@property(copy) NSArray *preferredArchitectures; // @synthesize preferredArchitectures=_preferredArchitectures;
@property(copy) NSNumber *signalStatus; // @synthesize signalStatus=_signalStatus;
@property(copy) NSNumber *exitStatus; // @synthesize exitStatus=_exitStatus;
@property(retain) NSFileHandle *standardError; // @synthesize standardError=_standardError;
@property(retain) NSFileHandle *standardOutput; // @synthesize standardOutput=_standardOutput;
@property(retain) NSFileHandle *standardInput; // @synthesize standardInput=_standardInput;
@property(copy) NSArray *arguments; // @synthesize arguments=_arguments;
@property(copy) NSDictionary *environment; // @synthesize environment=_environment;
@property(copy) NSString *currentDirectoryPath; // @synthesize currentDirectoryPath=_currentDirectoryPath;
@property(copy) NSString *launchPath; // @synthesize launchPath=_launchPath;
- (void).cxx_destruct;
- (id)stringRepresentation;
- (id)description;
@property(readonly) BOOL isRunning;
- (void)markPipeToRetain:(id)arg1;
- (void)markFileHandleToStayOpenAcrossExec:(id)arg1;
- (void)markFileDescriptorToStayOpenAcrossExec:(int)arg1;
- (void)hookStandardInputToPipe:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardErrorToPipe:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardOutputToPipe:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardInputToFileHandle:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardErrorToFileHandle:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)hookStandardOutputToFileHandle:(id)arg1 closingParentEndOnLaunch:(BOOL)arg2;
- (void)addFileHandleToCloseAfterLaunch:(id)arg1;
- (BOOL)runLoggingOutputWithLogAspect:(id)arg1 error:(id *)arg2;
- (BOOL)runReturningStandardOutput:(id *)arg1 standardError:(id *)arg2 error:(id *)arg3;
- (BOOL)runReturningStandardOutput:(id *)arg1 standardError:(id *)arg2 standardInput:(id)arg3 error:(id *)arg4;
- (BOOL)sendSignal:(int)arg1 error:(id *)arg2;
- (void)waitUntilExit;
- (void)waitUntilExitRunningRunLoopInWaitMode;
- (BOOL)launchReturningError:(id *)arg1;
- (id)installRunLoopSignal;
- (BOOL)launchRunningTerminationHandlerOnQueue:(id)arg1 error:(id *)arg2 terminationHandler:(CDUnknownBlockType)arg3;
- (id)applyFileDescriptorMappingsToFileActions:(void **)arg1;
- (void)warnAboutBogusFileDescriptors;
- (id)applyPreferredArchitecturesToSpawnAttributes:(void **)arg1;
- (void)installEventHandlersForChildPID:(int)arg1 queue:(id)arg2 terminationHandler:(CDUnknownBlockType)arg3;
@property long long qualityOfService;
- (void)setValue:(id)arg1 forEnvironmentVariableNamed:(id)arg2;
- (id)init;

@end

@interface DVTPipe : NSObject
{
    NSFileHandle *_fileHandleForReading;
    NSFileHandle *_fileHandleForWriting;
}

+ (id)pipeReturningError:(id *)arg1;
@property(readonly) NSFileHandle *fileHandleForWriting; // @synthesize fileHandleForWriting=_fileHandleForWriting;
@property(readonly) NSFileHandle *fileHandleForReading; // @synthesize fileHandleForReading=_fileHandleForReading;
- (void).cxx_destruct;
- (void)closeBothFileHandles;
- (id)initWithReadHandle:(id)arg1 andWriteHandle:(id)arg2;

@end

@interface DVTPythonScanner : DVTSourceScanner
{
}

- (long long)parseOneIncludedRule:(id)arg1 inTree:(id)arg2 withContext:(id)arg3 initialToken:(long long)arg4 inputStream:(id)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7 isLexing:(BOOL)arg8 reusedToken:(char *)arg9;
- (void)computeContext:(id)arg1 inString:(id)arg2 forLocation:(unsigned long long)arg3;
- (unsigned long long)nextIndentForlocation:(unsigned long long)arg1 inString:(id)arg2;
- (long long)_indentForLineWithRange:(struct _NSRange)arg1 inString:(id)arg2;

@end

@interface DVTSyntaxTypeSpecification : DVTSourceSpecification
{
    NSString *_urlFormat;
    NSString *_nameFormat;
    NSString *_colorName;
    BOOL _inheritsNodeType;
    BOOL _isMark;
    BOOL _includeInPreferences;
    BOOL _ignoreToken;
    BOOL _isLink;
}

+ (id)specificationRegistryName;
+ (id)specificationTypePathExtensions;
+ (id)localizedSpecificationTypeName;
+ (id)specificationType;
+ (Class)specificationTypeBaseClass;
@property(copy) NSString *colorName; // @synthesize colorName=_colorName;
@property(copy) NSString *nameFormat; // @synthesize nameFormat=_nameFormat;
@property(copy) NSString *urlFormat; // @synthesize urlFormat=_urlFormat;
@property(readonly) BOOL isLink; // @synthesize isLink=_isLink;
@property(readonly) BOOL ignoreToken; // @synthesize ignoreToken=_ignoreToken;
@property(readonly) BOOL includeInPreferences; // @synthesize includeInPreferences=_includeInPreferences;
@property(readonly) BOOL isMark; // @synthesize isMark=_isMark;
@property(readonly) BOOL inheritsNodeType; // @synthesize inheritsNodeType=_inheritsNodeType;
- (void).cxx_destruct;
- (id)initWithPropertyListDictionary:(id)arg1;

@end

@interface DVTSystemEvents : NSObject
{
    BOOL _systemNotificationsEnabled;
    NSObject<OS_dispatch_source> *_cache_event_source;
}

+ (void)stop;
+ (void)start;
- (void).cxx_destruct;
- (void)_stopEvents;
- (void)_startEvents;
- (id)_initInternal;
- (id)init;
- (void)_postNotificationWhenNotTerminating:(id)arg1 object:(id)arg2;
- (void)_applicationWillTerminate:(id)arg1;

@end

@interface DVTFindTextualDescriptor : DVTFindDescriptor <DVTTextlikeFindDescriptor>
{
    NSString *_findString;
    int _matchStyle;
    BOOL _caseSensitive;
}

@property(readonly) int matchStyle; // @synthesize matchStyle=_matchStyle;
- (BOOL)caseSensitive;
@property(readonly) NSString *findString; // @synthesize findString=_findString;
- (void).cxx_destruct;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 withWordFindingBlock:(CDUnknownBlockType)arg4 passingTest:(CDUnknownBlockType)arg5 docLocationCreationBlock:(CDUnknownBlockType)arg6;
- (struct _NSRange)_wordBoundaryAtIndex:(unsigned long long)arg1 forString:(id)arg2;
@property(readonly, copy) NSString *description;
- (id)displayString;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (id)initWithString:(id)arg1 ignoreCase:(BOOL)arg2 matchStyle:(int)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface DVTDeviceApplicationBase : NSObject <DVTDeviceApplication>
{
    BOOL _isFairPlayEncrypted;
    BOOL _isLeaf;
    BOOL _isHidden;
    BOOL _supportsSimulator;
    int _runnableDebuggingMode;
    NSString *_name;
    NSString *_version;
    NSString *_bundleIdentifier;
    NSSet *_children;
    NSSet *_rootContainerApplicationItems;
    NSString *_installedPath;
}

@property BOOL supportsSimulator; // @synthesize supportsSimulator=_supportsSimulator;
@property int runnableDebuggingMode; // @synthesize runnableDebuggingMode=_runnableDebuggingMode;
@property(copy) NSString *installedPath; // @synthesize installedPath=_installedPath;
@property BOOL isHidden; // @synthesize isHidden=_isHidden;
@property BOOL isLeaf; // @synthesize isLeaf=_isLeaf;
@property(copy) NSSet *rootContainerApplicationItems; // @synthesize rootContainerApplicationItems=_rootContainerApplicationItems;
@property(retain) NSSet *children; // @synthesize children=_children;
@property BOOL isFairPlayEncrypted; // @synthesize isFairPlayEncrypted=_isFairPlayEncrypted;
@property(retain) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(retain) NSString *version; // @synthesize version=_version;
@property(retain) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTSourceTokens : NSObject
{
    NSMutableSet *_tokens;
    BOOL _caseSensitive;
}

+ (long long)addTokenForString:(id)arg1;
+ (long long)_tokenForString:(id)arg1;
- (void).cxx_destruct;
- (id)allTokens;
- (long long)tokenForString:(id)arg1;
- (BOOL)containsToken:(id)arg1;
- (void)setCaseSensitive:(BOOL)arg1;
- (void)addArrayOfStrings:(id)arg1;
- (id)initWithArrayOfStrings:(id)arg1 caseSensitive:(BOOL)arg2;

@end

@interface DVTAbstractMacDevice : DVTDevice <DVTDeviceApplicationProvider, DVTSpecificApplicationProvider>
{
    NSString *_extraDebuggingRuntimeDylibPath;
}

- (void).cxx_destruct;
- (id)_viewDebuggerDylibPathFromPluginsPath:(id)arg1;
- (id)_viewDebuggerDylibPathFromPlugins;
- (id)_viewDebuggerDylibPathFromLaunchSessionWithEnvironmentVariables:(id)arg1;
- (id)viewDebuggerDylibPathInLaunchSessionWithEnvironmentVariables:(id)arg1;
- (id)extraDebuggingRuntimeDylibPath;
- (id)recordedFramesLibdispatchIntrospectionDylibPath;
- (BOOL)isConcreteDevice;
- (BOOL)isGenericDevice;
- (id)_applicationFromURL:(id)arg1;
- (void)_addApplicationsFromDirectory:(id)arg1 toArray:(id)arg2;
- (id)applicationForURL:(id)arg1;
@property(readonly) NSSet *systemApplications;
@property(readonly) NSSet *applications;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface _DVTFilePathAssoc : NSObject
{
    _DVTFilePathAssoc *next;
    NSString *role;
    DVTWeakInterposer *_object_dvtWeakInterposer;
    BOOL recursiveObserver;
    CDUnknownBlockType block;
    NSObject<OS_dispatch_queue> *dispatchQueue;
    NSOperationQueue *operationQueue;
}

- (void).cxx_destruct;
- (id)description;
- (void)dealloc;
- (id)initWithRole:(id)arg1 object:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onOperationQueue:(id)arg4 block:(CDUnknownBlockType)arg5;
- (id)initWithRole:(id)arg1 object:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onDispatchQueue:(id)arg4 block:(CDUnknownBlockType)arg5;
@property __weak id object;

@end

@interface DVTFilePath : NSObject <NSCopying, DVTFileSystemRepresentationProviding, NSSecureCoding>
{
    DVTFilePath *_parentPath;
    struct fastsimplearray *_childfsaPaths;
    DVTFileSystemVNode *_vnode;
    unsigned long long _numAssociates;
    unsigned long long _numObservers;
    id _associates;
    NSString *_pathString;
    NSURL *_fileURL;
    BOOL _hasResolvedVnode;
    BOOL _cleanRemoveFromParent;
    unsigned char _validationState;
    unsigned short _fsrepLength;
    struct os_unfair_lock_s _childPathsLock;
    struct os_unfair_lock_s _associatesLock;
    char _fsrep[0];
}

+ (void)_registerStandardCachedFileInfoDerivationFunctionsIfNeeded;
+ (CDUnknownFunctionPointerType)_cachedInfoDerivationFunctionForKey:(id)arg1 derivationLock:(id *)arg2;
+ (void)registerCachedInfoDerivationFunction:(CDUnknownFunctionPointerType)arg1 forKey:(id)arg2;
+ (id)filePathForFileURL:(id)arg1;
+ (id)filePathForPathString:(id)arg1;
+ (id)filePathForFileSystemRepresentation:(const char *)arg1;
+ (id)filePathForFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)_filePathForParent:(id)arg1 pathString:(id)arg2;
+ (id)_filePathForParent:(id)arg1 fileSystemRepresentation:(const char *)arg2 length:(unsigned long long)arg3 allowCreation:(BOOL)arg4;
+ (BOOL)supportsSecureCoding;
+ (id)_lookupOrCreateFilePathWithParentPath:(id)arg1 fileSystemRepresentation:(const char *)arg2 length:(unsigned long long)arg3 allowCreation:(BOOL)arg4;
+ (id)rootFilePath;
+ (void)initialize;
- (void).cxx_destruct;
- (id)_descriptionOfAssociates;
- (id)description;
- (void)dvt_provideFileSystemRepresentationToBlock:(CDUnknownBlockType)arg1;
- (long long)comparePathString:(id)arg1;
- (void)simulateFileSystemNotificationAndNotifyAssociatesForUnitTests;
- (void)removeAllAssociates;
- (void)removeAssociate:(id)arg1;
- (void)removeAssociatesWithRole:(id)arg1;
- (void)removeAssociate:(id)arg1 withRole:(id)arg2;
- (void)addAssociate:(id)arg1 withRole:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onOperationQueue:(id)arg4 block:(CDUnknownBlockType)arg5;
- (void)addAssociate:(id)arg1 withRole:(id)arg2 observingDidChangeRecursively:(BOOL)arg3 onDispatchQueue:(id)arg4 block:(CDUnknownBlockType)arg5;
- (void)addAssociate:(id)arg1 withRole:(id)arg2;
- (id)associatesWithRole:(id)arg1;
- (id)associatesWithRole:(id)arg1 forAllPathsToSameFile:(BOOL)arg2;
- (void)_addAssociatesWithRole:(id)arg1 toArray:(id *)arg2;
- (void)_notifyAssociatesOfChange;
- (BOOL)_hasChangeObservers;
- (BOOL)_addInfoForObserversOfChangedFilePath:(id)arg1 toObjects:(id)arg2 roles:(id)arg3 blocks:(id)arg4 dispatchQueues:(id)arg5 operationQueues:(id)arg6;
- (id)cachedValueForKey:(id)arg1;
- (id)recursiveFileSizeWithError:(id *)arg1;
@property(readonly) NSNumber *recursiveFileSize;
- (id)machOArchitecturesWithError:(id *)arg1;
@property(readonly) DVTFileDataType *fileDataTypePresumed;
@property(readonly) DVTFileDataType *fileDataTypeFromFileContent;
@property(readonly) DVTFilePath *symbolicLinkDestinationFilePath;
@property(readonly) NSURL *fileReferenceURL;
@property(readonly) NSDictionary *fileSystemAttributes;
@property(readonly) NSDictionary *fileAttributes;
@property(readonly) NSString *fileTypeAttribute;
@property(readonly) BOOL isDirectory;
@property(readonly) NSArray *sortedDirectoryContents;
- (id)directoryContentsWithError:(id *)arg1;
@property(readonly) NSArray *directoryContents;
@property(readonly) NSDate *modificationDate;
@property(readonly) BOOL isExcludedFromBackup;
@property(readonly) BOOL isSymbolicLink;
@property(readonly) BOOL isExecutable;
@property(readonly) BOOL isDeletable;
@property(readonly) BOOL isWritable;
@property(readonly) BOOL isReadable;
@property(readonly) BOOL existsInFileSystem;
- (void)performCoordinatedReadRecursively:(BOOL)arg1;
- (void)excludeFromBackup;
- (BOOL)_hasResolvedVnode;
- (id)_locked_vnode;
- (id)_locked_vnodeKnownDoesNotExist:(BOOL)arg1;
- (void)_invalidateFilePathAndChildrenIncludingEquivalents;
- (void)_invalidateFilePathAndChildren;
- (void)invalidateFilePath;
- (void)_invalidateKnownDoesNotExist:(BOOL)arg1 explicitlyInvalidateChildren:(BOOL)arg2;
- (void)_invalidateChildrenRecursivelyKnownDoesNotExist:(BOOL)arg1;
- (void)_locked_validateTentativelyInvalidatedChildrenRecursively;
- (void)_locked_tentativelyInvalidateChildrenRecursivelyWithChildrenShouldBeTentativelyInvalid:(BOOL)arg1;
- (BOOL)isSameFileAsFilePath:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)relativePathStringFromFilePath:(id)arg1;
- (id)relativePathStringFromAncestorFilePath:(id)arg1;
- (void)invokeWithAccessToFileSystemRepresentation:(CDUnknownBlockType)arg1;
- (const char *)fileNameFSRepReturningLength:(long long *)arg1;
- (BOOL)_fileNameHasSuffix:(const char *)arg1 suffixLength:(long long)arg2;
- (BOOL)getFullFileSystemRepresentationIntoBuffer:(char **)arg1 ofLength:(unsigned long long)arg2 allowAllocation:(BOOL)arg3;
- (BOOL)_getFSRepIntoBuffer:(char **)arg1 ofLength:(unsigned long long)arg2 requiredLength:(unsigned long long)arg3 endPtr:(char **)arg4 allowAllocation:(BOOL)arg5;
@property(readonly) NSString *pathExtension;
@property(readonly) NSString *fileName;
@property(readonly) NSURL *fileURL;
@property(readonly) NSArray *pathComponents;
@property(readonly) NSString *pathString;
- (id)filePathForUniqueRelativeDirectoryWithPrefix:(id)arg1 error:(id *)arg2;
- (id)filePathForUniqueRelativeFileWithPrefix:(id)arg1 error:(id *)arg2;
- (id)filePathForRelativePathString:(id)arg1;
- (id)filePathForRelativeFileSystemRepresentation:(const char *)arg1;
- (id)filePathForRelativeFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;
- (BOOL)isAncestorOfFilePath:(id)arg1;
@property(readonly) DVTFilePath *volumeFilePath;
@property(readonly) DVTFilePath *parentFilePath;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (void)_invokeWithLockedAssociates:(CDUnknownBlockType)arg1;
- (void)_invokeWithLockedChildPaths:(CDUnknownBlockType)arg1;
- (void)dealloc;

@end

@interface DVTSystemStatisticsMeasurement : NSObject
{
    double _wallClockTime;
    long long _numberOfVMPageins;
    long long _numberOfVMPageouts;
}

+ (id)systemStatisticsMeasurement;
@property long long numberOfVMPageouts; // @synthesize numberOfVMPageouts=_numberOfVMPageouts;
@property long long numberOfVMPageins; // @synthesize numberOfVMPageins=_numberOfVMPageins;
@property double wallClockTime; // @synthesize wallClockTime=_wallClockTime;
- (id)systemStatisticsMeasurementByMakingRelativeToMeasurement:(id)arg1;
- (long long)compare:(id)arg1;
- (id)init;
- (id)initWithWallClockTime:(double)arg1 numberOfVMPageins:(long long)arg2 numberOfVMPageouts:(long long)arg3;

@end

@interface DVTStateToken : NSObject <DVTInvalidation>
{
    DVTWeakInterposer *_statefulObject_dvtWeakInterposer;
    DVTStateRepository *_repository;
    DVTStateRepository *_childRepository;
    NSString *_identifier;
    NSDictionary *_stateSavingObjectPersistenceByName;
    BOOL _isRestoringState;
    BOOL _canPullFromRepository;
    BOOL _checkCanPullFromRepositoryAgain;
}

+ (void)initialize;
- (void).cxx_destruct;
- (void)_deleteStateFromRepositoryForObjectWithIdentifier:(id)arg1;
- (void)deleteStateFromRepository;
- (void)pullStateFromRepository;
- (void)_pullStateFromDictionary:(id)arg1;
- (id)_stateDictionary;
- (BOOL)pushStateToRepositoryAndReturnError:(id *)arg1;
- (id)_copyStatefulObjectState;
- (void)stateChanged;
- (BOOL)_pushState:(id)arg1 error:(id *)arg2;
- (void)cloneStateForIdentifier:(id)arg1 toIdentifier:(id)arg2;
- (void)unregisterObjectWithIdentifier:(id)arg1;
- (BOOL)registerObject:(id)arg1 withIdentifier:(id)arg2 error:(id *)arg3;
- (id)statefulObjectStateIdentifiers;
- (id)_stateSavingObjectPersistenceByName;
@property(readonly) NSString *identifier;
- (id)repository;
- (id)_childRepository;
- (void)_updateCanPullFromRepositoryAndCheckAgain:(BOOL)arg1;
- (void)primitiveInvalidate;
- (id)initWithStatefulObject:(id)arg1 identifier:(id)arg2 inRepository:(id)arg3;
- (void)setStatefulObject:(id)arg1;
- (id)statefulObject;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface _DVTWeakInterposerHelper : NSObject
{
    BOOL _assertOnRetain;
    BOOL _isAsserting;
    DVTWeakInterposer_ProxyHelperReference *_interposer;
    id _representedObject;
}

@property id representedObject; // @synthesize representedObject=_representedObject;
@property(retain) DVTWeakInterposer_ProxyHelperReference *interposer; // @synthesize interposer=_interposer;
- (void)dealloc;
- (id)retain;

@end

@interface DVTWeakInterposer : NSObject
{
    unsigned long long _hash;
}

+ (id)assertingWeakInterposerForRepresentedObject:(id)arg1;
+ (id)weakInterposerForRepresentedObject:(id)arg1;
+ (void)_setupWeakInterposerForObject:(id)arg1 withRuntimeWeakReferenceInterposer:(id)arg2 interposerKey:(void *)arg3;
+ (void)_setupWeakInterposerForObject:(id)arg1 withProxyHelperReferenceInterposer:(id)arg2 helperKey:(void *)arg3 interposerKey:(void *)arg4;
@property unsigned long long hash; // @synthesize hash=_hash;
- (BOOL)isEqual:(id)arg1;
- (void)_customSetup;
@property(readonly) DVTStackBacktrace *representedObjectDeallocatedStackBacktrace;
@property(readonly) __weak id representedObject;
@property(readonly) void *representedObjectAddress;
@property(readonly) Class representedObjectClass;
@property(readonly) NSString *assertionMessage;

@end

@interface DVTWeakInterposer_ProxyHelperReference : DVTWeakInterposer
{
    _DVTWeakInterposerHelper *_helper;
    DVTStackBacktrace *_representedObjectDeallocatedStackBacktrace;
}

- (id)representedObject;
- (void)dealloc;
@property _DVTWeakInterposerHelper *helper; // @synthesize helper=_helper;
- (id)representedObjectDeallocatedStackBacktrace;

@end

@interface DVTAssertingWeakInterposer_ProxyHelperReference : DVTWeakInterposer_ProxyHelperReference
{
    Class representedObjectClass;
    void *representedObjectAddress;
}

@property void *representedObjectAddress; // @synthesize representedObjectAddress;
@property Class representedObjectClass; // @synthesize representedObjectClass;
- (void)_customSetup;
- (id)representedObject;

@end

@interface _DVTDeallocationMonitorInfo : NSObject
{
    DVTWeakInterposer *_uncollectedObject_dvtWeakInterposer;
    NSString *_hierarchyIdentifier;
    NSString *_hierarchyClassNameIdentifier;
    unsigned long long _hierarchyTag;
    NSString *_name;
    unsigned long long _invalidationDepth;
    unsigned long long _survivedCount;
}

+ (void)initialize;
@property unsigned long long survivedCount; // @synthesize survivedCount=_survivedCount;
@property(readonly) unsigned long long invalidationDepth; // @synthesize invalidationDepth=_invalidationDepth;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
@property(readonly, copy) NSString *hierarchyIdentifier;
- (id)initWithUncollectedObject:(id)arg1;
- (void)setUncollectedObject:(id)arg1;
@property(readonly) __weak id uncollectedObject;

@end

@interface DVTObjectDeallocationMonitor : NSObject
{
}

+ (id)_referenceTreeDescriptionForObject:(id)arg1;
+ (BOOL)_getReferenceTreeDescriptionForObject:(id)arg1 monitorInfosForUncollectedObjects:(id)arg2 referenceTreeDescription:(id *)arg3 crashReportSignature:(id *)arg4;
+ (void)setLeakReportEnabled:(BOOL)arg1;
+ (BOOL)leakReportEnabled;
+ (void)logLeakedObjects;
+ (BOOL)isEnabled;

@end

@interface _DVTLogObjectsRequest : NSObject
{
    NSPointerArray *_remainingObjects;
    double _initialRequestTimeInterval;
    double _lastRequestTimeInterval;
}

@property double lastRequestTimeInterval; // @synthesize lastRequestTimeInterval=_lastRequestTimeInterval;
@property double initialRequestTimeInterval; // @synthesize initialRequestTimeInterval=_initialRequestTimeInterval;
@property(retain) NSPointerArray *remainingObjects; // @synthesize remainingObjects=_remainingObjects;
- (void).cxx_destruct;

@end

@interface DVTRelativeDateFormatting : NSObject
{
}

+ (id)durationBetweenStartDate:(id)arg1 endDate:(id)arg2;
+ (id)relativeDateStringBetweenStartTimeInterval:(double)arg1 endTimeInterval:(double)arg2;

@end

@interface DVTMockProvisioningProfileManager : DVTProvisioningProfileManager
{
    NSMutableSet *_profiles;
    NSMutableSet *_certificates;
    DVTDispatchLock *_lock;
    DVTMockProvisioningProfileProvider *_provider;
    id <DVTMockProvisioningProfileManagerDelegate> _testDelegate;
    NSError *_installHostProfilesError;
    NSMutableDictionary *_mockDataToProvisioningProfile;
    NSMutableDictionary *_mockDataToProvisioningProfileError;
}

@property(retain, nonatomic) NSMutableDictionary *mockDataToProvisioningProfileError; // @synthesize mockDataToProvisioningProfileError=_mockDataToProvisioningProfileError;
@property(retain, nonatomic) NSMutableDictionary *mockDataToProvisioningProfile; // @synthesize mockDataToProvisioningProfile=_mockDataToProvisioningProfile;
@property(retain, nonatomic) NSError *installHostProfilesError; // @synthesize installHostProfilesError=_installHostProfilesError;
@property(retain, nonatomic) id <DVTMockProvisioningProfileManagerDelegate> testDelegate; // @synthesize testDelegate=_testDelegate;
- (void).cxx_destruct;
- (id)profileMatchingUUID:(id)arg1;
- (void)forceProfileLoading;
- (id)allUsableProfiles;
- (id)allProfiles;
- (BOOL)areProfilesLoaded;
- (void)removeProfile:(id)arg1;
- (void)addProfile:(id)arg1;
- (void)setProfiles:(id)arg1;
@property(readonly) NSSet *certificates;
- (void)installHostProfiles:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (id)profileWithData:(id)arg1 error:(id *)arg2;
- (void)addProfile:(id)arg1 andError:(id)arg2 forData:(id)arg3;
- (id)expiringProfiles;
- (id)profilesMatchingPredicate:(id)arg1;
- (id)profileWithURL:(id)arg1 error:(id *)arg2;
- (id)expiringProfilesInExpansionContext:(id)arg1;
- (BOOL)isProfileExpiringWithCodeSigningIdentity:(id)arg1 profileName:(id *)arg2;
- (id)profilesMatchingApplicationID:(id)arg1;
- (id)provider;
- (id)initWithDictionary:(id)arg1;
- (id)initWithPlist:(id)arg1;
- (id)init;

@end

@interface DVTHTMLEntityScanner : DVTBlockScanner
{
    NSDictionary *_entityMap;
}

- (void).cxx_destruct;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTPerformanceStatistic : NSObject
{
    NSString *_name;
    CDUnknownBlockType _checkpointBlock;
    CDUnknownBlockType _logBlock;
}

+ (void)freezePerformanceStatisticRegistration;
+ (id)allStatistics;
+ (id)registerStatisticWithName:(id)arg1 checkpointBlock:(CDUnknownBlockType)arg2 logBlock:(CDUnknownBlockType)arg3;
+ (void)initialize;
@property(readonly, copy) CDUnknownBlockType logBlock; // @synthesize logBlock=_logBlock;
@property(readonly, copy) CDUnknownBlockType checkpointBlock; // @synthesize checkpointBlock=_checkpointBlock;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)initWithName:(id)arg1 checkpointBlock:(CDUnknownBlockType)arg2 logBlock:(CDUnknownBlockType)arg3;

@end

@interface DVTPlatform : NSObject <NSCopying>
{
    NSString *_identifier;
    NSArray *_alternateNames;
    NSString *_name;
    DVTPlatformFamily *_family;
    DVTVersion *_minimumSDKVersion;
    NSString *_platformDirectoryName;
    DVTFilePath *_platformPath;
    NSString *_userDescription;
    BOOL _isDeploymentPlatform;
    DVTFilePath *_iconPath;
    NSDictionary *_propertyListDictionary;
    NSDictionary *_internalPropertyListDictionary;
    NSHashTable *_SDKs;
    NSDictionary *_deviceProperties;
    NSString *_platformVersion;
}

+ (id)_preferredArchitectureForPlatformWithIdentifier:(id)arg1;
+ (id)extraPlatformFolders;
+ (id)defaultPlatform;
+ (BOOL)validatePlatformDataReturningError:(id *)arg1;
+ (BOOL)loadAllPlatformsReturningError:(id *)arg1;
+ (void)_loadPlatformAtPath:(id)arg1;
+ (id)_propertyDictionaryForPlatformAtPath:(id)arg1;
+ (id)allPlatforms;
+ (void)registerPlatform:(id)arg1;
+ (id)platformForPath:(id)arg1;
+ (void)_mapPlatformPath:(id)arg1 toPlatform:(id)arg2;
+ (id)_allPlatformsByIdentifierValues;
+ (id)platformForIdentifier:(id)arg1;
+ (void)_mapPlatformIdentifier:(id)arg1 toPlatform:(id)arg2;
+ (id)platformForUserDescription:(id)arg1;
+ (id)platformForName:(id)arg1;
+ (void)_mapPlatformName:(id)arg1 toPlatform:(id)arg2 isAlias:(BOOL)arg3;
+ (void)initialize;
@property(readonly, copy) NSString *platformVersion; // @synthesize platformVersion=_platformVersion;
@property(readonly, copy) NSDictionary *deviceProperties; // @synthesize deviceProperties=_deviceProperties;
@property(readonly) DVTFilePath *iconPath; // @synthesize iconPath=_iconPath;
@property(readonly) BOOL isDeploymentPlatform; // @synthesize isDeploymentPlatform=_isDeploymentPlatform;
@property(readonly, copy) NSString *userDescription; // @synthesize userDescription=_userDescription;
@property(readonly) DVTFilePath *platformPath; // @synthesize platformPath=_platformPath;
@property(readonly, copy) NSString *platformDirectoryName; // @synthesize platformDirectoryName=_platformDirectoryName;
@property(readonly) DVTVersion *minimumSDKVersion; // @synthesize minimumSDKVersion=_minimumSDKVersion;
@property(readonly) DVTPlatformFamily *family; // @synthesize family=_family;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
@property(readonly, copy) NSArray *alternateNames; // @synthesize alternateNames=_alternateNames;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
@property(readonly, copy) NSSet *SDKs;
- (void)addSDK:(id)arg1;
- (id)internalPropertyListDictionary;
- (id)propertyListDictionary;
- (id)initWithPath:(id)arg1;
- (id)initWithPropertyListDictionary:(id)arg1 path:(id)arg2;
- (id)dvt_extendedInfoOrError:(id *)arg1;
@property(readonly) DVTExtendedPlatformInfo *dvt_extendedInfo;

@end

@interface DVTTwoElementDictionary : NSDictionary
{
    id _objects[2];
    id _keys[2];
}

- (void).cxx_destruct;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;
- (id)initWithObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;

@end

@interface DVTProvisioningProfileReaper : NSObject
{
    DVTDelayedInvocation *_delayedInvocation;
    NSObject<OS_dispatch_queue> *_considerationQueue;
    DVTDispatchLock *_considerationLock;
    NSMutableSet *_profilesToConsider;
    NSObject<OS_dispatch_queue> *_currentCompletionQueue;
    CDUnknownBlockType _currentCompletionHandler;
}

- (void).cxx_destruct;
- (id)purgeableProfilesFromProfileSet:(id)arg1;
- (void)_considerProfiles;
- (id)_takeConsideredProfiles;
- (void)_addProfilesToConsider:(id)arg1;
- (void)determinePurgeableSetFromProvisioningProfiles:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)init;

@end

@interface DVTDownloadablePermissionsCheckProvider : NSObject
{
}

- (id)isRegisteredAppleDeveloper:(id)arg1 session:(id)arg2 error:(id *)arg3;

@end

@interface DVTPlugInLocalizedString : NSString
{
    NSString *_key;
    DVTExtension *_extension;
    NSString *_value;
}

- (void).cxx_destruct;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (void)_populate;
- (id)debugDescription;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithKey:(id)arg1 forExtension:(id)arg2;

@end

@interface DVTCommandLineTool : NSObject
{
    NSString *_name;
    NSArray *_arguments;
    NSDictionary *_environment;
    NSFileHandle *_standardInput;
    NSFileHandle *_standardOutput;
    NSFileHandle *_standardError;
    BOOL _shouldExit;
    int _exitStatus;
}

@property int exitStatus; // @synthesize exitStatus=_exitStatus;
@property(nonatomic) BOOL shouldExit; // @synthesize shouldExit=_shouldExit;
@property(retain) NSFileHandle *standardError; // @synthesize standardError=_standardError;
@property(retain) NSFileHandle *standardOutput; // @synthesize standardOutput=_standardOutput;
@property(retain) NSFileHandle *standardInput; // @synthesize standardInput=_standardInput;
@property(copy) NSDictionary *environment; // @synthesize environment=_environment;
@property(copy) NSArray *arguments; // @synthesize arguments=_arguments;
@property(copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (void)main;
- (void)parseOptions;
- (void)start;
- (void)_ignoreSignals;
- (void)_installUncaughtExceptionHandler;
- (id)init;

@end

@interface DVTDefaultPolicyCacheDeleteExtension : NSObject <DVTCacheDeleteExtension>
{
}

+ (id)expirationDateWithAnchorDate:(id)arg1 forUrgency:(int)arg2;
+ (id)expirationDateForOrphanedItemsWithAnchorDate:(id)arg1;
- (id)purgeVolume:(id)arg1 amount:(unsigned long long)arg2 urgency:(int)arg3 error:(id *)arg4;
- (id)purgeableSizeOnVolume:(id)arg1 urgency:(int)arg2 error:(id *)arg3;
- (struct NSSet *)itemsWithError:(id *)arg1;
- (id)anchorDate;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTCacheDeleteExtensionManager : NSObject <DVTCacheDeleteExtension>
{
    NSSet *_extensions;
}

- (void).cxx_destruct;
- (id)purgeVolume:(id)arg1 amount:(unsigned long long)arg2 urgency:(int)arg3 error:(id *)arg4;
- (id)purgeableSizeOnVolume:(id)arg1 urgency:(int)arg2 error:(id *)arg3;
- (id)initWithExtensions:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTConfinementServiceConnection : NSObject
{
    NSString *_serviceName;
    int _connection;
    NSObject<OS_dispatch_queue> *_connectionQueue;
    NSObject<OS_dispatch_io> *_connectionIO;
    NSObject<OS_dispatch_queue> *_asyncResponseHandlerQueue;
    CDUnknownBlockType _asyncResponseHandler;
    NSObject<OS_dispatch_queue> *_asyncReceiveQueue;
    CDUnknownBlockType _asyncReceiveBlock;
    BOOL _asyncReceiveStopped;
    NSString *_controlPath;
    double _timeout;
    unsigned long long _retryCount;
}

+ (double)defaultTimeout;
+ (long long)defaultRetryCount;
+ (void)initialize;
@property(readonly) unsigned long long retryCount; // @synthesize retryCount=_retryCount;
@property(readonly) double timeout; // @synthesize timeout=_timeout;
@property(readonly, copy) NSString *controlPath; // @synthesize controlPath=_controlPath;
- (void).cxx_destruct;
- (void)stopHandlingMessagesAsynchronously;
- (void)startHandlingResponsesAsynchronouslyOnQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (BOOL)receiveFileDescriptors:(int *)arg1 count:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)sendFileDescriptors:(const int *)arg1 count:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)receiveFileDescriptor:(int *)arg1 error:(id *)arg2;
- (BOOL)sendFileDescriptor:(int)arg1 error:(id *)arg2;
- (BOOL)receiveResponse:(id *)arg1 error:(id *)arg2;
- (BOOL)_synchronouslyReceiveResponse:(id *)arg1 withTimeout:(double)arg2 error:(id *)arg3;
- (BOOL)sendRequest:(id)arg1 error:(id *)arg2;
- (BOOL)receiveData:(id *)arg1 ofLength:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)_receiveData:(id *)arg1 ofLength:(unsigned long long)arg2 withTimeout:(double)arg3 error:(id *)arg4;
- (void)_asynchronouslyReceiveDataOfLength:(unsigned long long)arg1 queue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (BOOL)sendData:(id)arg1 error:(id *)arg2;
- (void)_asynchronouslySendData:(id)arg1 queue:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)closeConnection;
- (BOOL)openConnectionToService:(id)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)initWithControlPath:(id)arg1;

@end

@interface DVTLicenseAgreementHelper : NSObject
{
    int _installedLicenseType;
    NSString *_installedLicenseID;
}

+ (BOOL)shouldShowLicenseAgreementForInstalledXcodeLicenseID:(id)arg1 lastAgreedToLicenseID:(id)arg2 installedXcodeVersion:(id)arg3 xcodeVersionForLastAgreedToLicense:(id)arg4;
@property(readonly) NSString *installedLicenseID; // @synthesize installedLicenseID=_installedLicenseID;
@property(readonly) int installedLicenseType; // @synthesize installedLicenseType=_installedLicenseType;
- (void).cxx_destruct;
- (BOOL)shouldShowLicenseAgreement;
@property(readonly) NSString *installedLicensePlistPath;
- (BOOL)agreeToLicense;
- (BOOL)_isLicensePlistImmutable;
- (id)_getLoggedInUserName;
- (BOOL)_isRunningAsSuperUser;
- (id)initWithLicenseInfoPath:(id)arg1;

@end

@interface DVTCPlusPlusSourceModelParser : DVTCSourceModelParser
{
}

+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (void)initializeLexerModes;
+ (id)languageSpecification;
- (void)_resetLexerWithInputString:(id)arg1;
- (id)init;

@end

@interface DVTModelObjectGraph : NSObject
{
    DVTModelGraphTransactionScope *_transactionScope;
    NSMutableSet *_insertedObjects;
    NSMutableSet *_updatedObjects;
    NSMutableSet *_deletedObjects;
    BOOL _coalescePending;
    BOOL _changeNotificationsAreSuspended;
    BOOL _tracksChanges;
    BOOL _hasPendingChanges;
    NSString *_name;
    NSOperationQueue *_asyncQueue;
    NSOperationQueue *_changeQueue;
    NSObject<OS_dispatch_queue> *_asyncDispatchQueue;
    NSObject<OS_dispatch_queue> *_changeDispatchQueue;
}

+ (BOOL)automaticallyNotifiesObserversOfHasPendingChanges;
@property(readonly) BOOL hasPendingChanges; // @synthesize hasPendingChanges=_hasPendingChanges;
@property(readonly) NSObject<OS_dispatch_queue> *changeDispatchQueue; // @synthesize changeDispatchQueue=_changeDispatchQueue;
@property(readonly) NSObject<OS_dispatch_queue> *asyncDispatchQueue; // @synthesize asyncDispatchQueue=_asyncDispatchQueue;
@property(readonly) NSOperationQueue *changeQueue; // @synthesize changeQueue=_changeQueue;
@property(readonly) NSOperationQueue *asyncQueue; // @synthesize asyncQueue=_asyncQueue;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (void)didDeleteModelObject:(id)arg1;
- (void)didUpdateModelObject:(id)arg1;
- (void)didInsertModelObject:(id)arg1;
- (void)performBlockCoalescingModelChanges:(CDUnknownBlockType)arg1;
- (void)_locked_coalesceUpdates;
- (void)_coalescingTick;
- (void)_disassociateModelObject:(id)arg1;
- (void)_associateModelObject:(id)arg1;
- (id)description;
- (id)initWithName:(id)arg1 asyncDispatchQueue:(id)arg2 changeDispatchQueue:(id)arg3;
- (id)initWithName:(id)arg1 asyncQueue:(id)arg2 changeQueue:(id)arg3;
- (id)initWithName:(id)arg1 asyncDispatchQueue:(id)arg2 changeDispatchQueue:(id)arg3 transactionScope:(id)arg4 tracksChanges:(BOOL)arg5;
- (id)initWithName:(id)arg1 asyncDispatchQueue:(id)arg2 changeDispatchQueue:(id)arg3 transactionScope:(id)arg4;
- (id)initWithName:(id)arg1 asyncQueue:(id)arg2 changeQueue:(id)arg3 transactionScope:(id)arg4;

@end

@interface DVTLanguageSpecification : DVTSourceSpecification
{
    long long _uniqueId;
    Class _scannerClass;
    DVTSourceScanner *_scanner;
    NSDictionary *_syntaxRules;
    BOOL _includeInMenu;
    BOOL _usesCLikeIndentation;
    DVTSourceModelParserProductionRule *_productionRule;
    BOOL _preservesTrailingWhitespace;
}

+ (id)identifierForUniqueId:(long long)arg1;
+ (long long)_uniqueIdForIdentifier:(id)arg1;
+ (id)specificationRegistryName;
+ (id)specificationTypePathExtensions;
+ (id)localizedSpecificationTypeName;
+ (id)specificationType;
+ (Class)specificationTypeBaseClass;
@property(readonly) BOOL preservesTrailingWhitespace; // @synthesize preservesTrailingWhitespace=_preservesTrailingWhitespace;
@property(retain) DVTSourceModelParserProductionRule *productionRule; // @synthesize productionRule=_productionRule;
@property(readonly) NSDictionary *syntaxRules; // @synthesize syntaxRules=_syntaxRules;
@property(readonly) Class scannerClass; // @synthesize scannerClass=_scannerClass;
@property(readonly) BOOL usesCLikeIndentation; // @synthesize usesCLikeIndentation=_usesCLikeIndentation;
@property(readonly) BOOL includeInMenu; // @synthesize includeInMenu=_includeInMenu;
@property(readonly) long long uniqueId; // @synthesize uniqueId=_uniqueId;
- (void).cxx_destruct;
@property(readonly) NSString *syntaxType;
- (id)availableKeywords;
- (id)lexerKeywords;
@property(readonly) DVTSourceScanner *scanner; // @synthesize scanner=_scanner;
- (id)name;
- (id)initWithPropertyListDictionary:(id)arg1;

@end

@interface DVTKVOConditionValidator : NSObject
{
}

+ (BOOL)waitForCondition:(CDUnknownBlockType)arg1 sourceObject:(id)arg2 keyPathAffectingConditionBlock:(id)arg3 timeout:(unsigned long long)arg4;

@end

@interface DVTNumberScanner : DVTRegExScanner
{
}

- (long long)tokenForString:(id)arg1 forRange:(struct _NSRange *)arg2 subItems:(id *)arg3;

@end

@interface DVTProvisioningProfileManager : NSObject <DVTProvisioningProfileSource>
{
    id _provider;
    NSArray *_provisioningProfileSearchPaths;
    DVTProvisioningProfileReaper *_provisioningProfileReaper;
}

+ (id)keyPathsForValuesAffectingExpiringProfiles;
+ (id)keyPathsForValuesAffectingAllProfiles;
+ (id)keyPathsForValuesAffectingAreProfilesLoaded;
+ (id)managerWithProvisioningProfileSearchPaths:(id)arg1;
+ (id)defaultManager;
+ (id)logAspect;
@property(readonly) DVTProvisioningProfileReaper *provisioningProfileReaper; // @synthesize provisioningProfileReaper=_provisioningProfileReaper;
@property(readonly) NSArray *provisioningProfileSearchPaths; // @synthesize provisioningProfileSearchPaths=_provisioningProfileSearchPaths;
- (void).cxx_destruct;
- (void)uninstallHostProfiles:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)installHostProfiles:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (id)profileWithData:(id)arg1 error:(id *)arg2;
- (id)profileWithURL:(id)arg1 error:(id *)arg2;
@property(readonly) id provider; // @synthesize provider=_provider;
- (id)profilesMatchingApplicationID:(id)arg1;
- (id)profileMatchingUUID:(id)arg1;
- (id)profilesMatchingPredicate:(id)arg1;
@property(readonly) NSSet *allUsableProfiles;
- (BOOL)isProfileExpiringWithCodeSigningIdentity:(id)arg1 profileName:(id *)arg2;
- (id)expiringProfilesInExpansionContext:(id)arg1;
@property(readonly) NSSet *expiringProfiles;
@property(readonly) NSSet *allProfiles;
@property(readonly) BOOL areProfilesLoaded;
- (id)allProfiles_sync;
- (void)forceProfileLoading;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTCompressionInfoProvider : NSObject
{
    CDUnknownBlockType _debugInfoForIndexQueryBlock;
    CDUnknownBlockType _swiftGeneratedFunctionForIndexQueryBlock;
    CDUnknownBlockType _libraryNameForIndexQueryBlock;
}

@property(readonly) CDUnknownBlockType libraryNameForIndexQueryBlock; // @synthesize libraryNameForIndexQueryBlock=_libraryNameForIndexQueryBlock;
@property(copy) CDUnknownBlockType swiftGeneratedFunctionForIndexQueryBlock; // @synthesize swiftGeneratedFunctionForIndexQueryBlock=_swiftGeneratedFunctionForIndexQueryBlock;
@property(readonly) CDUnknownBlockType debugInfoForIndexQueryBlock; // @synthesize debugInfoForIndexQueryBlock=_debugInfoForIndexQueryBlock;
- (void).cxx_destruct;
- (id)initWithDebugInfoQueryBlock:(CDUnknownBlockType)arg1 libraryNameQueryBlock:(CDUnknownBlockType)arg2;

@end

@interface DVTDiffCharacterDataSource : DVTDiffDataSource
{
}

+ (void)initialize;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (CDStruct_3dd9eb72)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;

@end

@interface DVTByteBuffer : NSObject
{
    char *_bytes;
    unsigned long long _capacity;
    unsigned long long _length;
    unsigned long long _position;
    BOOL _ownsBytes;
    BOOL _isClosed;
}

- (void)printf:(const char *)arg1;
- (void)printf:(const char *)arg1 arguments:(struct __va_list_tag [1])arg2;
- (void)writePropertyList:(id)arg1;
- (void)writeUnsignedAsciiInteger:(unsigned long long)arg1;
- (void)writeString:(id)arg1;
- (void)writeUTF8String:(const char *)arg1;
- (void)writeLEB128:(long long)arg1;
- (void)writeUnsignedLEB128:(unsigned long long)arg1;
- (void)writeInt64:(long long)arg1;
- (void)writeUnsignedInt64:(unsigned long long)arg1;
- (void)writeInt32:(int)arg1;
- (void)writeUnsignedInt32:(unsigned int)arg1;
- (void)writeInt16:(short)arg1;
- (void)writeUnsignedInt16:(unsigned short)arg1;
- (void)writeInt8:(BOOL)arg1;
- (void)writeUnsignedInt8:(unsigned char)arg1;
- (unsigned long long)readHexBytes:(void *)arg1 length:(unsigned long long)arg2;
- (unsigned long long)writeHexBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (unsigned long long)writeBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (void)writeByte:(unsigned char)arg1;
- (id)readPropertyList;
- (unsigned long long)readUnsignedAsciiInteger;
- (unsigned long long)peekUTF8StringLength;
- (id)readString;
- (id)readUTF8String;
- (long long)readLEB128;
- (unsigned long long)readUnsignedLEB128;
- (long long)readInt64;
- (unsigned long long)readUnsignedInt64;
- (int)readInt32;
- (unsigned int)readUnsignedInt32;
- (short)readInt16;
- (unsigned short)readUnsignedInt16;
- (BOOL)readInt8;
- (unsigned char)readUnsignedInt8;
- (unsigned long long)readBytes:(void *)arg1 length:(unsigned long long)arg2;
- (unsigned char)readByte;
- (unsigned char)peekByte;
- (BOOL)isAtEnd;
- (unsigned long long)seek:(unsigned long long)arg1;
- (void)setPosition:(unsigned long long)arg1;
- (unsigned long long)position;
- (unsigned long long)length;
- (const char *)bytes;
- (BOOL)isClosed;
- (void)close;
- (void)dealloc;
- (id)init;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithBytesNoCopy:(void *)arg1 length:(unsigned long long)arg2;
- (id)initWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)initWithBytesNoCopy:(char *)arg1 length:(unsigned long long)arg2 capacity:(unsigned long long)arg3 ownsBytes:(BOOL)arg4;

@end

@interface DVTCoverageDataContainer : NSObject <NSCoding>
{
    NSString *_name;
    NSString *_uniqueIdentifier;
    NSNumber *_lineCoverage;
}

@property(retain, nonatomic) NSNumber *lineCoverage; // @synthesize lineCoverage=_lineCoverage;
@property(readonly, nonatomic) NSString *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithName:(id)arg1;

@end

@interface DVTSourceFileLineCoverageData : NSObject <NSCoding>
{
    BOOL _executable;
    int _executionCount;
    NSArray *_subRanges;
}

@property(readonly, nonatomic) NSArray *subRanges; // @synthesize subRanges=_subRanges;
@property(readonly, nonatomic, getter=isExecutable) BOOL executable; // @synthesize executable=_executable;
@property(readonly, nonatomic) int executionCount; // @synthesize executionCount=_executionCount;
- (void).cxx_destruct;
- (id)description;
- (void)updateWithExecutionCount:(int)arg1 executable:(BOOL)arg2 subRanges:(id)arg3;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithExecutionCount:(int)arg1 executable:(BOOL)arg2 subRanges:(id)arg3;

@end

@interface DVTSourceFileCodeCoverageRange : NSObject <NSCoding>
{
    BOOL _executable;
    unsigned long long _line;
    unsigned long long _column;
    unsigned long long _length;
}

@property(readonly, nonatomic) BOOL executable; // @synthesize executable=_executable;
@property(readonly, nonatomic) unsigned long long length; // @synthesize length=_length;
@property(readonly, nonatomic) unsigned long long column; // @synthesize column=_column;
@property(readonly, nonatomic) unsigned long long line; // @synthesize line=_line;
- (id)description;
@property(readonly, nonatomic) int executionCount;
- (BOOL)isExecutable;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithLine:(unsigned long long)arg1 column:(unsigned long long)arg2 length:(unsigned long long)arg3;

@end

@interface DVTSourceFileCodeCoverageUncoveredRange : DVTSourceFileCodeCoverageRange
{
}

- (BOOL)isExecutable;

@end

@interface DVTSourceFileCodeCoverageCoveredRange : DVTSourceFileCodeCoverageRange
{
    int _executionCount;
}

- (int)executionCount;
- (BOOL)isExecutable;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithLine:(unsigned long long)arg1 column:(unsigned long long)arg2 length:(unsigned long long)arg3 executionCount:(int)arg4;

@end

@interface DVTSourceFileHighlightingRange : NSObject <NSCoding>
{
    unsigned long long _line;
    unsigned long long _column;
    unsigned long long _length;
}

@property(nonatomic) unsigned long long length; // @synthesize length=_length;
@property(nonatomic) unsigned long long column; // @synthesize column=_column;
@property(nonatomic) unsigned long long line; // @synthesize line=_line;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithLine:(unsigned long long)arg1 column:(unsigned long long)arg2 length:(unsigned long long)arg3;

@end

@interface DVTOperationGroup : DVTOperation
{
    NSOperationQueue *_queue;
    DVTDispatchLock *_lock;
    NSMutableArray *_suboperations;
    NSError *_error;
}

+ (id)operationGroupWithSuboperations:(id)arg1;
- (void).cxx_destruct;
- (id)notFinishedReasonWithDepth:(unsigned long long)arg1;
- (id)description;
- (void)enumerateUsingBlock:(CDUnknownBlockType)arg1;
- (void)_enumerateWithStop:(char *)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)error;
- (void)setError:(id)arg1;
- (void)cancel;
- (void)main;
- (void)start;
- (void)addSuboperation:(id)arg1;
- (void)addSuboperations:(id)arg1;
@property long long maxConcurrentOperationCount;
@property(readonly) NSArray *suboperations;
- (id)initWithName:(id)arg1;
- (id)init;

@end

@interface DVTRunLoopToken : NSObject <DVTCancellable>
{
    id _target;
    DVTStackBacktrace *_creationBacktrace;
    DVTStackBacktrace *_invalidationBacktrace;
    CDUnknownBlockType _block;
    NSRunLoop *_cancellationRunLoop;
}

+ (void)initialize;
@property(retain) NSRunLoop *cancellationRunLoop; // @synthesize cancellationRunLoop=_cancellationRunLoop;
@property(copy) CDUnknownBlockType block; // @synthesize block=_block;
@property(retain) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(retain) id target; // @synthesize target=_target;
- (void).cxx_destruct;
- (void)cancel;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (id)initWithCancellationRunLoop:(id)arg1 block:(CDUnknownBlockType)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTLaunchServicesUtilities : NSObject
{
}

+ (int)pidForBundleID:(id)arg1;

@end

@interface DVTReferenceResolver : NSObject
{
    NSMutableArray *_strategies;
    id <DVTReferenceResolverClient> _client;
}

+ (id)backgroundResolutionQueue;
+ (void)initialize;
@property(retain) id <DVTReferenceResolverClient> client; // @synthesize client=_client;
- (void).cxx_destruct;
- (id)description;
- (id)configureWithPersistentRepresentationsOfInput:(id)arg1;
- (id)persistentRepresentationsOfInput:(id)arg1;
- (id)resolveInput:(id)arg1 inContext:(id)arg2 error:(id *)arg3;
@property(readonly, copy) NSString *displayName;
- (void)replaceStrategiesAtIndexes:(id)arg1 withObjects:(id)arg2;
- (void)removeStrategiesAtIndexes:(id)arg1;
- (void)insertStrategies:(id)arg1 atIndex:(id)arg2;
- (void)replaceObjectInStrategiesAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectFromStrategiesAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inStrategiesAtIndex:(unsigned long long)arg2;
@property(copy) NSArray *strategies; // @dynamic strategies;
- (id)init;

// Remaining properties
@property(readonly) NSMutableArray *mutableStrategies; // @dynamic mutableStrategies;

@end

@interface DVTOneShotBlock : NSObject <DVTInvalidation>
{
    CDUnknownBlockType _callbackBlock;
}

+ (void)initialize;
+ (id)oneShotBlockWithMixedInvalidationAndCancellationTokens:(id)arg1;
+ (id)oneShotBlockWithCancellationTokens:(id)arg1;
+ (id)oneShotBlockWithInvalidateTokens:(id)arg1;
+ (id)oneShotBlockWithCallback:(CDUnknownBlockType)arg1;
- (void).cxx_destruct;
- (void)primitiveInvalidate;
- (id)initWithCallbackBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTPlugInLocator : NSObject
{
    NSFileManager *_fileManager;
}

+ (void)initialize;
- (void).cxx_destruct;
- (BOOL)canUsePlugInAtPath:(id)arg1 bundle:(id *)arg2 plugInPlist:(id *)arg3 error:(id *)arg4;
- (BOOL)_checkCanUsePlugInAtFilePath:(id)arg1 bundle:(id *)arg2 plugInPlist:(id *)arg3 error:(id *)arg4;
- (BOOL)_checkCanUsePlugInAtDirectoryPath:(id)arg1 bundle:(id *)arg2 plugInPlist:(id *)arg3 error:(id *)arg4;
- (id)propertyListAtURL:(id)arg1 error:(id *)arg2;
- (void)plugInManagerDidScanForPlugIns:(id)arg1;
- (void)plugInManagerWillScanForPlugIns:(id)arg1;
- (id)init;

@end

@interface DVTSemaphore : NSObject
{
    NSObject<OS_dispatch_semaphore> *_semaphore;
}

+ (id)semaphoreWithCount:(long long)arg1;
- (void).cxx_destruct;
- (BOOL)waitWithTimeout:(double)arg1;
- (void)wait;
- (BOOL)signal;
- (void)dealloc;
- (id)initWithCount:(long long)arg1;
- (id)init;

@end

@interface DVTSourceCodeLanguage : NSObject <NSCopying>
{
    NSString *_identifier;
    NSString *_languageName;
    NSString *_languageSpecificationIdentifier;
    DVTLanguageSpecification *_languageSpecification;
    NSString *_documentationAbbreviation;
    NSArray *_fileDataTypeIdentifiers;
    NSArray *_fileDataTypes;
    NSArray *_conformedToLanguageIdentifiers;
    NSArray *_conformedToLanguages;
    Class _nativeSourceModelParserClass;
    BOOL _supportsIndentation;
    NSArray *_commentSyntaxes;
    NSArray *_lineCommentPrefixes;
    NSArray *_blockCommentCircumfixes;
    DVTExtension *_extension;
    BOOL _isHidden;
    BOOL _usesColorLiteral;
    BOOL _usesFileLiteral;
    BOOL _usesImageLiteral;
}

+ (id)sourceCodeLanguageForFileDataType:(id)arg1;
+ (id)sourceCodeLanguageForLanguageSpecificationIdentifier:(id)arg1;
+ (id)sourceCodeLanguageWithIdentifier:(id)arg1;
+ (id)sourceCodeLanguages;
+ (id)_sourceCodeLanguageForExtension:(id)arg1;
+ (void)initialize;
@property(readonly) BOOL usesImageLiteral; // @synthesize usesImageLiteral=_usesImageLiteral;
@property(readonly) BOOL usesFileLiteral; // @synthesize usesFileLiteral=_usesFileLiteral;
@property(readonly) BOOL usesColorLiteral; // @synthesize usesColorLiteral=_usesColorLiteral;
@property(readonly) BOOL isHidden; // @synthesize isHidden=_isHidden;
@property(readonly) BOOL supportsIndentation; // @synthesize supportsIndentation=_supportsIndentation;
@property(readonly, copy) NSString *documentationAbbreviation; // @synthesize documentationAbbreviation=_documentationAbbreviation;
@property(readonly, copy) NSString *languageName; // @synthesize languageName=_languageName;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)blockCommentCircumfixes;
- (id)lineCommentPrefixes;
- (BOOL)conformsToLanguage:(id)arg1;
@property(readonly, copy) NSArray *conformedToLanguages;
@property(readonly, copy) NSArray *fileDataTypes;
@property(readonly) DVTLanguageSpecification *languageSpecification;
@property(readonly) Class nativeSourceModelParserClass;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithSourceCodeLanguageExtension:(id)arg1;

@end

@interface DVTDownloadableIndex : NSObject
{
    double _refreshInterval;
    NSDate *_refreshDate;
    NSSet *_downloadables;
}

@property(readonly) NSSet *downloadables; // @synthesize downloadables=_downloadables;
@property(readonly) NSDate *refreshDate; // @synthesize refreshDate=_refreshDate;
@property(readonly) double refreshInterval; // @synthesize refreshInterval=_refreshInterval;
- (void).cxx_destruct;
- (id)description;
- (id)propertyList;
- (BOOL)upToDate;
- (id)initWithPropertyList:(id)arg1 error:(id *)arg2;
- (id)initWithRefreshInterval:(double)arg1 refreshDate:(id)arg2 downloadables:(id)arg3;

@end

@interface DVTIndexBackedDownloadableProvider : NSObject <DVTDownloadableProvider>
{
    DVTDispatchLock *_lock;
    DVTDownloadableIndex *_index;
}

- (void).cxx_destruct;
- (id)downloadablesWithError:(id *)arg1 skipCache:(BOOL)arg2;
- (id)_cacheURLForIndexURL:(id)arg1;
- (id)_suffix;
- (id)_indexAtURL:(id)arg1 error:(id *)arg2;
@property(readonly) BOOL useDecoratedSource;
- (id)downloadablesWithError:(id *)arg1;
@property(readonly) NSSet *downloadables;
@property(readonly, copy) NSString *description;
@property(readonly) NSURL *baseURL;
@property(readonly) NSString *userDefaultsKey;
@property(readonly) NSString *identifier;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDeveloperAccountSession : NSObject <DVTDirectoryServicesSessionDescription>
{
    id _identity;
    DVTDeveloperAccount *_account;
    NSString *_prsID;
    NSString *_sessionID;
    NSData *_sessionData;
}

@property(copy, nonatomic) NSData *sessionData; // @synthesize sessionData=_sessionData;
@property(copy, nonatomic) NSString *sessionID; // @synthesize sessionID=_sessionID;
@property(copy) NSString *prsID; // @synthesize prsID=_prsID;
@property(nonatomic) __weak DVTDeveloperAccount *account; // @synthesize account=_account;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
@property struct OpaqueSecIdentityRef *identity;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;

@end

@interface DVTSourceCodeSymbolKind : NSObject <NSCopying>
{
    NSString *_identifier;
    NSString *_localizedDescription;
    NSArray *_conformedToSymbolKindIdentifiers;
    NSArray *_conformedToSymbolKinds;
    NSArray *_allConformingSymbolKinds;
    BOOL _navigationPrefersDefinition;
}

+ (id)sourceCodeSymbolKinds;
+ (id)sourceCodeSymbolKindForIdentifier:(id)arg1;
+ (id)_sourceCodeSymbolKindForExtension:(id)arg1;
+ (void)initialize;
+ (id)toDoSymbolKind;
+ (id)questionSymbolKind;
+ (id)markSymbolKind;
+ (id)fixMeSymbolKind;
+ (id)attentionSymbolKind;
+ (id)classMethodTemplateSymbolKind;
+ (id)instanceMethodTemplateSymbolKind;
+ (id)functionTemplateSymbolKind;
+ (id)classTemplateSymbolKind;
+ (id)namespaceSymbolKind;
+ (id)gkInspectablePropertySymbolKind;
+ (id)ibOutletCollectionPropertySymbolKind;
+ (id)ibOutletCollectionVariableSymbolKind;
+ (id)ibOutletCollectionSymbolKind;
+ (id)ibOutletPropertySymbolKind;
+ (id)ibOutletVariableSymbolKind;
+ (id)ibOutletSymbolKind;
+ (id)ibActionMethodSymbolKind;
+ (id)testMethodSymbolKind;
+ (id)globalVariableSymbolKind;
+ (id)localVariableSymbolKind;
+ (id)unionSymbolKind;
+ (id)typedefSymbolKind;
+ (id)structSymbolKind;
+ (id)protocolSymbolKind;
+ (id)propertySymbolKind;
+ (id)parameterSymbolKind;
+ (id)macroSymbolKind;
+ (id)classVariableSymbolKind;
+ (id)instanceVariableSymbolKind;
+ (id)instanceMethodSymbolKind;
+ (id)functionSymbolKind;
+ (id)fieldSymbolKind;
+ (id)enumConstantSymbolKind;
+ (id)enumSymbolKind;
+ (id)extensionSymbolKind;
+ (id)classSymbolKind;
+ (id)classMethodSymbolKind;
+ (id)categorySymbolKind;
+ (id)builtinTypeSymbolKind;
+ (id)memberContainerSymbolKind;
+ (id)memberSymbolKind;
+ (id)callableSymbolKind;
+ (id)globalSymbolKind;
+ (id)containerSymbolKind;
@property(readonly) BOOL navigationPrefersDefinition; // @synthesize navigationPrefersDefinition=_navigationPrefersDefinition;
@property(readonly, copy) NSString *localizedDescription; // @synthesize localizedDescription=_localizedDescription;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (BOOL)conformsToSymbolKind:(id)arg1;
@property(readonly, getter=isContainer) BOOL container;
@property(readonly, copy) NSArray *allConformingSymbolKinds;
@property(readonly, copy) NSArray *conformedToSymbolKinds;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithSourceCodeSymbolKindExtension:(id)arg1;

@end

@interface DVTMainThreadLatencyChecker_TimerTarget : NSObject
{
    DVTStackBacktrace *_creationBacktrace;
    id _realTarget;
    SEL _realSelector;
}

@property SEL realSelector; // @synthesize realSelector=_realSelector;
@property(retain) id realTarget; // @synthesize realTarget=_realTarget;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
- (void).cxx_destruct;
- (void)timerFireMethod:(id)arg1;

@end

@interface DVTMTLAppleEventManagerHandler : NSObject
{
    id _realHandler;
    SEL _realHandleEventSelector;
    DVTStackBacktrace *_creationBacktrace;
}

@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property SEL realHandleEventSelector; // @synthesize realHandleEventSelector=_realHandleEventSelector;
@property __weak id realHandler; // @synthesize realHandler=_realHandler;
- (void).cxx_destruct;
- (void)handleAppleEvent:(id)arg1 withReplyEvent:(id)arg2;

@end

@interface DVTLatencyReportBuilder : NSObject
{
    BOOL _addNextBacktrace;
    unsigned long long _currentDepth;
    NSString *_indentString;
    unsigned long long _ancestorsWithMultipleChildren;
    _DVTLatencyCheckerFrame *_frame;
}

@property(retain) _DVTLatencyCheckerFrame *frame; // @synthesize frame=_frame;
@property BOOL addNextBacktrace; // @synthesize addNextBacktrace=_addNextBacktrace;
@property unsigned long long ancestorsWithMultipleChildren; // @synthesize ancestorsWithMultipleChildren=_ancestorsWithMultipleChildren;
@property(copy) NSString *indentString; // @synthesize indentString=_indentString;
@property unsigned long long currentDepth; // @synthesize currentDepth=_currentDepth;
- (void).cxx_destruct;

@end

@interface _DVTLatencyCheckerFrame : NSObject
{
    BOOL _isCheckpoint;
    BOOL _isTopCheckpoint;
    NSString *_identifier;
    double _duration;
    unsigned long long _startTime;
    unsigned long long _endTime;
    unsigned long long _behavior;
    DVTStackBacktrace *_currentBacktrace;
    DVTStackBacktrace *_eventPostingBacktrace;
    NSMutableArray *_childFrames;
}

+ (void)_addBuilders:(id)arg1 toReport:(id)arg2 rootDuration:(double)arg3 backtraceIdentifiers:(id)arg4 backtracesForIdentifiers:(id)arg5;
@property(retain) NSMutableArray *childFrames; // @synthesize childFrames=_childFrames;
@property(retain) DVTStackBacktrace *eventPostingBacktrace; // @synthesize eventPostingBacktrace=_eventPostingBacktrace;
@property(retain) DVTStackBacktrace *currentBacktrace; // @synthesize currentBacktrace=_currentBacktrace;
@property unsigned long long behavior; // @synthesize behavior=_behavior;
@property BOOL isTopCheckpoint; // @synthesize isTopCheckpoint=_isTopCheckpoint;
@property BOOL isCheckpoint; // @synthesize isCheckpoint=_isCheckpoint;
@property unsigned long long endTime; // @synthesize endTime=_endTime;
@property unsigned long long startTime; // @synthesize startTime=_startTime;
@property double duration; // @synthesize duration=_duration;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (void)enumerateFramesWithBlock:(CDUnknownBlockType)arg1;
- (void)logToSoftAssertWithID:(id)arg1;
- (void)fileRadarWithFrame:(id)arg1 log:(id)arg2 canFileNewProblem:(BOOL)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)fileRadarWithLog:(id)arg1 minimumDuration:(double)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)fileRadarWithLog:(id)arg1;
- (id)identifiersForRadarSignature;
- (id)_fetchFrameForRadarSignatureWithMinimumDuration:(double)arg1;
- (id)_fetchFrameForRadarSignatureWithIdentifiers:(id)arg1 minimumDuration:(double)arg2;
- (id)findLongestLeafMostFramePassingTest:(CDUnknownBlockType)arg1;
- (id)findLongestRootMostFramePassingTest:(CDUnknownBlockType)arg1;
- (void)insertChildFrame:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)addChildFrame:(id)arg1;
- (id)createReport;
- (void)_addToReport:(id)arg1 rootDuration:(double)arg2 backtraceIdentifiers:(id)arg3 backtracesForIdentifiers:(id)arg4;

@end

@interface _DVTLatencyCheckerNode : NSObject
{
    BOOL _isTopCheckpoint;
    BOOL _valid;
    unsigned long long _startTime;
    unsigned long long _endTime;
    double _duration;
    unsigned long long _scopeDepth;
    unsigned long long _behavior;
    _DVTLatencyCheckerNode *_parentNode;
    NSMutableArray *_childNodes;
    DVTStackBacktrace *_currentBacktrace;
    DVTStackBacktrace *_eventPostingBacktrace;
    NSString *_identifier;
    NSString *_formatString;
}

+ (void)_addUnknownFramesForParentFrame:(id)arg1 newChildFrames:(id)arg2 minDuration:(double)arg3;
+ (void)_purgeSmallFramesFromParentFrame:(id)arg1 minDuration:(double)arg2;
+ (id)unknownFrameForStartTime:(unsigned long long)arg1 endTime:(unsigned long long)arg2 minimumDuration:(double)arg3;
+ (void)logSoftAssertForNodes:(id)arg1 performanceAnalysisID:(id)arg2;
+ (id)_rootFrameForSoftAssert:(id)arg1;
+ (void)logNodesForTesting:(id)arg1;
+ (id)rootNodeForNodes:(id)arg1;
@property(getter=isValid) BOOL valid; // @synthesize valid=_valid;
@property(retain) NSString *formatString; // @synthesize formatString=_formatString;
@property(retain) NSString *identifier; // @synthesize identifier=_identifier;
@property(retain) DVTStackBacktrace *eventPostingBacktrace; // @synthesize eventPostingBacktrace=_eventPostingBacktrace;
@property(retain) DVTStackBacktrace *currentBacktrace; // @synthesize currentBacktrace=_currentBacktrace;
@property(retain) NSMutableArray *childNodes; // @synthesize childNodes=_childNodes;
@property(retain) _DVTLatencyCheckerNode *parentNode; // @synthesize parentNode=_parentNode;
@property unsigned long long behavior; // @synthesize behavior=_behavior;
@property BOOL isTopCheckpoint; // @synthesize isTopCheckpoint=_isTopCheckpoint;
@property unsigned long long scopeDepth; // @synthesize scopeDepth=_scopeDepth;
@property double duration; // @synthesize duration=_duration;
@property unsigned long long endTime; // @synthesize endTime=_endTime;
@property unsigned long long startTime; // @synthesize startTime=_startTime;
- (void).cxx_destruct;
- (id)frameTree;
- (double)minimumDurationForReporting;
- (void)_frameTreeWithParent:(id)arg1;
- (id)_longestToShortestChildNodes;
- (id)description;
- (void)invalidate;
- (id)init;

@end

@interface DVTDevice : NSObject <DVTBasicDevice>
{
    NSObject<OS_dispatch_queue> *_instrumentsServerMessageQueue;
    unsigned long long _state;
    NSMutableArray *_deviceOperations;
    DVTDispatchLock *_deviceOperationLock;
    NSMutableSet *_capabilities;
    DTXChannel *_appExtensionInstallObserverChannel;
    DTXChannel *_appExtensionInstallObserverChannel_proxy;
    NSObject<OS_dispatch_queue> *_appListingChannelQueue;
    NSObject<OS_dispatch_queue> *_stateControlQueue;
    _Bool _deviceIsBusy;
    BOOL _ignored;
    BOOL _canSelectArchitectureToExecute;
    BOOL _available;
    BOOL _usedForDevelopment;
    DVTExtension *_extension;
    NSURL *_deviceLocation;
    NSString *_nativeArchitecture;
    NSString *_operatingSystemVersionWithBuildNumber;
    NSString *_modelUTI;
    NSString *_modelName;
    DVTDeviceType *_deviceType;
    NSOrderedSet *_supportedArchitectures;
    long long _sshPort;
    long long _rsyncPort;
    NSString *_name;
    NSString *_modelCode;
    DVTPlatform *_platform;
    NSString *_operatingSystemVersion;
    NSString *_operatingSystemBuild;
    NSString *_identifier;
}

+ (id)keyPathsForValuesAffectingHasConnection;
+ (id)modelNameFromModelUTI:(id)arg1;
+ (id)modelUTIFromModelCode:(id)arg1;
+ (id)keyPathsForValuesAffectingActiveProxiedDevice;
+ (id)_knownDeviceLocators;
+ (void)initialize;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy) NSString *operatingSystemBuild; // @synthesize operatingSystemBuild=_operatingSystemBuild;
@property(copy) NSString *operatingSystemVersion; // @synthesize operatingSystemVersion=_operatingSystemVersion;
@property(retain) DVTPlatform *platform; // @synthesize platform=_platform;
@property(nonatomic, getter=isUsedForDevelopment) BOOL usedForDevelopment; // @synthesize usedForDevelopment=_usedForDevelopment;
@property(getter=isAvailable) BOOL available; // @synthesize available=_available;
@property(copy, nonatomic) NSString *modelCode; // @synthesize modelCode=_modelCode;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly) long long rsyncPort; // @synthesize rsyncPort=_rsyncPort;
@property(readonly) long long sshPort; // @synthesize sshPort=_sshPort;
@property BOOL canSelectArchitectureToExecute; // @synthesize canSelectArchitectureToExecute=_canSelectArchitectureToExecute;
@property(copy) NSOrderedSet *supportedArchitectures; // @synthesize supportedArchitectures=_supportedArchitectures;
@property(retain) DVTDeviceType *deviceType; // @synthesize deviceType=_deviceType;
@property(getter=isIgnored) BOOL ignored; // @synthesize ignored=_ignored;
@property(copy, nonatomic) NSString *modelName; // @synthesize modelName=_modelName;
@property(copy, nonatomic) NSString *modelUTI; // @synthesize modelUTI=_modelUTI;
@property(copy, nonatomic) NSString *operatingSystemVersionWithBuildNumber; // @synthesize operatingSystemVersionWithBuildNumber=_operatingSystemVersionWithBuildNumber;
@property(readonly, copy) NSURL *deviceLocation; // @synthesize deviceLocation=_deviceLocation;
@property(readonly) DVTExtension *extension; // @synthesize extension=_extension;
- (void).cxx_destruct;
- (BOOL)supportsDYLDPrintToStdErr;
- (BOOL)supportsNewLogging;
- (id)_mobileDevice;
- (id)loggingStream;
- (id)fetchSpecificLaunchFailureReason;
- (id)launchApplicationWithBundleIdentifier:(id)arg1 withArguments:(id)arg2 environment:(id)arg3 options:(id)arg4;
- (id)applicationIsInstalledWithBundleIdentifier:(id)arg1;
- (id)uninstallApplicationWithBundleIdentifier:(id)arg1 andOptions:(id)arg2;
- (id)installApplicationAtPath:(id)arg1 withOptions:(id)arg2;
@property(readonly) BOOL canInstallApplication;
- (id)runExecutableAtPath:(id)arg1 withArguments:(id)arg2 environment:(id)arg3 options:(id)arg4 terminationHandler:(CDUnknownBlockType)arg5;
@property(readonly) BOOL canRunExecutables;
- (unsigned long long)makeDeviceReadyForDevelopmentSyncWithError:(id *)arg1;
- (unsigned long long)establishDevelopmentTrustSyncWithError:(id *)arg1;
- (unsigned long long)startDeviceSyncWithError:(id *)arg1;
- (unsigned long long)connectToDeviceSyncWithError:(id *)arg1;
- (unsigned long long)discoverAvailableConnectionsSyncWithError:(id *)arg1;
- (void)makeDeviceReadyForDevelopmentWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)establishDevelopmentTrustWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)startDeviceWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)connectToDeviceWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)discoverAvailableConnectionsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_transitionToState:(unsigned long long)arg1 error:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)setState:(unsigned long long)arg1;
@property(readonly) unsigned long long state;
@property(readonly) BOOL allowsManagedStateControl;
- (id)shutDownDevice;
- (id)startUpDevice;
@property(readonly) BOOL canStartUpAndShutDown;
- (void)endDeviceOperation:(id)arg1;
- (id)_startDeviceOperationUserInitiated:(BOOL)arg1;
- (id)startUserInitiatedDeviceOperation;
- (id)startDeviceOperation;
- (void)takeScreenshotWithCompletionBlock:(CDUnknownBlockType)arg1;
@property(readonly) _Bool canTakeScreenshot;
- (void)_syncDeviceCrashLogsDirectoryWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)attemptRecoveryFromUnavailabilityError;
- (void)forget;
@property(readonly) NSString *hostPairingToken;
- (void)unpair;
- (_Bool)extendedPairWithError:(id *)arg1 extendedInformationHandler:(CDUnknownBlockType)arg2;
@property(readonly) _Bool isPaired;
@property(readonly) _Bool usesPairingRecord;
@property(readonly) _Bool canEnableWireless;
- (void)disableWireless;
- (id)enableWireless;
@property(readonly) _Bool isWirelessEnabled;
@property(readonly, copy) NSArray *addresses;
@property(readonly, copy) NSString *primaryAddress;
@property(readonly, copy) NSString *hostname;
@property(readonly) _Bool hasConnection;
@property(readonly) _Bool hasWiredConnection;
@property(readonly) _Bool hasWirelessConnection;
@property(readonly) _Bool isWireless;
- (void)purgeResourceWithTag:(id)arg1 bundleIdentifier:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)purgeAllResourcesForBundleIdentifier:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)_resourceControlChannel:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (void)showMessagesExtensionOnProxy:(BOOL)arg1 completed:(CDUnknownBlockType)arg2;
- (void)simulateNotificationWithBundleID:(id)arg1 payload:(id)arg2 onProxy:(BOOL)arg3 completed:(CDUnknownBlockType)arg4;
- (void)pressHomeButtonOnProxy:(BOOL)arg1 completed:(CDUnknownBlockType)arg2;
- (void)showSiriForExtensions:(id)arg1 queryText:(id)arg2 pid:(int)arg3 onProxy:(BOOL)arg4 completed:(CDUnknownBlockType)arg5;
- (void)showQuicklookPreviewForExtension:(id)arg1;
- (void)showTodayViewForExtensions:(id)arg1 pid:(int)arg2;
- (id)serviceHubProcessControlChannelOnProxy:(BOOL)arg1;
- (id)serviceHubProcessControlChannel;
- (void)terminateWatchAppForCompanionIdentifier:(id)arg1 options:(id)arg2 completionSemaphore:(id)arg3;
- (BOOL)_shouldAttemptToRetryWatchAppLaunchAttemptForLaunchError:(id)arg1;
- (void)_attemptToLaunchWatchAppForCompanionIdentifier:(id)arg1 options:(id)arg2 completionblock:(CDUnknownBlockType)arg3 attempt:(unsigned long long)arg4;
- (void)launchWatchAppForCompanionIdentifier:(id)arg1 options:(id)arg2 completionblock:(CDUnknownBlockType)arg3;
- (void)willInstallWatchAppForCompanionIdentifier:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;
- (id)listenForInstallOfAppExtensionIdentifiers:(id)arg1 onPairedDevice:(BOOL)arg2;
- (id)_applicationListingChannelForPairedDevice:(BOOL)arg1;
@property(readonly) unsigned long long supportedLaunchOptionsForProxiedDevice;
@property(readonly) unsigned long long supportedLaunchOptions;
- (id)proxiedPrimaryInstrumentsServer;
- (id)primaryInstrumentsServer;
- (void)renameDevice:(id)arg1;
@property(readonly) BOOL canRename;
@property(readonly) BOOL canBeWatchCompanion;
- (void)disableDeviceForDevelopment;
- (void)enableDeviceForDevelopment;
- (id)installApplicationsSync:(id)arg1 options:(id)arg2;
- (id)installApplicationSync:(id)arg1 options:(id)arg2;
- (void)stopDebuggingXPCServices:(id)arg1 forPairedDevice:(BOOL)arg2;
- (void)debugXPCServices:(id)arg1 onPairedDevice:(BOOL)arg2 completionSemaphore:(id)arg3;
- (BOOL)validateDeviceSpecifierOptions:(id)arg1 allowMultipleMatches:(BOOL)arg2 error:(id *)arg3;
@property(readonly, copy) NSString *nameForDeveloperPortal;
@property(readonly, copy) NSString *platformIdentifier;
@property(readonly) BOOL isRunningSupportedOS;
@property(readonly) BOOL isSupportedHardware;
@property(readonly) BOOL canIgnore;
- (void)uninstallProvisioningProfile:(id)arg1;
- (BOOL)installProvisioningProfileAtURL:(id)arg1 error:(id *)arg2;
- (void)installProvisioningProfile:(id)arg1;
@property(readonly) NSSet *provisioningProfiles;
@property(readonly) BOOL supportsProvisioning;
@property(readonly) BOOL supportsArchiving;
- (BOOL)canPerformUbiquityFetchEvent;
- (void)performUbiquityFetchEvent;
- (void)snapshotUIForBundleIdentifier:(id)arg1 orPid:(int)arg2 onProxy:(BOOL)arg3 completed:(CDUnknownBlockType)arg4;
- (void)performFetchEventForBundleIdentifier:(id)arg1 orPid:(int)arg2 onProxy:(BOOL)arg3;
- (unsigned long long)backgroundFetchSupportStyle;
@property(readonly) unsigned long long supportsFetchEvents;
- (BOOL)threadSanitizerRequiresDyldInsertLibrary;
- (BOOL)addressSanitizerRequiresDyldInsertLibrary;
- (void)downloadOptimizationProfilesFromBundleIdentifiers:(id)arg1 orPaths:(id)arg2 toFilePath:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)downloadOptimizationProfilesFromBundleIdentifier:(id)arg1 orPaths:(id)arg2 toFilePath:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)downloadOptimizationProfilesFromBundleIdentifier:(id)arg1 orPath:(id)arg2 toFilePath:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)downloadOptimizationProfilesFromPaths:(id)arg1 toFilePath:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)optimizationProfilesPathFromBundleIdentifier:(id)arg1;
- (BOOL)supportsPGOReturningError:(id *)arg1;
@property(readonly) BOOL supportsDebuggingForAskOnLaunch;
@property(readonly) BOOL supportsUnhostedXPCServiceDebugging;
@property(readonly) BOOL supportsXPCServiceDebugging;
- (BOOL)supportsUISnapshotOnProxy:(BOOL)arg1;
@property(readonly) BOOL canRunMultipleInstancesPerApp;
@property(readonly) BOOL runsRemoteFromHostLauncher;
@property(readonly) BOOL supportsDebugAsDifferentUser;
@property(readonly) BOOL supportsDebuggingDocumentVersioning;
@property(readonly) BOOL supportsResumeAndTurningItOnOrOff;
@property(readonly) BOOL supportsCustomWorkingDirectory;
@property(readonly) BOOL supportsDisplayScaleOption;
@property(readonly) BOOL supportsRoutingCoverageFile;
@property(readonly) BOOL supportsLocalizationOptions;
@property(readonly) BOOL supportsLocationSimulation;
@property(readonly) BOOL supportsBuildingThinnedResources;
@property(readonly) NSString *deviceIdentifierForGPUTracing;
@property(readonly) BOOL supportsApplicationDataUploading;
@property(readonly) BOOL supportsAttachByPIDOrName;
@property(readonly, copy) NSString *processorDescription;
- (void)requestProcessInformationsOnPairedDevice:(BOOL)arg1 handler:(CDUnknownBlockType)arg2;
@property(readonly) NSString *executionDisplayName;
- (id)viewDebuggerDylibPathInLaunchSessionWithEnvironmentVariables:(id)arg1;
@property(readonly, copy) NSString *extraDebuggingRuntimeDylibPath;
@property(readonly, copy) NSString *recordedFramesLibdispatchIntrospectionDylibPath;
@property(readonly) BOOL supportsMainThreadChecker;
@property(readonly) BOOL supportsRecordedFrames;
@property(readonly) BOOL alwaysAttachesForDebugging;
@property(readonly, getter=isConcreteDevice) BOOL concreteDevice;
@property(readonly, getter=isGenericDevice) BOOL genericDevice;
@property(readonly) NSData *displayImageBitmapData;
@property(readonly) NSString *displayOrder;
@property(copy) NSString *nativeArchitecture; // @synthesize nativeArchitecture=_nativeArchitecture;
- (void)setDeviceIsBusy:(BOOL)arg1;
@property(readonly) _Bool deviceIsBusy; // @synthesize deviceIsBusy=_deviceIsBusy;
@property(readonly) NSError *unavailabilityError;
@property(readonly) BOOL isProxiedDevice;
- (void)setActiveProxiedDevice:(id)arg1;
@property(readonly) BOOL canSetActiveProxiedDevice;
@property(readonly) id <DVTBasicDevice> activeProxiedDevice;
@property(readonly, copy) NSSet *proxiedDevices;
- (id)servicesMatchingCapability:(id)arg1;
- (id)_instantiateServicesForCapability:(id)arg1;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (void)dealloc;
- (id)initWithDeviceLocation:(id)arg1 extension:(id)arg2;
@property(readonly, copy) NSString *description;

// Remaining properties
@property(readonly, copy) NSSet *capabilities; // @dynamic capabilities;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) NSArray *deviceOperations; // @dynamic deviceOperations;
@property(readonly, copy) NSMutableSet *mutableCapabilities; // @dynamic mutableCapabilities;
@property(readonly, copy) NSMutableArray *mutableDeviceOperations; // @dynamic mutableDeviceOperations;
@property(readonly) Class superclass;

@end

@interface DVTDeviceOperation : NSObject
{
    BOOL _operationIsUserInitiated;
    NSString *_deviceIdentifier;
    NSString *_operationDescription;
    long long _progress;
}

@property long long progress; // @synthesize progress=_progress;
@property(copy) NSString *operationDescription; // @synthesize operationDescription=_operationDescription;
@property(readonly, nonatomic) NSString *deviceIdentifier; // @synthesize deviceIdentifier=_deviceIdentifier;
@property BOOL operationIsUserInitiated; // @synthesize operationIsUserInitiated=_operationIsUserInitiated;
- (void).cxx_destruct;
- (id)initWithDeviceIdentifier:(id)arg1 isUserInitiated:(BOOL)arg2;

@end

@interface DVTMockSigningCertificateSource : DVTSigningCertificateSource
{
    NSMutableSet *_allSigningCertificates;
}

- (void).cxx_destruct;
- (void)triggerUnknownEvent;
- (void)triggerDidAddOrRemovePrivateKeys;
- (void)triggerRemoveForSigningCertificate:(id)arg1;
- (void)triggerAddForSigningCertificate:(id)arg1;
- (id)allSigningCertificates;
- (void)_stopListeningForKeychainEvents;
- (void)_startListeningForKeychainEvents;
- (id)initWithDictionary:(id)arg1 logAspect:(id)arg2;
- (id)initWithPlist:(id)arg1 logAspect:(id)arg2;
- (id)initWithInitialSigningCertificates:(id)arg1 logAspect:(id)arg2;
- (id)initWithLogAspect:(id)arg1;

@end

@interface DVTFileWrapper : NSFileWrapper
{
    DVTFilePath *_filePath;
    CDUnknownBlockType _updateFilePathBlock;
}

@property(copy) CDUnknownBlockType updateFilePathBlock; // @synthesize updateFilePathBlock=_updateFilePathBlock;
@property(retain) DVTFilePath *filePath; // @synthesize filePath=_filePath;
- (void).cxx_destruct;
- (id)addWrapper:(id)arg1;
- (void)_updateChildFilePaths;
- (id)initWithURL:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)writeToURL:(id)arg1 options:(unsigned long long)arg2 originalContentsURL:(id)arg3 error:(id *)arg4;

@end

@interface DVTRescindCallbackObservingToken : NSObject <DVTCancellable>
{
    CDUnknownBlockType _callbackBlock;
}

+ (id)tokenAggregatingTokens:(id)arg1;
- (void).cxx_destruct;
- (void)cancel;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (id)initWithCallbackBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTRegExScanner : DVTSourceScanner
{
    NSCharacterSet *_startSet;
    NSCharacterSet *_invertedOtherSet;
    NSMutableArray *_regExes;
    NSMutableArray *_captureNodeTypes;
    struct _NSRange _previousTokenRange;
    BOOL _isSimpleToken;
    BOOL _altIsSimpleToken;
    BOOL _caseSensitive;
    unsigned long long _maxLinesPerToken;
}

- (void).cxx_destruct;
- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2;
- (BOOL)canTokenize;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (long long)nextToken:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 until:(unsigned long long)arg4 subItems:(id *)arg5;
- (unsigned long long)locationOfNextNewlineFrom:(unsigned long long)arg1 until:(unsigned long long)arg2 inStream:(id)arg3;
- (long long)tokenForString:(id)arg1 forRange:(struct _NSRange *)arg2 subItems:(id *)arg3;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTRegularExpressionMatch : NSObject <NSCoding>
{
    struct _NSRange _searchRange;
    NSString *_candidateString;
    unsigned long long _groupCount;
    struct _NSRange *_ranges;
    NSData *_rangeData;
}

+ (id)_NSErrorForUErrorCode:(int)arg1 withDescription:(id)arg2;
@property(retain) NSData *rangeData; // @synthesize rangeData=_rangeData;
@property struct _NSRange *ranges; // @synthesize ranges=_ranges;
@property unsigned long long groupCount; // @synthesize groupCount=_groupCount;
@property(copy) NSString *candidateString; // @synthesize candidateString=_candidateString;
@property struct _NSRange searchRange; // @synthesize searchRange=_searchRange;
- (void).cxx_destruct;
- (id)description;
- (id)stringByExpandingTemplate:(id)arg1;
- (struct _NSRange)rangeForGroupAtIndex:(unsigned long long)arg1;
- (id)substringForGroupAtIndex:(unsigned long long)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithURegularExpression:(struct URegularExpression *)arg1 candidateString:(id)arg2 searchRange:(struct _NSRange)arg3;

@end

@interface DVTRegularExpression : NSObject <NSCopying>
{
    NSString *_expressionString;
    struct URegularExpression *_compiledExpression;
    int _options;
}

+ (struct URegularExpression *)testAndCompileExpressionString:(id)arg1 options:(int)arg2 error:(id *)arg3;
+ (id)descriptionForParseError:(struct UParseError *)arg1;
+ (void)initialize;
@property int options; // @synthesize options=_options;
@property struct URegularExpression *compiledExpression; // @synthesize compiledExpression=_compiledExpression;
@property(copy) NSString *expressionString; // @synthesize expressionString=_expressionString;
- (void).cxx_destruct;
- (id)description;
- (BOOL)enumerateMatchesInString:(id)arg1 error:(id *)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (BOOL)enumerateMatchesInString:(id)arg1 searchRange:(struct _NSRange)arg2 error:(id *)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (id)matchString:(id)arg1 error:(id *)arg2;
- (id)matchString:(id)arg1 searchRange:(struct _NSRange)arg2 error:(id *)arg3;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)dealloc;
@property(readonly) unsigned long long groupCount;
- (id)initWithExpressionString:(id)arg1 options:(int)arg2 error:(id *)arg3;

@end

@interface DVTLocale : NSObject <NSCopying, NSCoding>
{
    NSString *_displayName;
    NSString *_localeIdentifier;
}

+ (id)localeWithLocaleIdentifier:(id)arg1;
+ (id)systemLanguages;
+ (id)availableLocalesbyIdentifier;
+ (id)globalLocale;
+ (id)baseLocale;
+ (id)autoupdatingCurrentLocale;
+ (id)currentLocale;
+ (id)_xcodeLocale;
+ (id)systemLocale;
@property(readonly, copy) NSString *displayName; // @synthesize displayName=_displayName;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToLocale:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)rootLanguage;
- (id)localeComponents;
@property(readonly, copy) NSString *localeIdentifier;
- (id)description;
- (id)initWithLocaleIdentifier:(id)arg1;
- (id)initWithLocaleIdentifier:(id)arg1 displayName:(id)arg2;
- (id)initWithLocaleIdentifier:(id)arg1 canonicalLocaleIdentifier:(id)arg2 displayName:(id)arg3;
- (id)init;

@end

@interface DVTSourceModel : NSObject
{
    id <DVTSourceBufferProvider> _sourceBufferProvider;
    DVTCharStream *_inputStream;
    DVTSourceScanner *_scanner;
    struct _NSRange _dirtyRange;
    long long _batchDelta;
    DVTSourceModelItem *_sourceItems;
    BOOL _isDoingBatchEdit;
    DVTSourceModelParser *_nativeParser;
}

+ (void)initialize;
@property BOOL isDoingBatchEdit; // @synthesize isDoingBatchEdit=_isDoingBatchEdit;
@property long long batchDelta; // @synthesize batchDelta=_batchDelta;
@property struct _NSRange dirtyRange; // @synthesize dirtyRange=_dirtyRange;
@property(retain) DVTSourceScanner *scanner; // @synthesize scanner=_scanner;
@property(retain) DVTSourceModelItem *sourceItems; // @synthesize sourceItems=_sourceItems;
@property(retain) DVTCharStream *inputStream; // @synthesize inputStream=_inputStream;
@property id <DVTSourceBufferProvider> sourceBufferProvider; // @synthesize sourceBufferProvider=_sourceBufferProvider;
- (void).cxx_destruct;
- (id)objCMethodNameForItem:(id)arg1 nameRanges:(id *)arg2;
- (BOOL)isItemDictionaryLiteral:(id)arg1;
- (BOOL)isItemObjectLiteral:(id)arg1;
- (BOOL)isItemForStatement:(id)arg1;
- (BOOL)isItemSemanticBlock:(id)arg1;
- (BOOL)isItemBracketExpression:(id)arg1;
- (BOOL)isItemAngleExpression:(id)arg1;
- (BOOL)isItemParenExpression:(id)arg1;
- (BOOL)isPostfixExpressionAtLocation:(unsigned long long)arg1;
- (BOOL)isInTokenizableCodeAtLocation:(unsigned long long)arg1;
- (BOOL)isInPlainCodeAtLocation:(unsigned long long)arg1;
- (BOOL)isInKeywordAtLocation:(unsigned long long)arg1;
- (BOOL)isIncompletionPlaceholderAtLocation:(unsigned long long)arg1;
- (BOOL)isInNumberConstantAtLocation:(unsigned long long)arg1;
- (BOOL)isInCharacterConstantAtLocation:(unsigned long long)arg1;
- (BOOL)isInIdentifierAtLocation:(unsigned long long)arg1;
- (BOOL)isInStringConstantAtLocation:(unsigned long long)arg1;
- (BOOL)isInIncludeStatementAtLocation:(unsigned long long)arg1;
- (BOOL)isInPreprocessorStatementAtLocation:(unsigned long long)arg1;
- (BOOL)isInDocCommentAtLocation:(unsigned long long)arg1;
- (BOOL)isInCommentAtLocation:(unsigned long long)arg1;
- (id)completionPlaceholderItemAtLocation:(unsigned long long)arg1;
- (id)identOrKeywordItemAtLocation:(unsigned long long)arg1;
- (id)objCDeclaratorItemAtLocation:(unsigned long long)arg1;
- (id)numberConstantAtLocation:(unsigned long long)arg1;
- (id)characterConstantAtLocation:(unsigned long long)arg1;
- (id)stringConstantAtLocation:(unsigned long long)arg1;
- (id)moduleImportStatementAtLocation:(unsigned long long)arg1;
- (id)includeStatementAtLocation:(unsigned long long)arg1;
- (id)preprocessorStatementAtLocation:(unsigned long long)arg1;
- (id)docCommentAtLocation:(unsigned long long)arg1;
- (id)commentAtLocation:(unsigned long long)arg1;
- (id)placeholderItemsFromItem:(id)arg1;
- (id)identifierItemsFromItem:(id)arg1;
- (id)commentBlockItems;
- (id)functionsAndMethodItems;
- (id)classItems;
- (void)addBlockItemsInTypeList:(long long *)arg1 fromItem:(id)arg2 toArray:(id)arg3;
- (void)addIdentifierItemsFromItem:(id)arg1 toArray:(id)arg2;
- (void)addItemsInTypeList:(long long *)arg1 fromItem:(id)arg2 toArray:(id)arg3;
- (id)functionOrMethodDefinitionAtLocation:(unsigned long long)arg1;
- (id)functionOrMethodAtLocation:(unsigned long long)arg1;
- (id)interfaceDeclarationAtLocation:(unsigned long long)arg1;
- (id)typeDeclarationAtLocation:(unsigned long long)arg1;
- (id)classAtLocation:(unsigned long long)arg1;
- (struct _NSRange)methodOrFunctionRangeAtRange:(struct _NSRange)arg1;
- (id)itemNameAtLocation:(unsigned long long)arg1 inTypeList:(long long *)arg2 nameRanges:(id *)arg3 scopeRange:(struct _NSRange *)arg4;
- (id)nameOfItem:(id)arg1 nameRanges:(id *)arg2 scopeRange:(struct _NSRange *)arg3;
- (void)enumerateIdentifierItemsInRange:(struct _NSRange)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)itemAtLocation:(unsigned long long)arg1 ofType:(id)arg2;
- (id)itemAtLocation:(unsigned long long)arg1 inTypeList:(long long *)arg2;
- (id)builtUpNameForItem:(id)arg1 nameRanges:(id *)arg2;
- (id)_builtUpNameForItem:(id)arg1 mutableNameRanges:(id)arg2;
- (id)_builtUpNameForSubTree:(id)arg1 mutableNameRanges:(id)arg2;
- (id)objectLiteralItemAtLocation:(unsigned long long)arg1;
- (id)parenItemAtLocation:(unsigned long long)arg1;
- (id)parenLikeItemAtLocation:(unsigned long long)arg1;
- (id)foldableBlockItemForLocation:(unsigned long long)arg1;
- (id)foldableBlockItemForLineAtLocation:(unsigned long long)arg1;
- (id)blockItemAtLocation:(unsigned long long)arg1;
- (long long)indentForItem:(id)arg1;
- (id)adjoiningItemAtLocation:(unsigned long long)arg1;
- (id)enclosingItemAtLocation:(unsigned long long)arg1;
- (id)_topLevelSourceItem;
- (void)parse;
- (void)doingBatchEdit:(BOOL)arg1;
- (void)dirtyRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (id)initWithSourceBufferProvider:(id)arg1;

@end

@interface DVTXPCServiceObserver : NSObject
{
}

+ (id)serviceNamesAtPaths:(id)arg1;
+ (void)_gatherServiceInfo:(id)arg1 forBundles:(id)arg2;
+ (id)_serviceNameAtPath:(id)arg1;
+ (id)xpcServicesInBundles:(id)arg1 bundleDirs:(id)arg2 allowedAppExtension:(id)arg3;
+ (void)flushBundlePath:(id)arg1;
+ (id)serviceNamesForType:(unsigned long long)arg1 executablePath:(id)arg2 frameworkSearchPaths:(id)arg3 allowedAppExtensionIdentifiers:(id)arg4;

@end

@interface DVTMacroDefinitionConditionSet : NSObject <NSCopying, NSFastEnumeration>
{
    unsigned long long _combinedHash;
    unsigned long long _combinedPrecedence;
    NSString *_subscriptRep;
    NSArray *_parameterNames;
    unsigned long long _count;
    DVTMacroDefinitionCondition *_conditions[0];
}

+ (id)conditionSetFromStringRepresentation:(id)arg1 getBaseMacroName:(id *)arg2 error:(id *)arg3;
+ (id)conditionSetWithCondition:(id)arg1;
+ (id)conditionSetWithConditions:(id)arg1;
+ (id)conditionSetWithConditions:(const id *)arg1 count:(unsigned long long)arg2;
- (void).cxx_destruct;
- (id)description;
- (long long)compare:(id)arg1;
- (id)subscriptRepresentation;
- (BOOL)evaluateInScope:(id)arg1;
- (BOOL)evaluateForParameterValues:(id)arg1;
- (unsigned long long)precedence;
- (id)conditionForParameterNamed:(id)arg1;
- (id)parameterNames;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (BOOL)containsCondition:(id)arg1;
- (unsigned long long)count;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)conditionSetByRemovingParameterNamed:(id)arg1;
- (id)conditionSetByAddingCondition:(id)arg1;
- (void)dealloc;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;

@end

@interface DataGatheringNSURLConnectionDelegate : NSObject <NSURLConnectionDelegate>
{
    NSURLResponse *_lastResponse;
    NSMutableData *_gatheringData;
    unsigned long long _maxLength;
    DVTPromise *_promise;
}

- (void).cxx_destruct;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (id)initWithMaxLength:(unsigned long long)arg1 promise:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DataWritingNSURLConnectionDelegate : NSObject <NSURLConnectionDelegate, DVTInvalidation>
{
    NSURLResponse *_lastResponse;
    unsigned long long _maxLength;
    NSFileHandle *_fileHandle;
    DVTPromise *_promise;
}

+ (void)initialize;
- (void).cxx_destruct;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)primitiveInvalidate;
- (id)initWithMaxLength:(unsigned long long)arg1 fileHandle:(id)arg2 promise:(id)arg3;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTDownloadable_PKInstallClientDelegate : NSObject
{
    NSTimer *_timer;
    BOOL _isRunningModal;
    DVTPromise *_promise;
}

@property(retain) NSTimer *timer; // @synthesize timer=_timer;
- (void).cxx_destruct;
- (void)_callPKInstallClientStatusTimer:(id)arg1;
- (void)installClientDidFinish:(id)arg1;
- (void)installClient:(id)arg1 didFailWithError:(id)arg2;
- (void)installClient:(id)arg1 currentState:(int)arg2 package:(id)arg3 progress:(double)arg4 timeRemaining:(double)arg5;
- (void)installClientDidBegin:(id)arg1;
- (id)initForModal:(BOOL)arg1 promise:(id)arg2;

@end

@interface DVTDownloadableProgressToken : NSObject <DVTCancellable>
{
    NSArray *_subTokens;
}

+ (id)tokenWithSubTokens:(id)arg1;
- (void).cxx_destruct;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (void)cancel;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDownloadableDependency : NSObject <NSCoding>
{
    NSString *_identifier;
    DVTDotSeparatedVersion *_minVersion;
}

@property(readonly) DVTDotSeparatedVersion *minVersion; // @synthesize minVersion=_minVersion;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)propertyList;
- (id)initWithPropertyList:(id)arg1 error:(id *)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)initWithIdentifier:(id)arg1 minVersion:(id)arg2;

@end

@interface DVTDownloadable : NSObject <NSCoding, NSCopying>
{
    _Bool _userInitiated;
    NSString *_identifier;
    DVTDotSeparatedVersion *_version;
    NSString *_name;
    NSSet *_dependencies;
    NSURL *_source;
    unsigned long long _fileSize;
    NSDictionary *_userInfo;
}

@property(readonly) NSDictionary *userInfo; // @synthesize userInfo=_userInfo;
@property(readonly) unsigned long long fileSize; // @synthesize fileSize=_fileSize;
@property(readonly) NSURL *source; // @synthesize source=_source;
@property(readonly) NSSet *dependencies; // @synthesize dependencies=_dependencies;
@property(readonly, getter=isUserInitiated) _Bool userInitiated; // @synthesize userInitiated=_userInitiated;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) DVTDotSeparatedVersion *version; // @synthesize version=_version;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
@property(readonly) NSString *category;
@property(readonly) NSDictionary *installedIfAllReceiptsArePresentOrNewer;
@property(readonly) NSDictionary *installedIfAllSHA1SumsMatch;
@property(readonly) NSArray *installedIfAllPathsArePresent;
@property(readonly) NSPredicate *activationPredicate;
@property(readonly) BOOL requiresADCAuthentication;
- (id)sortKey;
@property(readonly) NSString *installPrefix;
@property(readonly, getter=isUserVisible) _Bool userVisible;
- (id)propertyList;
- (id)initWithPropertyList:(id)arg1 error:(id *)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (long long)compare:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)initWithIdentifier:(id)arg1 version:(id)arg2 source:(id)arg3 fileSize:(unsigned long long)arg4 name:(id)arg5 dependencies:(id)arg6 userInitiated:(_Bool)arg7 userInfo:(id)arg8;

@end

@interface DVTSimplePlainTextSerializer : DVTSimpleSerializer
{
    NSMutableArray *_knownClasses;
}

- (void).cxx_destruct;
- (void)encodeObjectList:(id)arg1;
- (void)encodeObject:(id)arg1;
- (void)encodeString:(id)arg1;
- (void)encodeDouble:(double)arg1;
- (void)encodeFloat:(float)arg1;
- (void)encodeInteger:(unsigned long long)arg1;
- (id)init;

@end

@interface DVTSimplePlainTextDeserializer : DVTSimpleDeserializer
{
    NSMutableArray *_knownClasses;
}

- (void).cxx_destruct;
- (id)decodeObjectList;
- (id)decodeObject;
- (id)decodeString;
- (double)decodeDouble;
- (float)decodeFloat;
- (void)decodeHexBytes:(void *)arg1 length:(unsigned long long)arg2 magic:(BOOL)arg3;
- (unsigned long long)decodeInteger;
- (id)init;
- (id)initWithData:(id)arg1;

@end

@interface DVTExtensionPropertyDescription : NSObject <DVTPropertyListEncoding>
{
    NSString *_name;
    BOOL _isOptional;
}

@property(getter=isOptional) BOOL optional; // @synthesize optional=_isOptional;
@property(copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (void)encodeIntoPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithName:(id)arg1 isOptional:(BOOL)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTExtensionAttributeDescription : DVTExtensionPropertyDescription
{
    long long _extensionAttributeType;
    id _defaultValue;
}

@property(retain) id defaultValue; // @synthesize defaultValue=_defaultValue;
@property long long extensionAttributeType; // @synthesize extensionAttributeType=_extensionAttributeType;
- (void).cxx_destruct;
- (id)adjustedValueForString:(id)arg1;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithName:(id)arg1 extensionAttributeType:(long long)arg2 defaultValue:(id)arg3 isOptional:(BOOL)arg4;

@end

@interface DVTExtensionElementDescription : DVTExtensionPropertyDescription
{
    NSString *_plural;
    unsigned long long _minOccurs;
    unsigned long long _maxOccurs;
    NSDictionary *_attributes;
    NSDictionary *_elements;
    NSDictionary *_properties;
    NSSet *_propertyKeys;
}

@property(copy) NSSet *propertyKeys; // @synthesize propertyKeys=_propertyKeys;
@property(copy) NSDictionary *properties; // @synthesize properties=_properties;
@property(copy) NSDictionary *elements; // @synthesize elements=_elements;
@property(copy) NSDictionary *attributes; // @synthesize attributes=_attributes;
@property unsigned long long maxOccurs; // @synthesize maxOccurs=_maxOccurs;
@property unsigned long long minOccurs; // @synthesize minOccurs=_minOccurs;
@property(copy) NSString *plural; // @synthesize plural=_plural;
- (void).cxx_destruct;
- (void)_inheritAttributesAndElementsFromElementDescription:(id)arg1;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeWithPropertyList:(id)arg1;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithName:(id)arg1 plural:(id)arg2 minOccurs:(unsigned long long)arg3 maxOccurs:(unsigned long long)arg4 optional:(BOOL)arg5 attributes:(id)arg6 elements:(id)arg7;

@end

@interface DVTFindDescriptor : NSObject <NSCopying, NSCoding>
{
}

+ (id)keyPathsForValuesAffectingDisplayAttributedString;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 withWordFindingBlock:(CDUnknownBlockType)arg4 passingTest:(CDUnknownBlockType)arg5 docLocationCreationBlock:(CDUnknownBlockType)arg6;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 docLocationCreationBlock:(CDUnknownBlockType)arg4;
@property(readonly) BOOL caseSensitive;
@property(readonly) NSString *displayString;
@property(readonly) NSAttributedString *displayAttributedString;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;

@end

@interface DVTMacroNameString : NSString
{
    NSString *_contents;
    unsigned long long _hashValue;
    unsigned long long _regNumber;
}

+ (void)initialize;
+ (id)macroNameStringForString:(id)arg1 createIfNeeded:(BOOL)arg2;
- (void).cxx_destruct;
- (id)description;
- (unsigned long long)macroRegistrationNumber;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)replacementObjectForCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)copy;
- (id)init;
- (id)initWithContents:(id)arg1 registrationNumber:(unsigned long long)arg2;

@end

@interface DVTExpectation : NSObject
{
    NSObject<OS_dispatch_semaphore> *_semaphore;
    DVTExpectation *_delegateExpectation;
    DVTExpectation *_parentExpectation;
    BOOL _didFulFill;
    BOOL _isDelegate;
    NSString *_reason;
    DVTStackBacktrace *_creationBacktrace;
}

@property __weak DVTExpectation *parentExpectation; // @synthesize parentExpectation=_parentExpectation;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property BOOL isDelegate; // @synthesize isDelegate=_isDelegate;
@property BOOL didFulFill; // @synthesize didFulFill=_didFulFill;
@property(readonly) NSString *reason; // @synthesize reason=_reason;
- (void).cxx_destruct;
- (BOOL)waitWithTimeout:(double)arg1;
- (void)wait;
- (void)fulfill;
- (void)dealloc;
@property(readonly) __weak DVTExpectation *delegateExpectation;
- (id)description;
- (id)initWithReason:(id)arg1;
- (id)init;

@end

@interface DVTStateRepository : NSObject <NSKeyedUnarchiverDelegate>
{
    NSString *_identifier;
    DVTStateRepository *_parentRepository;
    DVTStateToken *_parentToken;
    NSMutableDictionary *_currentState;
    NSMapTable *_tokenByIdentifierMapping;
    id <DVTStateRepositoryDelegate> _delegate;
}

+ (void)initialize;
@property(retain) id <DVTStateRepositoryDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (Class)unarchiver:(id)arg1 cannotDecodeObjectOfClassName:(id)arg2 originalClasses:(id)arg3;
- (id)readStateFromURL:(id)arg1 error:(id *)arg2;
- (BOOL)writeStateToURL:(id)arg1 error:(id *)arg2;
- (id)readStateFromData:(id)arg1 error:(id *)arg2;
- (id)stateDataOrError:(id *)arg1;
- (void)_pullStateFromDictionary:(id)arg1;
- (void)clearCurrentState;
- (void)deleteStateFromParentRepository;
- (void)collectStateFromRegisteredObjects;
- (void)cloneCurrentStateDataFromRepository:(id)arg1;
- (id)currentState;
- (void)cloneStateForIdentifier:(id)arg1 toIdentifier:(id)arg2;
- (void)setStateIsClone:(BOOL)arg1 forIdentifier:(id)arg2;
- (id)_stateForIdentifier:(id)arg1;
- (void)_setState:(id)arg1 forIdentifier:(id)arg2;
- (void)tokenDidChangeState:(id)arg1;
- (void)updateCurrentStateFromDictionary:(id)arg1;
- (BOOL)pushStateToRepositoryAndReturnError:(id *)arg1;
- (void)_invalidateAllTokens;
- (void)_updateStateIfNeeded;
- (void)tokenWillInvalidate:(id)arg1;
- (id)identifierForRegisteredObject:(id)arg1;
- (void)unregisterObjectWithIdentifier:(id)arg1;
- (BOOL)registerObject:(id)arg1 withIdentifier:(id)arg2 error:(id *)arg3;
- (void)_registerChildRepository:(id)arg1 withIdentifier:(id)arg2;
- (id)_currentState;
- (id)_parentRepository;
- (id)_tokenMapping;
- (id)identifier;
- (void)dealloc;
- (id)initWithIdentifier:(id)arg1 inParentRepository:(id)arg2;
- (id)initWithIdentifier:(id)arg1 inParentStateToken:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTProvisioningDataNullProvider : NSObject <DVTProvisioningDataProvider>
{
}

- (id)dataSourceWithProfileData:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTConsoleLogger : DVTLogger
{
    unsigned long long _indentLevel;
}

+ (void)initialize;
@property unsigned long long indentLevel; // @synthesize indentLevel=_indentLevel;
- (void)decreaseIndentLevelForAspect:(id)arg1;
- (void)increaseIndentLevelForAspect:(id)arg1;
- (void)logMessage:(id)arg1 forAspect:(id)arg2 logLevel:(int)arg3;

@end

@interface DVTOneElementDictionary : NSDictionary
{
    id _object;
    id _key;
}

- (void).cxx_destruct;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;
- (id)initWithObjects:(const id *)arg1 forKeys:(const id *)arg2 count:(unsigned long long)arg3;
- (id)initWithObject:(id)arg1 forKey:(id)arg2;

@end

@interface DVTObjCSourceModelParser : DVTCSourceModelParser
{
}

+ (void)initialize;
+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (void)initializeLexerModes;
+ (id)languageSpecification;
- (void)_resetLexerWithInputString:(id)arg1;
- (id)init;

@end

@interface DVTFirstLaunchPackageInstallationHelper : NSObject
{
    DVTWeakInterposer *_delegate_dvtWeakInterposer;
    NSArray *_packagesToInstall;
}

+ (void)initialize;
@property(retain) NSArray *packagesToInstall; // @synthesize packagesToInstall=_packagesToInstall;
- (void).cxx_destruct;
- (id)_getLastTwoDottedNumbers:(id)arg1;
- (id)uncachedPackagesToInstall;
- (void)installPackagesWithAuthRef:(struct AuthorizationOpaqueRef *)arg1;
- (id)_packageURLsToInstall;
- (id)_allPackagesInPackagesFolder;
- (id)_allPackagesInfo;
- (BOOL)_needToInstallMobileDevicePackage:(id)arg1;
- (BOOL)_needToCheckMobileDevicePackage;
- (void)_createCacheFile;
- (id)_cacheFilePath;
- (id)darwinUserCacheDirectoryPath;
- (void)_createCacheFileIfNeeded:(id)arg1;
- (id)initWithDelegate:(id)arg1 packagesOnly:(BOOL)arg2;
- (id)initWithDelegate:(id)arg1;
@property __weak id <DVTPackageInstallerHelperDelegate> delegate;

@end

@interface DVTFirstLaunchPackage : NSObject
{
    NSString *_displayName;
    NSString *_description;
    NSString *_path;
}

@property(readonly) NSString *path; // @synthesize path=_path;
@property(readonly) NSString *description; // @synthesize description=_description;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
- (void).cxx_destruct;
- (id)_initWithPath:(id)arg1 packageInfo:(id)arg2;

@end

@interface _DVTXMLParsingState : NSObject
{
    NSNumber *archiveVersion;
}

- (void).cxx_destruct;

@end

@interface DVTXMLUnarchiver : NSObject
{
    NSData *_data;
    id _delegate;
    NSMutableDictionary *_elementNamesToClasses;
    id _rootObject;
    NSError *_decodingError;
    id _context;
    CDUnknownBlockType _versionChecker;
    struct {
        unsigned int _unused:31;
        unsigned int _respondsTo_XMLUnarchiver_didReadToPosition_ofTotal_;
    } _delegateFlags;
    BOOL _rootObjectPropertiesSet;
    BOOL _hasReadArchive;
    BOOL _archiveContainedUnsupportedNodes;
    NSError *_xmlParserError;
}

+ (BOOL)unarchiveData:(id)arg1 withRootObject:(id)arg2 error:(id *)arg3;
+ (id)unarchiveObjectWithData:(id)arg1;
+ (void)setElementNamePrefix:(id)arg1;
+ (Class)classForElementName:(id)arg1;
+ (void)setClass:(Class)arg1 forElementName:(id)arg2;
+ (void)initialize;
@property(copy) NSError *xmlParserError; // @synthesize xmlParserError=_xmlParserError;
@property(copy) NSError *decodingError; // @synthesize decodingError=_decodingError;
@property(retain, nonatomic) id <DVTXMLUnarchiverDelegate> delegate; // @synthesize delegate=_delegate;
@property BOOL archiveContainedUnsupportedNodes; // @synthesize archiveContainedUnsupportedNodes=_archiveContainedUnsupportedNodes;
@property(copy) CDUnknownBlockType versionChecker; // @synthesize versionChecker=_versionChecker;
@property(retain) id context; // @synthesize context=_context;
- (void).cxx_destruct;
- (id)_corruptedDocumentErrorWithUnderlyingErrorCode:(unsigned long long)arg1 reason:(id)arg2;
- (id)_genericUnreadableDocumentError;
- (void)finishDecoding;
- (BOOL)decodeWithRootObject:(id)arg1 error:(id *)arg2;
- (id)decodeRootObject;
- (BOOL)_readAndReturnError:(id *)arg1;
- (BOOL)decodeNodeWithXMLTextReader:(struct _xmlTextReader *)arg1 owner:(id)arg2 container:(id)arg3 parsingState:(id)arg4 error:(id *)arg5;
- (void)_captureUnhandleableElementInContainer:(id)arg1 withXMLTextReader:(struct _xmlTextReader *)arg2;
- (void)_moveToCurrentNodeEndElementWithXMLTextReader:(struct _xmlTextReader *)arg1;
- (id)decodeElementNodeWithXMLTextReader:(struct _xmlTextReader *)arg1 owner:(id)arg2 container:(id)arg3 parsingState:(id)arg4 success:(char *)arg5 error:(id *)arg6;
- (Class)classForUnarchivedObjectFromElementNodeWithXMLTextReader:(struct _xmlTextReader *)arg1 owner:(id)arg2;
- (void)setRootObject:(id)arg1;
- (Class)classForElementName:(id)arg1;
- (void)setClass:(Class)arg1 forElementName:(id)arg2;
- (id)init;
- (id)initForReadingWithData:(id)arg1;

@end

@interface DVTMemorySnapshot : NSObject
{
    DVTLogAspect *_aspect;
    NSCountedSet *_incrementsForSnapshotTypes;
    DVTDispatchLock *_incrementLock;
}

+ (id)_baseOutputFolder;
+ (id)snapshotForLogAspect:(id)arg1;
+ (void)initialize;
- (void).cxx_destruct;
- (void)takeVmmapSnapshotWithLogLevel:(int)arg1 logFormat:(id)arg2;
- (void)_takeVmmapSnapshotWithLogLevel:(int)arg1 toFilePath:(id)arg2 logString:(id)arg3;
- (unsigned long long)_newIncrementForSnapshotType:(id)arg1;
- (id)initWithAspect:(id)arg1;

@end

@interface DVTMutableOrderedSet : NSMutableSet
{
    NSMutableOrderedSet *_orderedSet;
}

+ (id)setWithCapacity:(unsigned long long)arg1;
+ (id)set;
- (void).cxx_destruct;
- (id)description;
- (BOOL)isEquivalentToOrderedSet:(id)arg1;
- (void)unionSet:(id)arg1;
- (void)minusSet:(id)arg1;
- (void)intersectSet:(id)arg1;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)insertObject:(id)arg1 atIndex:(long long)arg2;
- (void)setSet:(id)arg1;
- (void)addObjectsFromArray:(id)arg1;
- (void)addObject:(id)arg1;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeAllObjects;
- (void)removeObject:(id)arg1;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (void)sortWithOptions:(unsigned long long)arg1 usingComparator:(CDUnknownBlockType)arg2;
- (void)sortUsingComparator:(CDUnknownBlockType)arg1;
- (id)reverseObjectEnumerator;
- (id)objectEnumerator;
- (id)allObjects;
- (id)member:(id)arg1;
- (long long)indexOfObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (id)lastObject;
- (id)firstObject;
- (unsigned long long)count;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (Class)classForCoder;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)init;
- (Class)dvt_mutableClass;

@end

@interface _DVTStackBacktraceTester : NSObject
{
}

- (BOOL)_testCanSymbolicate;

@end

@interface DVTStackBacktrace : NSObject
{
    NSArray *_symbolicatedStackBacktraceFrames;
    unsigned long long *_returnAddresses;
    unsigned long long _returnAddressesCount;
    unsigned long long _hash;
}

+ (id)compileTimeClassNameByRemovingSwiftModuleNameFromRuntimeClassName:(id)arg1;
+ (id)classNameFromSymbolName:(id)arg1;
+ (id)compileTimeClassNameFromRuntimeClassName:(id)arg1;
+ (id)symbolNameByRemovingDynamicBlockCountersFromRawSymbolName:(id)arg1;
+ (void)disableMainThreadSoftAssertionsDuringBlock:(CDUnknownBlockType)arg1;
+ (unsigned long long *)_callStackReturnAddressesExcludingTopFrames:(unsigned long long)arg1 returningCount:(unsigned long long *)arg2;
+ (unsigned long long *)_callStackReturnAddressesFromNumbers:(id)arg1 excludingTopFrames:(unsigned long long)arg2 returningCount:(unsigned long long *)arg3;
+ (id)currentStackBacktraceStartingFromFrame:(long long)arg1;
+ (id)currentStackBacktrace;
+ (id)stackBacktraceWithCallStackReturnAddresses:(id)arg1;
+ (void)initialize;
- (void).cxx_destruct;
- (id)callStackReturnAddresses;
- (id)_symbolicatedStackBacktraceFrames;
- (id)_stringRepresentationWithAddresses:(BOOL)arg1;
- (id)symbolicatedStackBacktraceFrames;
- (id)stringRepresentationWithAddresses:(BOOL)arg1;
- (id)stringRepresentation;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)initWithCallStackReturnAddresses:(unsigned long long *)arg1 count:(unsigned long long)arg2;
- (id)init;

@end

@interface DVTStackBacktraceFrame : NSObject
{
    unsigned long long _stackAddress;
    unsigned long long _lineNumber;
    NSString *_symbolName;
    NSString *_fileName;
    NSString *_symbolOwnerName;
    NSString *_rawSymbolName;
}

@property(copy) NSString *rawSymbolName; // @synthesize rawSymbolName=_rawSymbolName;
@property(copy) NSString *symbolOwnerName; // @synthesize symbolOwnerName=_symbolOwnerName;
@property(copy) NSString *fileName; // @synthesize fileName=_fileName;
@property(copy) NSString *symbolName; // @synthesize symbolName=_symbolName;
@property unsigned long long lineNumber; // @synthesize lineNumber=_lineNumber;
@property unsigned long long stackAddress; // @synthesize stackAddress=_stackAddress;
- (void).cxx_destruct;
- (id)frameStringRepresentationWithAddress:(BOOL)arg1;
- (id)frameStringRepresentation;
- (id)_initWithStackAddress:(unsigned long long)arg1 usingSymbolicator:(struct _CSTypeRef)arg2;

@end

@interface DVTDownloadableOperation : DVTOperation <DVTProgressReporting>
{
    BOOL _userRequested;
    BOOL _cancelable;
    long long _progress;
    unsigned long long _progressWeight;
    NSString *_title;
}

@property(retain) NSString *title; // @synthesize title=_title;
@property BOOL cancelable; // @synthesize cancelable=_cancelable;
@property BOOL userRequested; // @synthesize userRequested=_userRequested;
@property unsigned long long progressWeight; // @synthesize progressWeight=_progressWeight;
@property long long progress; // @synthesize progress=_progress;
- (void).cxx_destruct;
- (void)cancel;
@property(readonly, getter=shouldProceed) BOOL shouldProceed;
- (void)downloadableOperationMain;
- (void)main;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDownloadableOperationDownload : DVTDownloadableOperation
{
    DVTDownloadableManager *_manager;
    DVTDownloadable *_downloadable;
    struct AuthorizationOpaqueRef *_authRef;
}

@property(readonly) DVTDownloadable *downloadable; // @synthesize downloadable=_downloadable;
- (void).cxx_destruct;
- (void)cancel;
- (void)downloadableOperationMain;
- (void)setError:(id)arg1;
- (id)initWithDownloadable:(id)arg1 userRequested:(BOOL)arg2 authorization:(struct AuthorizationOpaqueRef *)arg3 manager:(id)arg4;

@end

@interface DVTCustomDataSpecifier : NSObject
{
    NSString *_name;
    NSString *_groupingName;
    DVTCustomDataOwnership *_ownership;
}

+ (id)customDataSpecifierWithName:(id)arg1 groupingName:(id)arg2;
+ (id)customDataSpecifierWithName:(id)arg1 groupingName:(id)arg2 ownership:(id)arg3;
@property(readonly) DVTCustomDataOwnership *ownership; // @synthesize ownership=_ownership;
@property(readonly) NSString *groupingName; // @synthesize groupingName=_groupingName;
@property(readonly) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;

@end

@interface DVTCustomDataOwnership : NSObject
{
    NSString *_ownerName;
    BOOL _isShared;
}

+ (id)ownershipWithName:(id)arg1;
+ (id)ownershipForSharing;
+ (id)ownershipForCurrentUser;
+ (void)initialize;
@property(readonly) BOOL isShared; // @synthesize isShared=_isShared;
@property(readonly) NSString *ownerName; // @synthesize ownerName=_ownerName;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;

@end

@interface DVTMockBasicDevice : DVTMockCodesignableDevice <DVTBasicDevice>
{
    BOOL _isProxiedDeviceMock;
    BOOL _availableMock;
    _Bool _deviceIsBusyMock;
    NSString *_modelNameMock;
    NSString *_modelCodeMock;
    NSString *_modelUTIMock;
    NSString *_processorDescriptionMock;
    NSString *_operatingSystemVersionMock;
    NSString *_operatingSystemBuildMock;
    DVTPlatform *_platformMock;
    NSString *_nativeArchitectureMock;
    NSError *_unavailabilityErrorMock;
}

@property _Bool deviceIsBusyMock; // @synthesize deviceIsBusyMock=_deviceIsBusyMock;
@property(retain) NSError *unavailabilityErrorMock; // @synthesize unavailabilityErrorMock=_unavailabilityErrorMock;
@property(getter=isAvailableMock) BOOL availableMock; // @synthesize availableMock=_availableMock;
@property BOOL isProxiedDeviceMock; // @synthesize isProxiedDeviceMock=_isProxiedDeviceMock;
@property(copy) NSString *nativeArchitectureMock; // @synthesize nativeArchitectureMock=_nativeArchitectureMock;
@property(retain) DVTPlatform *platformMock; // @synthesize platformMock=_platformMock;
@property(copy) NSString *operatingSystemBuildMock; // @synthesize operatingSystemBuildMock=_operatingSystemBuildMock;
@property(copy) NSString *operatingSystemVersionMock; // @synthesize operatingSystemVersionMock=_operatingSystemVersionMock;
@property(copy) NSString *processorDescriptionMock; // @synthesize processorDescriptionMock=_processorDescriptionMock;
@property(copy, nonatomic) NSString *modelUTIMock; // @synthesize modelUTIMock=_modelUTIMock;
@property(copy, nonatomic) NSString *modelCodeMock; // @synthesize modelCodeMock=_modelCodeMock;
@property(copy, nonatomic) NSString *modelNameMock; // @synthesize modelNameMock=_modelNameMock;
- (void).cxx_destruct;
@property(readonly) _Bool deviceIsBusy;
@property(readonly) NSError *unavailabilityError;
@property(readonly, getter=isAvailable) BOOL available;
@property(readonly) BOOL isProxiedDevice;
@property(readonly, copy) NSString *nativeArchitecture;
@property(readonly, copy, nonatomic) NSString *operatingSystemVersionWithBuildNumber;
@property(readonly) DVTPlatform *platform;
@property(readonly, copy) NSString *operatingSystemBuild;
@property(readonly, copy) NSString *operatingSystemVersion;
@property(readonly, copy) NSString *processorDescription;
@property(readonly, copy, nonatomic) NSString *modelUTI;
@property(readonly, copy, nonatomic) NSString *modelCode;
@property(readonly, copy, nonatomic) NSString *modelName;
- (id)snapshot;
- (id)initWithDictionary:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, copy, nonatomic) NSString *identifier;
@property(readonly, copy, nonatomic) NSString *name;
@property(readonly, copy) NSString *nameForDeveloperPortal;
@property(readonly, copy) NSString *platformIdentifier;
@property(readonly, copy) NSSet *proxiedDevices;
@property(readonly) Class superclass;
@property(readonly) BOOL supportsProvisioning;

@end

@interface DVTPlatformFamily : NSObject
{
    NSString *_identifier;
    NSString *_name;
    NSMutableSet *_platforms;
    NSArray *_osVersions;
}

+ (id)registerPlatformFamilyWithIdentifier:(id)arg1 name:(id)arg2;
+ (id)platformFamilyWithName:(id)arg1;
+ (id)platformFamilyWithIdentifier:(id)arg1;
+ (id)platformFamiliesSortedByName;
+ (id)allPlatformFamilies;
+ (BOOL)automaticallyNotifiesObserversForKey:(id)arg1;
+ (void)initialize;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
@property(readonly, copy) NSSet *platforms; // @synthesize platforms=_platforms;
- (void)addPlatform:(id)arg1;
@property(readonly) NSArray *osVersions; // @synthesize osVersions=_osVersions;
- (id)description;

@end

@interface DVTFuture : NSObject <DVTCancellable>
{
    DVTDispatchLock *_lock;
    NSObject<OS_dispatch_group> *_cond_group;
    long long _state;
    _Bool _hasTimeout;
    _Bool _timedOut;
    long long _progress;
    NSError *_error;
    id _result;
    DVTStackBacktrace *_initBacktrace;
    DVTStackBacktrace *_finishBacktrace;
    struct vector<void (^)(long, signed char *), std::__1::allocator<void (^)(long, signed char *)>> _progressBlocks;
    struct vector<void (^)(DVTFutureState, id, NSError *), std::__1::allocator<void (^)(DVTFutureState, id, NSError *)>> _finishBlocks;
    struct unordered_map<DVTFuture *, long, (anonymous namespace)::objc_pointer_hasher, std::__1::equal_to<DVTFuture *>, std::__1::allocator<std::__1::pair<DVTFuture *const, long>>> _linkedSubFutures;
}

+ (id)futureWithOperation:(id)arg1;
+ (id)cancelledFuture;
+ (id)futureWithResult:(id)arg1;
+ (id)futureWithError:(id)arg1;
+ (id)futureWithBlock:(CDUnknownBlockType)arg1;
+ (id)runOperation:(id)arg1;
+ (id)trackOperation:(id)arg1;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)trackFuture:(id)arg1;
- (void)trackFuture:(id)arg1 progress:(float)arg2 cancel:(BOOL)arg3 result:(BOOL)arg4 error:(BOOL)arg5;
- (void)updateProgressFromReporters;
- (void)failWithError:(id)arg1 afterTimeout:(double)arg2;
- (void)succeedWithResult:(id)arg1 afterTimeout:(double)arg2;
- (void)cancelAfterTimeout:(double)arg1;
- (void)_setState:(long long)arg1 result:(id)arg2 error:(id)arg3 afterTimeout:(double)arg4;
- (void)succeedWithResult:(id)arg1;
- (void)failWithError:(id)arg1;
- (void)cancel;
- (void)setState:(long long)arg1 result:(id)arg2 error:(id)arg3;
- (CDUnknownBlockType)_internalSetState:(long long)arg1 result:(id)arg2 error:(id)arg3;
- (id)future;
- (void)setProgress:(long long)arg1;
@property(readonly, copy) NSString *description;
- (id)_description;
- (void)observeFinishWithDispatchGroup:(id)arg1;
- (void)observeSuccess:(CDUnknownBlockType)arg1;
- (void)observeFailure:(CDUnknownBlockType)arg1;
- (void)observeCancellation:(CDUnknownBlockType)arg1;
- (void)observeFinishOnQueue:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)observeFinish:(CDUnknownBlockType)arg1;
- (void)observeProgress:(CDUnknownBlockType)arg1;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (long long)waitUntilFinished;
- (id)result;
- (id)error;
- (void)_signalFinished;
- (void)_waitUntilFinished;
- (void)dealloc;
- (id)initWithResult:(id)arg1;
- (id)initWithError:(id)arg1;
- (id)initWithBlock:(CDUnknownBlockType)arg1;
- (id)init;
- (id)then:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTSearchPath : NSObject <NSCopying>
{
    NSArray *_searchDirectoryFilePaths;
    NSString *_unixShellSearchPathRepresentation;
}

+ (id)searchPathWithSearchDirectoryFilePaths:(id)arg1;
@property(readonly) NSString *unixShellSearchPathRepresentation; // @synthesize unixShellSearchPathRepresentation=_unixShellSearchPathRepresentation;
@property(readonly) NSArray *searchDirectoryFilePaths; // @synthesize searchDirectoryFilePaths=_searchDirectoryFilePaths;
- (void).cxx_destruct;
- (id)description;
- (id)pathForFileWithRelativePathString:(id)arg1;
- (id)pathForFileWithRelativePathString:(id)arg1 matchingPredicate:(CDUnknownBlockType)arg2;
@property(readonly) DVTFilePath *preferredDirectoryPath;
- (id)searchPathByAppendingSearchPath:(id)arg1;
- (id)searchPathByAppendingSearchDirectoryFilePaths:(id)arg1;
- (id)initWithSearchDirectoryFilePaths:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTDeveloperAccountCredentialsManager : NSObject
{
    BOOL _wantsAllApplicationsToAccessKeychainItems;
    struct OpaqueSecKeychainRef *_keychain;
}

+ (id)defaultAccountCredentialsManager;
@property(nonatomic) BOOL wantsAllApplicationsToAccessKeychainItems; // @synthesize wantsAllApplicationsToAccessKeychainItems=_wantsAllApplicationsToAccessKeychainItems;
@property struct OpaqueSecKeychainRef *keychain; // @synthesize keychain=_keychain;
- (BOOL)deleteCredential:(id)arg1 error:(id *)arg2;
- (id)accountCredentialsFromUsername:(id)arg1 alternateDSID:(id)arg2 token:(id)arg3 successfullyPersisted:(char *)arg4 error:(id *)arg5;
- (id)accountCredentialsFromUsername:(id)arg1 password:(id)arg2 successfullyPersisted:(char *)arg3 error:(id *)arg4;
- (id)accountCredentialsFromCredentials:(id)arg1 withPassword:(id)arg2 successfullyPersisted:(char *)arg3 error:(id *)arg4;
- (id)accountCredentialsForUsername:(id)arg1 error:(id *)arg2;
- (id)initWithKeychain:(struct OpaqueSecKeychainRef *)arg1 wantsAllApplicationsToAccessKeychainItems:(BOOL)arg2;

@end

@interface DVTOSVersion : NSObject
{
    NSString *_displayName;
    unsigned long long _osVersion;
}

@property(readonly) unsigned long long osVersion; // @synthesize osVersion=_osVersion;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
- (void).cxx_destruct;
- (id)initWithOSVersion:(unsigned long long)arg1 andDisplayName:(id)arg2;

@end

@interface DVTTarjanSCCVertex : NSObject
{
    unsigned long long index;
    unsigned long long lowlink;
    BOOL inStack;
    id userObject;
}

- (void).cxx_destruct;
- (id)initWithUserObject:(id)arg1;

@end

@interface DVTMockSigningCertificate : DVTSigningCertificate
{
    struct OpaqueSecCertificateRef *_certificateRef;
    BOOL _isIdentityMock;
    BOOL _isTrustedMock;
    BOOL _isValidForCodesigningMock;
    BOOL _isForServerMock;
    NSString *_certificateKindMock;
    NSString *_commonNameMock;
    NSString *_portalTeamIDMock;
    NSString *_portalTeamNameMock;
    NSString *_portalMemberIDMock;
    NSDate *_issueDateMock;
    NSDate *_expirationDateMock;
    NSString *_sha1HashMock;
    NSString *_serialNumberMock;
}

+ (id)underlyingObject;
@property BOOL isForServerMock; // @synthesize isForServerMock=_isForServerMock;
@property BOOL isValidForCodesigningMock; // @synthesize isValidForCodesigningMock=_isValidForCodesigningMock;
@property(copy) NSString *serialNumberMock; // @synthesize serialNumberMock=_serialNumberMock;
@property(copy) NSString *sha1HashMock; // @synthesize sha1HashMock=_sha1HashMock;
@property BOOL isTrustedMock; // @synthesize isTrustedMock=_isTrustedMock;
@property(copy) NSDate *expirationDateMock; // @synthesize expirationDateMock=_expirationDateMock;
@property(copy) NSDate *issueDateMock; // @synthesize issueDateMock=_issueDateMock;
@property BOOL isIdentityMock; // @synthesize isIdentityMock=_isIdentityMock;
@property(copy) NSString *portalMemberIDMock; // @synthesize portalMemberIDMock=_portalMemberIDMock;
@property(copy) NSString *portalTeamNameMock; // @synthesize portalTeamNameMock=_portalTeamNameMock;
@property(copy) NSString *portalTeamIDMock; // @synthesize portalTeamIDMock=_portalTeamIDMock;
@property(copy) NSString *commonNameMock; // @synthesize commonNameMock=_commonNameMock;
@property(copy) NSString *certificateKindMock; // @synthesize certificateKindMock=_certificateKindMock;
- (void).cxx_destruct;
- (id)defaultDesignatedRequirementsForIdentifier:(id)arg1;
- (struct OpaqueSecCertificateRef *)certificateRef;
- (BOOL)isForServer;
- (BOOL)isValidForCodeSigning;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (BOOL)isExpired;
- (id)serialNumber;
- (id)sha1Hash;
- (BOOL)isTrusted;
- (id)expirationDate;
- (id)issueDate;
- (BOOL)isIdentity;
- (id)portalMemberID;
- (id)portalTeamName;
- (id)portalTeamID;
- (id)commonName;
- (id)certificateKind;
- (void)validate;
- (id)initWithDictionary:(id)arg1;
- (id)initWithPlist:(id)arg1;
- (id)init;
- (id)initWithUnderlyingType:(id)arg1 logAspect:(id)arg2;

@end

@interface _DVTTimeSlicedMainThreadActiveWorkQueues : NSObject
{
    NSMutableOrderedSet *_workQueues[5];
    char _workQueuesActive[5];
    BOOL _nextProcessingBatchScheduled;
}

+ (void)initialize;
- (void).cxx_destruct;
- (void)_removeWorkQueue:(id)arg1 atSlot:(unsigned long long)arg2;
- (void)_addWorkQueue:(id)arg1 atSlot:(unsigned long long)arg2;
- (void)_scheduleProcessing;
- (id)_nextWorkQueue;
- (void)_processWorkQueuesOnDeadline;
- (id)init;

@end

@interface DVTTimeSlicedMainThreadWorkQueue : NSObject <DVTInvalidation>
{
    DVTStackBacktrace *_creationBacktrace;
    unsigned long long _qosSlot;
    BOOL _enabled;
    BOOL _workIsEnqueued;
    CDUnknownBlockType _itemProcessingBlock;
    CDUnknownBlockType _batchStartingBlock;
    CDUnknownBlockType _batchFinishingBlock;
}

+ (void)timeSlicedEnumerateItems:(id)arg1 withOwner:(id)arg2 usingBlock:(CDUnknownBlockType)arg3 completionBlock:(CDUnknownBlockType)arg4;
+ (id)orderedQueue;
+ (id)weakUnorderedQueue;
+ (id)unorderedQueue;
+ (id)orderedBlockProcessingQueue;
+ (id)unorderedBlockProcessingQueue;
+ (id)orderedQueueWithItemProcessingBlock:(CDUnknownBlockType)arg1;
+ (id)weakUnorderedQueueWithItemProcessingBlock:(CDUnknownBlockType)arg1;
+ (id)unorderedQueueWithItemProcessingBlock:(CDUnknownBlockType)arg1;
+ (void)initialize;
@property BOOL workIsEnqueued; // @synthesize workIsEnqueued=_workIsEnqueued;
@property(copy) CDUnknownBlockType batchFinishingBlock; // @synthesize batchFinishingBlock=_batchFinishingBlock;
@property(copy) CDUnknownBlockType batchStartingBlock; // @synthesize batchStartingBlock=_batchStartingBlock;
@property(copy) CDUnknownBlockType itemProcessingBlock; // @synthesize itemProcessingBlock=_itemProcessingBlock;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
- (void).cxx_destruct;
- (void)_processWithDeadline:(unsigned long long)arg1;
- (void)_evaluateProcessingStatus;
@property long long qualityOfService;
@property(getter=isEnabled) BOOL enabled;
- (void)clearAllItems;
- (void)dequeueItems:(id)arg1;
- (void)dequeueItem:(id)arg1;
- (void)enqueueItemsAtFront:(id)arg1;
- (void)enqueueItemAtFront:(id)arg1;
- (void)enqueueItems:(id)arg1;
- (void)enqueueItem:(id)arg1;
- (void)_processWorkItemsWithDeadline:(unsigned long long)arg1;
- (BOOL)_workIsEnqueued;
- (void)_removeAllWorkItems;
- (void)_removeWorkItems:(id)arg1;
- (void)_removeWorkItem:(id)arg1;
- (void)_addWorkItemsAtFront:(id)arg1;
- (void)_addWorkItemAtFront:(id)arg1;
- (void)_addWorkItems:(id)arg1;
- (void)_addWorkItem:(id)arg1;
- (void)primitiveInvalidate;
- (id)_init;
- (void)enqueueWithClosure:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface _DVTTimeSlicedMainThreadUnorderedUniquingWorkQueue : DVTTimeSlicedMainThreadWorkQueue
{
    NSHashTable *_workItems;
    unsigned long long _hashTableOptions;
    unsigned long long _lastBatchSize;
}

- (void).cxx_destruct;
- (id)_batchOfWorkItems;
- (void)_processWorkItemsWithDeadline:(unsigned long long)arg1;
- (void)_removeWorkItems:(id)arg1;
- (void)_removeWorkItem:(id)arg1;
- (BOOL)_workIsEnqueued;
- (void)_removeAllWorkItems;
- (void)_addWorkItems:(id)arg1;
- (void)_addWorkItem:(id)arg1;
- (void)primitiveInvalidate;
- (id)_initWithStorageOptions:(unsigned long long)arg1;

@end

@interface _DVTTimeSlicedMainThreadOrderedUniquingWorkQueue : DVTTimeSlicedMainThreadWorkQueue
{
    NSMutableOrderedSet *_workItems;
}

- (void).cxx_destruct;
- (void)_processWorkItemsWithDeadline:(unsigned long long)arg1;
- (void)_removeWorkItems:(id)arg1;
- (void)_removeWorkItem:(id)arg1;
- (BOOL)_workIsEnqueued;
- (void)_removeAllWorkItems;
- (void)_addWorkItemsAtFront:(id)arg1;
- (void)_addWorkItemAtFront:(id)arg1;
- (void)_addWorkItems:(id)arg1;
- (void)_addWorkItem:(id)arg1;
- (void)primitiveInvalidate;
- (id)_init;

@end

@interface _DVTTimeSlicedMainThreadOrderedNonUniquingWorkQueue : DVTTimeSlicedMainThreadWorkQueue
{
    NSMutableArray *_workItems;
}

- (void).cxx_destruct;
- (void)_processWorkItemsWithDeadline:(unsigned long long)arg1;
- (void)_removeWorkItems:(id)arg1;
- (void)_removeWorkItem:(id)arg1;
- (BOOL)_workIsEnqueued;
- (void)_removeAllWorkItems;
- (void)_addWorkItemsAtFront:(id)arg1;
- (void)_addWorkItemAtFront:(id)arg1;
- (void)_addWorkItems:(id)arg1;
- (void)_addWorkItem:(id)arg1;
- (void)primitiveInvalidate;
- (id)_init;

@end

@interface _DVTTimeSlicedMainThreadUnorderedNonUniquingWorkQueue : DVTTimeSlicedMainThreadWorkQueue
{
    NSMutableArray *_workItems;
}

- (void).cxx_destruct;
- (void)_processWorkItemsWithDeadline:(unsigned long long)arg1;
- (void)_removeWorkItems:(id)arg1;
- (void)_removeWorkItem:(id)arg1;
- (BOOL)_workIsEnqueued;
- (void)_removeAllWorkItems;
- (void)_addWorkItemsAtFront:(id)arg1;
- (void)_addWorkItemAtFront:(id)arg1;
- (void)_addWorkItems:(id)arg1;
- (void)_addWorkItem:(id)arg1;
- (void)primitiveInvalidate;
- (id)_init;

@end

@interface DVTLocalLogSymbolicator : NSObject
{
    NSArray *_dSYMs;
    NSSet *_missingUUIDs;
}

+ (id)symbolicatorWithDSYMs:(id)arg1;
+ (id)symbolicator;
+ (id)symbolicateCrashPath;
@property(copy) NSSet *missingUUIDs; // @synthesize missingUUIDs=_missingUUIDs;
@property(readonly, copy) NSArray *dSYMs; // @synthesize dSYMs=_dSYMs;
- (void).cxx_destruct;
- (void)_parseToolStandardError:(id)arg1;
- (void)symbolicateLogData:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (id)symbolicateLogData:(id)arg1 error:(id *)arg2;

@end

@interface DVTExtraXMLArchiveData : NSObject
{
    NSMutableArray *_mutableAttributes;
    NSMutableArray *_mutableElements;
}

@property(readonly) NSMutableArray *mutableElements; // @synthesize mutableElements=_mutableElements;
@property(readonly) NSMutableArray *mutableAttributes; // @synthesize mutableAttributes=_mutableAttributes;
- (void).cxx_destruct;
- (id)description;
- (id)init;

@end

@interface DVTExtraXMLAttribute : NSObject
{
    NSString *_previousAttributeName;
    NSString *_name;
    NSString *_value;
}

@property(copy) NSString *previousAttributeName; // @synthesize previousAttributeName=_previousAttributeName;
@property(copy) NSString *value; // @synthesize value=_value;
@property(copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;

@end

@interface DVTExtraXMLElement : NSObject
{
    NSString *_name;
    NSMutableArray *_mutableAttributeNames;
    NSMutableArray *_mutableAttributeValues;
    NSMutableArray *_mutableElements;
}

@property(readonly) NSMutableArray *mutableElements; // @synthesize mutableElements=_mutableElements;
@property(readonly) NSMutableArray *mutableAttributeValues; // @synthesize mutableAttributeValues=_mutableAttributeValues;
@property(readonly) NSMutableArray *mutableAttributeNames; // @synthesize mutableAttributeNames=_mutableAttributeNames;
@property(copy) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)init;

@end

@interface _DVTDSMManagedDevice : NSObject
{
    DVTDevice *_device;
    DVTObservingToken *_token;
}

@property(retain, nonatomic) DVTObservingToken *token; // @synthesize token=_token;
@property(retain, nonatomic) DVTDevice *device; // @synthesize device=_device;
- (void).cxx_destruct;

@end

@interface DVTDeviceStateManager : NSObject
{
    NSMutableDictionary *_managedDevices;
    NSObject<OS_dispatch_queue> *_serialQueue;
}

- (void).cxx_destruct;
- (void)_promoteToReadyState:(id)arg1;
- (void)_promoteToTrustedState:(id)arg1;
- (void)_promoteToStartedState:(id)arg1;
- (void)_promoteToConnectedState:(id)arg1;
- (void)_promoteToPresentState:(id)arg1;
- (void)removeDeviceFromStateManagement:(id)arg1;
- (void)beginManagingStateOfDevice:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface DVTDeveloperAccountCredentials : NSObject <NSCopying>
{
    BOOL __optOutOfTokenRequirement;
    NSString *_username;
    NSURLCredential *_URLCredential;
}

+ (id)URLProtectionSpace;
+ (id)URLProtectionSpaces;
+ (id)accountCredentialsFromUsername:(id)arg1 alternateDSID:(id)arg2 token:(id)arg3 error:(id *)arg4;
+ (id)accountCredentialsFromUsername:(id)arg1 password:(id)arg2 error:(id *)arg3;
+ (id)_accountCredentialsFromUsername:(id)arg1 alternateDSID:(id)arg2 token:(id)arg3 keychain:(struct OpaqueSecKeychainRef *)arg4 wantsAllApplicationsToAccessKeychainItems:(BOOL)arg5 successfullyPersisted:(char *)arg6 error:(id *)arg7;
+ (id)_accountCredentialsFromUsername:(id)arg1 password:(id)arg2 keychain:(struct OpaqueSecKeychainRef *)arg3 wantsAllApplicationsToAccessKeychainItems:(BOOL)arg4 successfullyPersisted:(char *)arg5 error:(id *)arg6;
+ (id)accountCredentialsForDefaultCredentials;
+ (id)_accountCredentialsForUsername:(id)arg1 keychain:(struct OpaqueSecKeychainRef *)arg2 error:(id *)arg3;
+ (id)allAccountCredentials;
@property BOOL _optOutOfTokenRequirement; // @synthesize _optOutOfTokenRequirement=__optOutOfTokenRequirement;
@property(readonly, nonatomic) NSURLCredential *URLCredential; // @synthesize URLCredential=_URLCredential;
@property(readonly, nonatomic) NSString *username; // @synthesize username=_username;
- (void).cxx_destruct;
- (void)applyAuthenticationHeadersToRequest:(id)arg1;
@property(readonly, nonatomic) NSDictionary *authenticationHeaders;
- (id)_authenticationHeadersForRequest:(id)arg1;
- (id)_manuallyProvidedAuthenticationHeaders;
@property(readonly, nonatomic) AKAppleIDSession *appleIDSession;
- (BOOL)_deleteFromKeychain:(struct OpaqueSecKeychainRef *)arg1 error:(id *)arg2;
- (BOOL)saveToKeychain:(struct OpaqueSecKeychainRef *)arg1 wantsAllApplicationsToAccessKeychainItems:(BOOL)arg2 error:(id *)arg3;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithURLCredential:(id)arg1 username:(id)arg2;
- (id)initWithURLCredential:(id)arg1;
- (BOOL)_isInternalCredentials;
@property(readonly, nonatomic) BOOL shouldRequireTokenBasedAuthentication;
@property(readonly, nonatomic) BOOL isTokenBasedAuthentication;
- (id)_accountCredentialsWithPassword:(id)arg1 keychain:(struct OpaqueSecKeychainRef *)arg2 wantsAllApplicationsToAccessKeychainItems:(BOOL)arg3 successfullyPersisted:(char *)arg4 error:(id *)arg5;

@end

@interface DVTHashedLock : NSObject
{
    int _count;
    struct _opaque_pthread_mutex_t {
        long long _field1;
        char _field2[56];
    } *_mutexes;
}

+ (id)sharedLock;
- (void)dealloc;
- (void)performWithHash:(unsigned long long)arg1 lockedBlock:(CDUnknownBlockType)arg2;
- (void)performWithObject:(id)arg1 lockedBlock:(CDUnknownBlockType)arg2;
- (id)initWithLockCount:(int)arg1;

@end

@interface DVTProcessInformation : NSObject
{
    int _pid;
    NSString *_displayName;
    NSURL *_processURL;
    NSString *_preferredArchitecture;
}

@property(readonly) NSString *preferredArchitecture; // @synthesize preferredArchitecture=_preferredArchitecture;
@property(readonly) NSURL *processURL; // @synthesize processURL=_processURL;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property int pid; // @synthesize pid=_pid;
- (void).cxx_destruct;
- (long long)displayNameCompare:(id)arg1;
- (void)setPreferredArchitecture:(id)arg1;
- (void)setProcessURL:(id)arg1;
- (void)setDisplayName:(id)arg1;
@property(readonly) BOOL isDebuggable;
- (id)initWithPID:(int)arg1;

@end

@interface DVTXPCServiceInformation : DVTProcessInformation
{
    NSDictionary *_infoPlist;
    BOOL _startSuspended;
    int _xpcParentPid;
    NSString *_xpcServiceName;
    NSDictionary *_environment;
    NSArray *_arguments;
    NSString *_pathToInterpose;
    NSString *_fullPath;
    NSString *_containerAppID;
    NSString *_appContainerPath;
}

@property(retain) NSString *appContainerPath; // @synthesize appContainerPath=_appContainerPath;
@property(retain) NSString *containerAppID; // @synthesize containerAppID=_containerAppID;
@property(retain) NSString *fullPath; // @synthesize fullPath=_fullPath;
@property(retain) NSString *pathToInterpose; // @synthesize pathToInterpose=_pathToInterpose;
@property BOOL startSuspended; // @synthesize startSuspended=_startSuspended;
@property(retain) NSArray *arguments; // @synthesize arguments=_arguments;
@property(retain) NSDictionary *environment; // @synthesize environment=_environment;
@property(retain) NSString *xpcServiceName; // @synthesize xpcServiceName=_xpcServiceName;
@property int xpcParentPid; // @synthesize xpcParentPid=_xpcParentPid;
- (void).cxx_destruct;
- (BOOL)isWidgetExtension;
- (id)extensionType;
- (id)extensionInfo;
- (id)_infoPlist;
- (id)displayName;
- (BOOL)isDebuggable;
- (id)description;
- (id)initWithServiceName:(id)arg1 pid:(int)arg2 parentPID:(int)arg3 appContainerPath:(id)arg4;

@end

@interface _DVTFoundationPrivateClassForFindingBundle : NSObject
{
}

@end

@interface _DVTErrorRecoveryHandler : NSObject
{
}

- (BOOL)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2;
- (void)attemptRecoveryFromError:(id)arg1 optionIndex:(unsigned long long)arg2 delegate:(id)arg3 didRecoverSelector:(SEL)arg4 contextInfo:(void *)arg5;

@end

@interface DVTMacroExpansionString : NSString <DVTMacroExpansion>
{
    NSString *_origString;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
@property(readonly, copy) NSString *description;
- (id)replacementObjectForCoder:(id)arg1;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithOriginalString:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface DVTMacroExpansionString_Literal : DVTMacroExpansionString
{
    unsigned long long _hashValue;
}

+ (id)newWithLiteralString:(id)arg1;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (unsigned long long)hash;
- (BOOL)dvt_isLiteral;
- (id)initWithLiteralString:(id)arg1;

@end

@interface DVTMacroExpansionString_Substitution : DVTMacroExpansionString
{
    NSString<DVTMacroExpansion> *_macroNameExpr;
    BOOL _alwaysPreserve;
    unsigned int _numOperators;
    DVTMacroExpansionOperator *_operators[0];
}

+ (id)newWithOriginalString:(id)arg1 macroNameExpression:(id)arg2 preserveOriginalStringIfUnresolved:(BOOL)arg3 operators:(struct ArrayBuilder *)arg4;
- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (BOOL)dvt_isLiteral;
- (void)dealloc;
- (id)initWithOriginalString:(id)arg1 macroNameExpression:(id)arg2 preserveOriginalStringIfUnresolved:(BOOL)arg3 operators:(struct ArrayBuilder *)arg4;

@end

@interface DVTMacroExpansionString_StringSubstitution : DVTMacroExpansionString_Substitution
{
}

- (id)dvt_debugDescription;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;

@end

@interface DVTMacroExpansionString_Concatenation : DVTMacroExpansionString
{
    unsigned long long _numSubstrings;
    NSString<DVTMacroExpansion> *_substrings[0];
}

+ (id)newWithOriginalString:(id)arg1 substrings:(struct ArrayBuilder *)arg2;
- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (BOOL)dvt_isLiteral;
- (void)dealloc;
- (id)initWithOriginalString:(id)arg1 substrings:(struct ArrayBuilder *)arg2;

@end

@interface DVTMacroExpansionStringList : NSArray <DVTMacroExpansion>
{
    NSString<DVTMacroExpansion> *_stringForm;
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
@property(readonly, copy) NSString *description;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface DVTMacroExpansionStringList_NonLiteral : DVTMacroExpansionStringList
{
    unsigned long long _numElements;
    NSString<DVTMacroExpansion> *_elements[0];
}

+ (id)newWithStringForm:(id)arg1 elements:(struct ArrayBuilder *)arg2;
- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)description;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (void)dealloc;
- (id)initWithStringForm:(id)arg1 elements:(struct ArrayBuilder *)arg2;

@end

@interface DVTMacroExpansionStringList_Literal : DVTMacroExpansionStringList
{
    NSArray *_literalStrings;
}

+ (id)newWithStringForm:(id)arg1 literalStrings:(id)arg2;
- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)description;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)initWithStringForm:(id)arg1 literalStrings:(id)arg2;

@end

@interface DVTMacroExpansionBlock : NSObject <DVTMacroExpansion>
{
    CDUnknownBlockType _block;
}

- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)copy;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTMacroAssignmentInfo : NSObject
{
    NSString *_macroName;
    id <DVTMacroExpansion> _value;
    DVTMacroDefinitionConditionSet *_conditionSet;
}

+ (id)newWithMacroName:(id)arg1 value:(id)arg2 conditionSet:(id)arg3;
@property(readonly) DVTMacroDefinitionConditionSet *conditionSet; // @synthesize conditionSet=_conditionSet;
@property(readonly) id <DVTMacroExpansion> value; // @synthesize value=_value;
@property(readonly) NSString *macroName; // @synthesize macroName=_macroName;
- (void).cxx_destruct;
- (id)description;
- (id)initWithMacroName:(id)arg1 value:(id)arg2 conditionSet:(id)arg3;

@end

@interface DVTMacroExpansionIntegerMetric : NSObject
{
    NSString *_label;
    unsigned long long *_sampleCounts;
    struct _NSRange _valueRange;
}

@property(readonly) unsigned long long *sampleCounts; // @synthesize sampleCounts=_sampleCounts;
@property(readonly) struct _NSRange valueRange; // @synthesize valueRange=_valueRange;
@property(readonly) NSString *label; // @synthesize label=_label;
- (void).cxx_destruct;
- (id)longDescription;
- (void)addValue:(unsigned long long)arg1;
- (void)dealloc;
- (id)initWithLabel:(id)arg1 valueRange:(struct _NSRange)arg2;

@end

@interface DVTMacroExpansionStatistics : NSObject
{
    struct os_unfair_lock_s _lock;
    unsigned long long _numMacroDefinitionLookups;
    NSCountedSet *_macroNameLookupCounts;
    unsigned long long _numMacroLookupCursorsCreated;
    NSCountedSet *_macroNameLookupCursorCreationCounts;
    unsigned long long _numFirstDefinitionRetrievals;
    NSCountedSet *_macroNameFirstDefnRetrievalCounts;
}

+ (id)defaultStatistics;
@property(readonly) NSCountedSet *macroNameFirstDefnRetrievalCounts; // @synthesize macroNameFirstDefnRetrievalCounts=_macroNameFirstDefnRetrievalCounts;
@property(readonly) unsigned long long numFirstDefinitionRetrievals; // @synthesize numFirstDefinitionRetrievals=_numFirstDefinitionRetrievals;
@property(readonly) NSCountedSet *macroNameLookupCursorCreationCounts; // @synthesize macroNameLookupCursorCreationCounts=_macroNameLookupCursorCreationCounts;
@property(readonly) unsigned long long numMacroLookupCursorsCreated; // @synthesize numMacroLookupCursorsCreated=_numMacroLookupCursorsCreated;
@property(readonly) NSCountedSet *macroNameLookupCounts; // @synthesize macroNameLookupCounts=_macroNameLookupCounts;
@property(readonly) unsigned long long numMacroDefinitionLookups; // @synthesize numMacroDefinitionLookups=_numMacroDefinitionLookups;
- (void).cxx_destruct;
- (void)recordRetrievalOfFirstDefinitionForMacroName:(id)arg1;
- (void)recordLookupCursorCreationForMacroName:(id)arg1;
- (void)recordLookupEventForMacroName:(id)arg1;
@property(readonly) unsigned long long numUniqueMacroNamesLookedUp;
- (id)init;

@end

@interface DVTMutableOrderedDictionary : NSMutableDictionary
{
    DVTMutableOrderedSet *set;
    NSMapTable *backingMapTable;
}

- (void).cxx_destruct;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)keyAtIndex:(long long)arg1;
- (id)allKeys;
- (id)lastValue;
- (id)lastKey;
- (id)firstValue;
- (id)firstKey;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)insertObject:(id)arg1 forKey:(id)arg2 atIndex:(long long)arg3;
- (unsigned long long)countByEnumeratingWithState:(CDStruct_70511ce9 *)arg1 objects:(id *)arg2 count:(unsigned long long)arg3;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;
- (Class)classForCoder;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithObjects:(id)arg1 forKeys:(id)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)init;
- (void)_DVTMutableDictionary_commonInit;

@end

@interface DVTDiffContext : NSObject <DVTInvalidation>
{
    DVTDiffDataSource *_originalDataSource;
    DVTDiffDataSource *_modifiedDataSource;
    DVTObservingToken *_originalDataSourceObserver;
    DVTObservingToken *_modifiedDataSourceObserver;
    NSMutableArray *_diffDescriptors;
    NSMutableArray *_tmpDiffDescriptors;
    NSOperationQueue *_diffQueue;
    unsigned long long _timestamp;
    struct _DVTDiffContextFlags _dcFlags;
    long long _defaultDiffMergeDirection;
    BOOL _shouldGenerateSubdiffDescriptors;
    BOOL _isRestoringState;
    BOOL _updatingChangedDescriptor;
    // Error parsing type: Ai, name: _needsUpdate
}

+ (BOOL)supportsInvalidationPrevention;
+ (unsigned long long)assertionBehaviorAfterEndOfEventForSelector:(SEL)arg1;
+ (void)initialize;
+ (id)performanceLogAspect;
@property BOOL isRestoringState; // @synthesize isRestoringState=_isRestoringState;
@property(retain) NSMutableArray *tmpDiffDescriptors; // @synthesize tmpDiffDescriptors=_tmpDiffDescriptors;
@property unsigned long long timestamp; // @synthesize timestamp=_timestamp;
- (void).cxx_destruct;
- (void)_dumpDataSources;
- (void)copyDiffResultsWithDiffString:(CDUnknownBlockType)arg1;
- (void)copyDiffResults:(CDUnknownBlockType)arg1;
- (void)_waitOnAllPendingDiffQueueOperations;
@property(readonly) NSString *diffString;
- (id)diffStringForDescriptorInRange:(struct _NSRange)arg1;
- (id)diffStringForDescriptorInRange:(struct _NSRange)arg1 options:(id)arg2;
- (id)diffStringForDescriptors:(id)arg1 options:(id)arg2;
- (id)diffDescriptorIndexesForModifiedTokenRange:(struct _NSRange)arg1;
- (id)diffDescriptorIndexesForOriginalTokenRange:(struct _NSRange)arg1;
- (long long)numberOfModifiedDescriptors;
- (long long)numberOfCommonDescriptors;
- (long long)numberOfDiffDescriptors;
- (void)_buildDiffDescriptors;
- (void)_buildSubdescriptors;
- (struct __CFStorage *)_createLCSStorageInDiffDescriptor:(id)arg1 startIndex:(long long *)arg2;
- (id)tmpModifiedDescriptorIndexes;
@property(readonly) NSIndexSet *modifiedDescriptorIndexes;
@property(readonly) NSIndexSet *commonDescriptorIndexes;
- (void)setNeedsUpdateDiffDescriptors:(BOOL)arg1;
- (void)_internalBuildDiffDescriptors;
@property(readonly, copy) NSString *description;
- (struct _DVTDiffContextFlags)dcFlags;
- (void)setDcFlags:(struct _DVTDiffContextFlags)arg1;
@property long long defaultDiffMergeDirection;
@property BOOL shouldGenerateSubdiffDescriptors;
@property BOOL ignoresCommon;
@property BOOL ignoresLineEnds;
@property BOOL ignoresTrailingSpaces;
@property BOOL ignoresSpacesInRuns;
@property BOOL ignoresLeadingSpaces;
@property BOOL ignoresCase;
@property(retain) DVTDiffDataSource *modifiedDataSource;
- (BOOL)_setModifiedDataSource:(id)arg1;
@property(retain) DVTDiffDataSource *originalDataSource;
- (BOOL)_setOriginalDataSource:(id)arg1;
- (void)setUpdatingChangedDescriptor:(BOOL)arg1;
- (BOOL)updatingChangedDescriptor;
- (id)_observeDataSource:(id)arg1;
- (void)primitiveInvalidate;
- (id)init;
- (id)initWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2;
- (id)initWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2 updatesDescriptorsImmediately:(BOOL)arg3;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(copy) NSArray *diffDescriptors; // @dynamic diffDescriptors;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly, copy) NSMutableArray *mutableDiffDescriptors; // @dynamic mutableDiffDescriptors;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTObservableObjectProxy : NSObject
{
    DVTWeakInterposer *_representedObject_dvtWeakInterposer;
    NSMapTable *_observationInfo;
    NSCountedSet *_uniqueObservedKeyPaths;
}

- (void).cxx_destruct;
- (id)valueForUndefinedKey:(id)arg1;
- (id)registeredKeyPaths;
@property(nonatomic) __weak id representedObject;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2;
- (void)removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void *)arg3;
- (void)addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void *)arg4;
- (id)changeDictionaryForNotifications;
- (void)removeObservedKeyPath:(id)arg1;
- (void)addObservedKeyPath:(id)arg1;
- (void)forgetObservationInfoForObserver:(id)arg1;
- (void)setObservationInfo:(id)arg1 forObserver:(id)arg2;
- (id)observationInfoForObserver:(id)arg1;
- (id)init;

@end

@interface DVTConsoleOutputFileHandle : NSFileHandle
{
    BOOL _shouldEmitColor;
    unsigned long long _terminalWidth;
}

- (void)resetColors;
- (void)printf:(id)arg1;
- (id)initWithFileDescriptor:(int)arg1 closeOnDealloc:(BOOL)arg2;

@end

@interface DVTMockProvisioningProfile : NSObject <DVTProvisioningProfile>
{
    BOOL _isUniversalMock;
    BOOL _appleInternalMock;
    BOOL _xcodeManagedMock;
    BOOL _isActiveMock;
    NSArray *_signingCertificatesMock;
    NSDate *_creationDateMock;
    NSDate *_expirationDateMock;
    NSString *_UUIDMock;
    NSString *_nameMock;
    NSDictionary *_entitlementsMock;
    NSSet *_supportedUDIDsMock;
    NSString *_teamIDMock;
    NSString *_teamNameMock;
    NSString *_appIdentifierEntitlementMock;
    NSArray *_appIdentifierPrefixesMock;
    NSArray *_teamIdentifierPrefixesMock;
    NSString *_platformMock;
    NSString *_appIdentifierNameMock;
    DVTFilePath *_filePathMock;
}

@property(retain) DVTFilePath *filePathMock; // @synthesize filePathMock=_filePathMock;
@property(retain) NSString *appIdentifierNameMock; // @synthesize appIdentifierNameMock=_appIdentifierNameMock;
@property(nonatomic) BOOL isActiveMock; // @synthesize isActiveMock=_isActiveMock;
@property(nonatomic, getter=isXcodeManaged) BOOL xcodeManagedMock; // @synthesize xcodeManagedMock=_xcodeManagedMock;
@property(nonatomic, getter=isAppleInternalMock) BOOL appleInternalMock; // @synthesize appleInternalMock=_appleInternalMock;
@property(retain) NSString *platformMock; // @synthesize platformMock=_platformMock;
@property(retain) NSArray *teamIdentifierPrefixesMock; // @synthesize teamIdentifierPrefixesMock=_teamIdentifierPrefixesMock;
@property(retain) NSArray *appIdentifierPrefixesMock; // @synthesize appIdentifierPrefixesMock=_appIdentifierPrefixesMock;
@property(retain) NSString *appIdentifierEntitlementMock; // @synthesize appIdentifierEntitlementMock=_appIdentifierEntitlementMock;
@property(retain) NSString *teamNameMock; // @synthesize teamNameMock=_teamNameMock;
@property(retain) NSString *teamIDMock; // @synthesize teamIDMock=_teamIDMock;
@property(retain) NSSet *supportedUDIDsMock; // @synthesize supportedUDIDsMock=_supportedUDIDsMock;
@property BOOL isUniversalMock; // @synthesize isUniversalMock=_isUniversalMock;
@property(retain) NSDictionary *entitlementsMock; // @synthesize entitlementsMock=_entitlementsMock;
@property(retain) NSString *nameMock; // @synthesize nameMock=_nameMock;
@property(retain) NSString *UUIDMock; // @synthesize UUIDMock=_UUIDMock;
@property(retain) NSDate *expirationDateMock; // @synthesize expirationDateMock=_expirationDateMock;
@property(retain) NSDate *creationDateMock; // @synthesize creationDateMock=_creationDateMock;
@property(retain) NSArray *signingCertificatesMock; // @synthesize signingCertificatesMock=_signingCertificatesMock;
- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)longDescription;
- (BOOL)matchesBundleIdentifier:(id)arg1;
@property(readonly) BOOL isPushEnabled;
@property(readonly) BOOL isOMCEnabled;
@property(readonly) BOOL isWACEnabled;
@property(readonly) BOOL isHomeKitEnabled;
@property(readonly) BOOL isApplicationGroupsEnabled;
@property(readonly) BOOL isHealthKitEnabled;
@property(readonly) BOOL isAssociatedDomainsEnabled;
@property(readonly) BOOL isVPNLiteEnabled;
@property(readonly) BOOL isKeychainAccessGroupsEnabled;
@property(readonly) BOOL isGameCenterEnabled;
@property(readonly) BOOL isMapsEnabled;
@property(readonly) BOOL isInterAppAudioEnabled;
@property(readonly) BOOL isNetworkExtensionsEnabled;
@property(readonly) BOOL isMultipathEnabled;
@property(readonly) BOOL isHotspotConfigurationEnabled;
@property(readonly) BOOL isSiriEnabled;
@property(readonly) BOOL isDataProtectionEnabled;
@property(readonly) NSString *dataProtectionLevel;
@property(readonly) BOOL isPassbookEnabled;
@property(readonly) BOOL isICloudEnabled;
- (BOOL)allowsFeatures:(id)arg1 missingFeatures:(id *)arg2;
@property(readonly) DVTAppIDFeatures *features;
@property(readonly) NSString *appIdentifierEntitlement;
@property(readonly) BOOL expired;
@property(readonly) BOOL expiredOrWillExpireSoon;
@property(readonly) BOOL willExpireSoon;
@property(readonly) BOOL usesExplicitAppIdentifier;
@property(readonly) NSString *appIdentifierUserDescription;
@property(readonly) NSString *appIdentifierEntitlementWithoutPrefix;
@property(readonly) DVTPlatform *dvt_platform;
@property(readonly) BOOL isMacProfile;
- (long long)dateCompareDecending:(id)arg1;
- (long long)dateCompare:(id)arg1;
- (long long)localizedCompare:(id)arg1;
- (long long)compare:(id)arg1;
- (BOOL)writeToURL:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
- (BOOL)writeToFile:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;
@property(readonly) NSData *dataRepresentation;
@property(readonly, copy) DVTFilePath *filePath;
- (BOOL)hasCertificateMatchingIdentity:(id)arg1 includeExpired:(BOOL)arg2;
@property(readonly) NSArray *identityCertificates;
- (BOOL)containsCertificate:(struct OpaqueSecCertificateRef *)arg1;
@property(readonly) NSArray *certificates;
@property(readonly) NSString *preferredFilenameExtension;
@property(readonly) int version;
@property(readonly) BOOL isActive;
- (BOOL)isAppleInternal;
@property(readonly) NSString *provisioningProfilePlatformIdentifier;
@property(readonly) NSString *platform;
@property(readonly) NSArray *teamIdentifierPrefixes;
@property(readonly) NSString *appIdentifierName;
@property(readonly) NSArray *appIdentifierPrefixes;
@property(readonly) NSString *teamName;
@property(readonly) NSString *teamID;
@property(readonly) NSSet *supportedUDIDs;
@property(readonly) BOOL isUniversal;
@property(readonly) NSDictionary *entitlements;
@property(readonly) NSString *name;
@property(readonly) NSString *UUID;
@property(readonly) NSDate *expirationDate;
@property(readonly) NSDate *creationDate;
@property(readonly) NSArray *signingCertificates;
- (BOOL)canBeInstalledOnDevice:(id)arg1;
- (BOOL)canBeInstalledOnDeviceWithIdentifier:(id)arg1;
- (BOOL)containsSigningCertificate:(id)arg1;
- (void)validate;
@property(readonly, copy) NSString *description;
- (id)initWithDictionary:(id)arg1 certTable:(id)arg2;
- (id)initWithDictionary:(id)arg1;
- (id)initWithPlist:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTSDK : NSObject
{
    DVTPlatform *_platform;
    NSString *_canonicalName;
    NSString *_displayName;
    NSString *_operatingSystemVersion;
    DVTFilePath *_sdkPath;
    NSString *_docSetFeedName;
    NSURL *_docSetFeedURL;
    NSString *_alternateSDKName;
    NSArray *_supportedBuildToolComponents;
    NSArray *_librarySearchPaths;
    NSDictionary *_infoDictionary;
    NSString *_propertyConditionName;
    NSArray *_propertyConditionFallbackNames;
    NSString *_minimalDisplayName;
    NSDictionary *_defaultProperties;
    NSNumber *_isInternal;
    NSNumber *_isBaseSDK;
    DVTSearchPath *_commandLineToolSearchPath;
    NSArray *_headerSearchPaths;
    NSArray *_frameworkSearchPaths;
    NSDictionary *_versionInfo;
    NSArray *_toolchains;
    NSArray *_toolchainNames;
}

+ (id)sdksInDirectory:(id)arg1 forPlatform:(id)arg2;
+ (id)sdkInDirectory:(id)arg1 forPlatform:(id)arg2;
+ (id)sdkForPath:(id)arg1 forceCreate:(BOOL)arg2;
+ (id)sdkForPath:(id)arg1;
+ (BOOL)sdkForBootSystemRequiresSpecialTreatment;
+ (id)sdkForBootSystemOrNil;
+ (id)sdkForBootSystem;
+ (id)sdkForNameOrPath:(id)arg1 withBasePath:(id)arg2 forceCreate:(BOOL)arg3;
+ (id)_absolutePathForSDKPathString:(id)arg1;
+ (id)sdksForFamily:(id)arg1;
+ (id)sdkForCanonicalName:(id)arg1;
+ (void)_setSDK:(id)arg1 forCanonicalName:(id)arg2;
+ (id)_sdkForResolvedAbsolutePath:(id)arg1;
+ (void)_setSDK:(id)arg1 forResolvedAbsolutePath:(id)arg2;
+ (id)knownSDKs;
+ (BOOL)shouldAllowBootSystemSDK;
+ (void)initialize;
@property(readonly, copy) NSArray *toolchainNames; // @synthesize toolchainNames=_toolchainNames;
@property(readonly, copy) NSArray *propertyConditionFallbackNames; // @synthesize propertyConditionFallbackNames=_propertyConditionFallbackNames;
@property(readonly, copy) NSDictionary *defaultProperties; // @synthesize defaultProperties=_defaultProperties;
@property(readonly, copy) NSArray *toolchains; // @synthesize toolchains=_toolchains;
@property(readonly, copy) NSURL *docSetFeedURL; // @synthesize docSetFeedURL=_docSetFeedURL;
@property(readonly, copy) NSString *docSetFeedName; // @synthesize docSetFeedName=_docSetFeedName;
@property(readonly, copy) NSArray *librarySearchPaths; // @synthesize librarySearchPaths=_librarySearchPaths;
@property(readonly, copy) NSString *alternateSDKName; // @synthesize alternateSDKName=_alternateSDKName;
@property(readonly, copy) NSArray *supportedBuildToolComponents; // @synthesize supportedBuildToolComponents=_supportedBuildToolComponents;
@property(readonly, copy) NSString *propertyConditionName; // @synthesize propertyConditionName=_propertyConditionName;
@property(readonly, copy) NSString *minimalDisplayName; // @synthesize minimalDisplayName=_minimalDisplayName;
@property(readonly, copy) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, copy) NSString *canonicalName; // @synthesize canonicalName=_canonicalName;
@property(readonly, copy) DVTFilePath *sdkPath; // @synthesize sdkPath=_sdkPath;
@property(readonly, copy) NSDictionary *infoDictionary; // @synthesize infoDictionary=_infoDictionary;
@property(readonly, copy) NSString *operatingSystemVersion; // @synthesize operatingSystemVersion=_operatingSystemVersion;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)additionalLibrarySearchPaths;
- (id)additionalFrameworkSearchPaths;
- (id)additionalHeaderSearchPaths;
- (id)commandLineToolSearchPath;
@property(readonly) NSDictionary *versionInfo; // @synthesize versionInfo=_versionInfo;
@property(readonly, getter=isBaseSDK) BOOL baseSDK;
@property(readonly, getter=isInternal) BOOL internal;
@property(retain) DVTPlatform *platform;
- (BOOL)isEmbedded;
- (id)initWithFilePath:(id)arg1;
- (id)initWithFilePath:(id)arg1 infoDictionary:(id)arg2;

@end

@interface DVTDirectoryBasedCustomDataStore : NSObject <DVTCustomDataStoring, DVTInvalidation>
{
    DVTFilePath *_rootDirectoryPath;
    DVTFilePath *_customDataPath;
    DVTFilePath *_sharedDataPath;
    NSString *_perUserSubfolderName;
    NSString *_sharedSubfolderName;
    id <DVTDirectoryBasedCustomDataStoreDelegate> _delegate;
    BOOL _mayCreateRootDirectoryIfNeeded;
    BOOL _supportsCurrentUserOnly;
    BOOL _delegateUnlocks;
    BOOL _delegateWrites;
    BOOL _delegateRemoves;
    BOOL _delegateMoves;
}

+ (void)initialize;
+ (id)customDataStoreWithRootDirectoryPath:(id)arg1 perUserSubfolderName:(id)arg2 sharedSubfolderName:(id)arg3 supportCurrentUserOnly:(BOOL)arg4;
@property BOOL mayCreateRootDirectoryIfNeeded; // @synthesize mayCreateRootDirectoryIfNeeded=_mayCreateRootDirectoryIfNeeded;
@property(readonly) NSString *sharedSubfolderName; // @synthesize sharedSubfolderName=_sharedSubfolderName;
@property(readonly) NSString *perUserSubfolderName; // @synthesize perUserSubfolderName=_perUserSubfolderName;
@property(readonly) BOOL supportsCurrentUserOnly; // @synthesize supportsCurrentUserOnly=_supportsCurrentUserOnly;
@property(retain) DVTFilePath *rootDirectoryPath; // @synthesize rootDirectoryPath=_rootDirectoryPath;
- (void).cxx_destruct;
@property(readonly) NSString *displayName;
- (BOOL)supportsCustomDataForOwnership:(id)arg1;
- (void)moveCustomDataWithSpecifier:(id)arg1 toSpecifier:(id)arg2 completionQueue:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)removeCustomDataWithSpecifier:(id)arg1 completionQueue:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)writeCustomData:(id)arg1 withSpecifier:(id)arg2 forceOverwrite:(BOOL)arg3 completionQueue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (id)readCustomDataWithSpecifier:(id)arg1 error:(id *)arg2;
- (id)customDataOwnershipsForGrouping:(id)arg1;
- (id)customDataSpecifiersForGrouping:(id)arg1 ownership:(id)arg2;
- (BOOL)_specifierPathExistsAndIsValid:(id)arg1;
- (BOOL)_specifierNameIsValid:(id)arg1;
- (id)dataFilePathForSpecifier:(id)arg1;
- (id)_dataFolderPathForOwnership:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly) DVTFilePath *sharedDataPath; // @synthesize sharedDataPath=_sharedDataPath;
@property(readonly) DVTFilePath *customDataPath; // @synthesize customDataPath=_customDataPath;
- (void)setUnlockingDelegate:(id)arg1;
@property(retain) id <DVTDirectoryBasedCustomDataStoreDelegate> delegate;
@property(readonly, copy) NSString *description;
- (void)primitiveInvalidate;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTDeveloperAccountManager : NSObject <DVTDeveloperProfileAccountProvider>
{
    NSMutableArray *_accountObservers;
    NSOrderedSet *_allAccounts;
    NSOrderedSet *_developerAccounts;
    NSOrderedSet *_serverAccounts;
}

+ (id)keyPathsForValuesAffectingServerAccounts;
+ (id)keyPathsForValuesAffectingDeveloperAccounts;
+ (id)sharedAccountManager;
- (void).cxx_destruct;
@property(readonly) NSString *typeIdentifier;
- (BOOL)importAccountsFromKeychain:(struct OpaqueSecKeychainRef *)arg1 propertyList:(id)arg2 numberOfAccounts:(unsigned long long *)arg3 error:(id *)arg4;
- (BOOL)exportAccountsToKeychain:(struct OpaqueSecKeychainRef *)arg1 propertyList:(id *)arg2 numberOfAccounts:(unsigned long long *)arg3 error:(id *)arg4;
- (void)addAccountsFromArray:(id)arg1;
- (void)removeAccount:(id)arg1;
- (void)addServerAccount:(id)arg1;
- (void)addDeveloperAccount:(id)arg1;
@property(readonly, nonatomic) NSOrderedSet *serverAccounts; // @synthesize serverAccounts=_serverAccounts;
@property(readonly, nonatomic) NSOrderedSet *developerAccounts; // @synthesize developerAccounts=_developerAccounts;
@property(copy, nonatomic) NSOrderedSet *allAccounts; // @synthesize allAccounts=_allAccounts;
- (void)notifyAndUpdateAccountSessionObservers;
- (void)updateUserDefaults;
- (id)_accountDefaults;
- (id)_accountsByCreatingFromDefaults;
- (id)_accountsFromDefaults:(id)arg1 keychain:(struct OpaqueSecKeychainRef *)arg2;
- (id)_certBasedAccountWithCommonName:(id)arg1 serialNumber:(id)arg2 keychain:(struct OpaqueSecKeychainRef *)arg3;
- (id)_tokenBasedAccountWithUsername:(id)arg1;
- (BOOL)temporaryStateManagerWantsInMemoryOnlyBehavior;
- (id)_accountDefaultsWithFallbacks;
- (BOOL)hasAccountWithUsername:(id)arg1;
- (id)accountWithUsername:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTBlockBasedCancellationToken : NSObject <DVTCancellable>
{
    CDUnknownBlockType _block;
    DVTStackBacktrace *_creationBacktrace;
    BOOL _mustCancel;
    // Error parsing type: AC, name: _cancelled
}

- (void).cxx_destruct;
- (void)dealloc;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (void)cancel;
- (id)initWithMustCancel:(BOOL)arg1 block:(CDUnknownBlockType)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTFindRegularExpressionDescriptor : DVTFindDescriptor
{
    NSRegularExpression *_regularExpression;
}

@property(readonly) NSRegularExpression *regularExpression; // @synthesize regularExpression=_regularExpression;
- (void).cxx_destruct;
- (id)firstMatchingResultInString:(id)arg1 backwards:(BOOL)arg2 inRange:(struct _NSRange)arg3 withWordFindingBlock:(CDUnknownBlockType)arg4 passingTest:(CDUnknownBlockType)arg5 docLocationCreationBlock:(CDUnknownBlockType)arg6;
- (BOOL)caseSensitive;
- (id)displayString;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithRegularExpression:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPerformanceCheckpoint : NSObject
{
    NSString *_label;
    double _checkpointTime;
    id _statisticValues[0];
}

+ (id)newCheckpointWithLabel:(id)arg1;
@property(readonly) double checkpointTime; // @synthesize checkpointTime=_checkpointTime;
@property(readonly, copy) NSString *label; // @synthesize label=_label;
- (void).cxx_destruct;
- (void)iterateStatisticValues:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)initWithLabel:(id)arg1;

@end

@interface DVTUserDefaultsLeastRecentlyUsedCache : NSObject
{
    NSMutableArray *_keysRecentlyUsed;
    NSMutableDictionary *_cache;
    unsigned long long _cacheSize;
    NSString *_userDefaultsKey;
    DVTDispatchLock *_cacheLock;
}

@property(retain, nonatomic) DVTDispatchLock *cacheLock; // @synthesize cacheLock=_cacheLock;
@property(retain, nonatomic) NSString *userDefaultsKey; // @synthesize userDefaultsKey=_userDefaultsKey;
@property unsigned long long cacheSize; // @synthesize cacheSize=_cacheSize;
@property(retain, nonatomic) NSMutableDictionary *cache; // @synthesize cache=_cache;
@property(retain, nonatomic) NSMutableArray *keysRecentlyUsed; // @synthesize keysRecentlyUsed=_keysRecentlyUsed;
- (void).cxx_destruct;
- (void)removeAllObjects;
- (id)objectForKey:(id)arg1;
- (void)addObject:(id)arg1 key:(id)arg2;
- (void)_writeCacheToDisk;
- (id)description;
- (id)initWithUserDefaultsKey:(id)arg1 cacheSize:(unsigned long long)arg2;

@end

@interface DVTStreamingZip : NSObject <DVTStreamingZipArchiver>
{
}

+ (id)sharedInstance;
- (_Bool)extractStreamableZipAtPath:(id)arg1 toPath:(id)arg2 error:(id *)arg3;
- (_Bool)createStreamableZipOfDirectory:(id)arg1 atPath:(id)arg2 options:(id)arg3 error:(id *)arg4;
- (_Bool)createStreamableZipOfDirectory:(id)arg1 atPath:(id)arg2 error:(id *)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTSystemActivityToken : NSObject <DVTInvalidation>
{
    unsigned int _displaySleepAssertionID;
    unsigned int _systemSleepAssertionID;
    NSString *_reason;
    unsigned long long _activityOptions;
    id _processInfoToken;
}

+ (id)_descriptionOfOutstandingTokens:(id)arg1 withActivityOptions:(unsigned long long)arg2 logLevel:(int)arg3;
+ (void)initialize;
+ (id)_stringForActivityOptions:(unsigned long long)arg1;
+ (void)_accessSystemActivityTokensWithBlock:(CDUnknownBlockType)arg1;
@property(retain) id processInfoToken; // @synthesize processInfoToken=_processInfoToken;
@property unsigned long long activityOptions; // @synthesize activityOptions=_activityOptions;
@property(copy) NSString *reason; // @synthesize reason=_reason;
- (void).cxx_destruct;
- (void)primitiveInvalidate;
@property(readonly, copy) NSString *description;
- (id)initWithOptions:(unsigned long long)arg1 reason:(id)arg2;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTRangeArray : NSArray
{
    unsigned long long _count;
    struct _NSRange *_ranges;
}

+ (void)initialize;
- (id)sortedRangeArray;
- (id)normalizedRangeArray;
- (void)getRanges:(struct _NSRange *)arg1 count:(unsigned long long)arg2;
- (unsigned long long)indexOfRangeContainingOrFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeContainingOrPreceding:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangePreceding:(unsigned long long)arg1;
- (struct _NSRange)lastRange;
- (struct _NSRange)firstRange;
- (unsigned long long)indexOfRange:(struct _NSRange)arg1;
- (struct _NSRange)rangeAtIndex:(unsigned long long)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)descriptionWithLocale:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqualToArray:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;
- (id)initWithRange:(struct _NSRange)arg1;
- (id)initWithRanges:(const struct _NSRange *)arg1 count:(unsigned long long)arg2;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;

@end

@interface DVTMutableRangeArray : NSMutableArray
{
    unsigned long long _count;
    unsigned long long _capacity;
    struct _NSRange *_ranges;
}

+ (void)initialize;
- (void)sort;
- (void)normalize;
- (void)addRangesFromArray:(id)arg1;
- (void)replaceRangeAtIndex:(unsigned long long)arg1 withRange:(struct _NSRange)arg2;
- (void)removeAllRanges;
- (void)removeRangesAtIndexes:(id)arg1;
- (void)removeRangeAtIndex:(unsigned long long)arg1;
- (void)insertRange:(struct _NSRange)arg1 atIndex:(unsigned long long)arg2;
- (void)addRange:(struct _NSRange)arg1;
- (void)setRange:(struct _NSRange)arg1 atIndex:(unsigned long long)arg2;
- (unsigned long long)indexOfRangeContainingOrFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeContainingOrPreceding:(unsigned long long)arg1;
- (unsigned long long)indexOfRangeFollowing:(unsigned long long)arg1;
- (unsigned long long)indexOfRangePreceding:(unsigned long long)arg1;
- (struct _NSRange)lastRange;
- (struct _NSRange)firstRange;
- (unsigned long long)indexOfRange:(struct _NSRange)arg1;
- (struct _NSRange)rangeAtIndex:(unsigned long long)arg1;
- (void)replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)removeObjectAtIndex:(unsigned long long)arg1;
- (void)removeLastObject;
- (void)insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)addObject:(id)arg1;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (id)descriptionWithLocale:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqualToArray:(id)arg1;
- (unsigned long long)hash;
- (void)dealloc;
- (id)init;
- (id)initWithRanges:(const struct _NSRange *)arg1 count:(unsigned long long)arg2;
- (id)initWithObjects:(const id *)arg1 count:(unsigned long long)arg2;
- (id)initWithCapacity:(unsigned long long)arg1;

@end

@interface DVTSimpleXMLWriter : NSObject
{
    NSMutableData *_xmlData;
    NSMutableArray *_openContainers;
    long long _indentationLevel;
    BOOL _isInsideTag;
    BOOL _isInsideContainerTag;
}

- (void).cxx_destruct;
- (id)stringValue;
- (id)data;
- (void)finishWriting;
- (void)writeContent:(id)arg1;
- (void)writeContent:(id)arg1 withIndentation:(BOOL)arg2;
- (void)writeContent:(id)arg1 withIndentation:(BOOL)arg2 withNewline:(BOOL)arg3;
- (void)endContainer;
- (void)endContainerWithNewline:(BOOL)arg1;
- (void)endStartTag;
- (void)endStartTagWithNewline:(BOOL)arg1;
- (char *)_endStartTagString;
- (void)writeAttribute:(id)arg1 value:(id)arg2;
- (void)beginStartTag:(id)arg1;
- (void)beginStartTag:(id)arg1 isContainer:(BOOL)arg2;
- (void)writeRawUTF8:(const char *)arg1;
- (id)init;
- (id)initForWritingWithMutableData:(id)arg1;
- (void)writeXMLEpilogue;
- (void)writeXMLPrologue;

@end

@interface DVTWeakInterposer_RuntimeWeakReference : DVTWeakInterposer
{
    id _representedObject;
}

@property __weak id representedObject; // @synthesize representedObject=_representedObject;
- (void).cxx_destruct;

@end

@interface DVTAssertingWeakInterposer_RuntimeWeakReference : DVTWeakInterposer_RuntimeWeakReference
{
    Class representedObjectClass;
    void *representedObjectAddress;
}

@property void *representedObjectAddress; // @synthesize representedObjectAddress;
@property Class representedObjectClass; // @synthesize representedObjectClass;
- (void)_customSetup;
- (void)setRepresentedObject:(id)arg1;
- (id)representedObject;

@end

@interface DVTStringBuffer : NSObject
{
    unsigned long long bufferLen;
    unsigned long long bufferLoc;
    NSString *string;
    unsigned long long stringLen;
    unsigned long long stringLoc;
    unsigned short buffer[32];
    unsigned short curChar;
    unsigned short _unused;
}

- (void).cxx_destruct;

@end

@interface DVTTimerBlockWrapper : NSObject <DVTCancellable>
{
    NSTimer *_timer;
    CDUnknownBlockType _handler;
}

- (void).cxx_destruct;
- (void)fire:(id)arg1;
- (void)cancel;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (id)initWithTimeInterval:(double)arg1 repeats:(BOOL)arg2 handler:(CDUnknownBlockType)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTMTReport : NSObject
{
    struct __asl_object_s *_message;
}

- (void)recordSuccess:(BOOL)arg1 reason:(id)arg2;
- (void)recordID:(id)arg1 forKey:(char *)arg2;
- (void)recordNumber:(long long)arg1 forKey:(char *)arg2 deresolver:(CDUnknownBlockType)arg3;
- (void)recordTimeResult:(double)arg1 forKey:(char *)arg2 deresolver:(CDUnknownBlockType)arg3;
- (void)_logReport;
- (void)dealloc;
- (id)_initWithDomain:(char *)arg1 summarize:(BOOL)arg2;

@end

@interface DVTMessageTrace : NSObject
{
}

+ (void)reportRadarProblemOccurance:(unsigned long long)arg1;
+ (void)reportDetail:(char *)arg1 collecting:(CDUnknownBlockType)arg2;
+ (void)report:(char *)arg1 success:(BOOL)arg2 reason:(id)arg3;
+ (void)report:(char *)arg1 timeResult:(double)arg2 deresolver:(CDUnknownBlockType)arg3;
+ (void)report:(char *)arg1 number:(long long)arg2 deresolver:(CDUnknownBlockType)arg3;
+ (void)reportSummarized:(char *)arg1 ID:(id)arg2 category:(id)arg3 collecting:(CDUnknownBlockType)arg4;
+ (void)reportSummarized:(char *)arg1 collecting:(CDUnknownBlockType)arg2;
+ (void)reportSummarized:(char *)arg1 ID:(id)arg2 number:(long long)arg3 deresolver:(CDUnknownBlockType)arg4;
+ (void)reportSummarized:(char *)arg1 number:(long long)arg2 deresolver:(CDUnknownBlockType)arg3;
+ (void)reportSummarized:(char *)arg1 ID:(id)arg2;
+ (void)report:(char *)arg1 ID:(id)arg2;
+ (void)reportSummarized:(char *)arg1;
+ (void)reportHit:(char *)arg1;
+ (void)reportForDomain:(char *)arg1 summarize:(BOOL)arg2 collecting:(CDUnknownBlockType)arg3;
+ (double)delay:(double)arg1;
+ (void)initialize;

@end

@interface DVTDiagnosticsTool : NSObject
{
    NSString *_name;
    DVTFilePath *_path;
    NSArray *_arguments;
}

@property(retain, nonatomic) NSArray *arguments; // @synthesize arguments=_arguments;
@property(retain, nonatomic) DVTFilePath *path; // @synthesize path=_path;
@property(retain, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)initWithName:(id)arg1 path:(id)arg2 arguments:(id)arg3 error:(id *)arg4;

@end

@interface DVTMutableKnownStringSet : NSMutableSet
{
    DVTKnownStringMapping *_knownStringMapping;
    CDUnknownFunctionPointerType _stringToIndexFn;
    CDUnknownFunctionPointerType _indexToStringFn;
    unsigned long long _maxKnownStringIndex;
    unsigned long long _knownStringCount;
    char *_knownStringBits;
    NSMutableSet *_unknownStringSet;
}

+ (id)setWithKnownStringMapping:(id)arg1;
- (void).cxx_destruct;
- (id)longDescription;
- (void)removeObject:(id)arg1;
- (void)addObject:(id)arg1;
- (id)objectEnumerator;
- (id)member:(id)arg1;
- (unsigned long long)count;
- (id)knownStringMapping;
- (void)dealloc;
- (id)initWithCapacity:(unsigned long long)arg1;
- (id)initWithKnownStringMapping:(id)arg1;

@end

@interface DVTSigningIdentitySnapshot : NSObject
{
    NSString *_teamID;
    DVTDeveloperAccount *_account;
    NSArray *_signingIdentities;
}

+ (id)localSigningIdentitiesForTeamID:(id)arg1;
@property(copy, nonatomic) NSArray *signingIdentities; // @synthesize signingIdentities=_signingIdentities;
@property(retain, nonatomic) DVTDeveloperAccount *account; // @synthesize account=_account;
@property(copy, nonatomic) NSString *teamID; // @synthesize teamID=_teamID;
- (void).cxx_destruct;

@end

@interface DVTSourceSpecification : NSObject
{
    NSString *_identifier;
    NSString *_superSpecIdentifier;
    DVTSourceSpecification *_superSpecification;
    NSDictionary *_properties;
}

+ (id)localizedSpecificationTypeName;
+ (id)specificationRegistry;
+ (id)specificationRegistryName;
+ (id)_subSpecificationsOfSpecification:(id)arg1;
+ (id)registeredSpecifications;
+ (id)specificationsForIdentifiers:(id)arg1;
+ (id)specificationForIdentifier:(id)arg1;
+ (void)registerSpecificationTypeBaseClass:(Class)arg1;
+ (id)registerSpecificationProxiesFromPropertyListsInDirectory:(id)arg1 recursively:(BOOL)arg2;
+ (id)registerSpecificationProxiesFromPropertyListsInDirectory:(id)arg1 recursively:(BOOL)arg2 inBundle:(id)arg3;
+ (BOOL)_shouldRecurseIntoDirectoryNamed:(id)arg1 ofType:(id)arg2;
+ (id)_registerSpecificationProxiesOfType:(id)arg1 fromDictionaryOrArray:(id)arg2 inDirectory:(id)arg3 bundle:(id)arg4 sourceDescription:(id)arg5;
+ (id)registerSpecificationProxyFromPropertyList:(id)arg1;
+ (id)_pathExensionsToTypesRegistry;
+ (id)_typesToSpecTypeBaseClassesRegistry;
+ (id)specificationTypePathExtensions;
+ (id)specificationType;
+ (Class)specificationTypeBaseClass;
+ (void)registerSpecificationOrProxy:(id)arg1;
+ (void)initialize;
+ (void)searchForAndRegisterAllAvailableSpecifications;
@property(readonly) NSDictionary *properties; // @synthesize properties=_properties;
@property(readonly) NSString *superSpecIdentifier; // @synthesize superSpecIdentifier=_superSpecIdentifier;
- (void).cxx_destruct;
- (id)description;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (id)name;
- (id)stringForKey:(id)arg1;
- (id)objectForKey:(id)arg1;
- (id)_objectForKeyIgnoringInheritance:(id)arg1;
- (long long)nameCompare:(id)arg1;
- (long long)identifierCompare:(id)arg1;
- (id)subSpecifications;
- (BOOL)isKindOfSpecification:(id)arg1;
@property(readonly) DVTSourceSpecification *superSpecification; // @synthesize superSpecification=_superSpecification;
- (BOOL)isMissingSpecificationProxy;
- (id)initAsMissingSpecificationProxyWithIdentifier:(id)arg1 name:(id)arg2 description:(id)arg3;
- (id)initWithPropertyListDictionary:(id)arg1;

@end

@interface DVTArchitecture : NSObject <NSCopying>
{
    BOOL _is64Bit;
    int _CPUType;
    int _CPUSubType;
    NSString *_canonicalName;
    NSString *_displayName;
}

+ (id)architectureWithCPUType:(int)arg1 subType:(int)arg2;
+ (id)architectureWithCanonicalName:(id)arg1;
+ (id)allArchitectures;
+ (void)initialize;
@property(readonly) BOOL is64Bit; // @synthesize is64Bit=_is64Bit;
@property(readonly) int CPUSubType; // @synthesize CPUSubType=_CPUSubType;
@property(readonly) int CPUType; // @synthesize CPUType=_CPUType;
@property(readonly, copy) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, copy) NSString *canonicalName; // @synthesize canonicalName=_canonicalName;
- (void).cxx_destruct;
- (_Bool)matchesCPUType:(int)arg1 andSubType:(int)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)initWithExtension:(id)arg1;
- (id)initWithCanonicalName:(id)arg1 displayName:(id)arg2 CPUType:(int)arg3 CPUSubType:(int)arg4 is64Bit:(BOOL)arg5;

@end

@interface DVTDocumentLocation : NSObject <NSSecureCoding, NSCopying, DVTStringRepresentationPersistable, DVTSimpleSerialization>
{
    NSDictionary *_docParams;
    NSDictionary *_locParams;
    NSURL *_documentURL;
    NSNumber *_timestamp;
}

+ (BOOL)supportsSecureCoding;
+ (id)documentLocationWithURLScheme:(id)arg1 path:(id)arg2 documentParameters:(id)arg3 locationParameters:(id)arg4;
@property(readonly) NSNumber *timestamp; // @synthesize timestamp=_timestamp;
@property(readonly) NSURL *documentURL; // @synthesize documentURL=_documentURL;
- (void).cxx_destruct;
- (id)locationParameters;
- (id)documentParameters;
- (id)documentPath;
- (id)documentScheme;
- (void)dvt_writeToSerializer:(id)arg1;
- (id)dvt_initFromDeserializer:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)dvt_persistableStringRepresentation;
- (id)dvt_initFromPersistableStringRepresentation:(id)arg1 error:(id *)arg2;
- (long long)compare:(id)arg1;
@property(readonly, copy) NSString *description;
- (BOOL)isEqualDisregardingTimestamp:(id)arg1;
@property(readonly) unsigned long long hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithURL:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)documentURLString;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface _DVTNotificationReceiver : NSObject
{
    id _observer;
    SEL _selector;
    NSOperationQueue *_queue;
    CDUnknownBlockType _block;
    BOOL _registeredWithBlock;
    DVTStackBacktrace *_creationBacktrace;
    NSString *_notificationName;
}

- (void).cxx_destruct;
- (void)receiveNotification:(id)arg1;
- (id)initWithBlock:(CDUnknownBlockType)arg1 queue:(id)arg2;
- (id)initWithObserver:(id)arg1 selector:(SEL)arg2;

@end

@interface DVTNotificationToken : NSObject <DVTCancellable>
{
    NSNotificationCenter *_notificationCenter;
    id _observedObject;
    NSString *_name;
    _DVTNotificationReceiver *_receiver;
    DVTStackBacktrace *_creationBacktrace;
}

+ (void)initialize;
- (void).cxx_destruct;
- (void)dealloc;
- (void)cancel;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (id)initWithDistributedNotificationCenter:(id)arg1 receiver:(id)arg2 name:(id)arg3 observedObject:(id)arg4 suspensionBehavior:(unsigned long long)arg5;
- (id)initWithNotificationCenter:(id)arg1 receiver:(id)arg2 name:(id)arg3 observedObject:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTLogAspect : NSObject
{
    int _logLevel;
    int _effectiveLogLevel;
    NSString *_name;
    BOOL _signalInstruments;
    BOOL _takeTimeProfile;
    NSDictionary *_logHandlers;
    NSArray *_activeLoggers;
}

+ (id)logAspectWithName:(id)arg1;
+ (id)allAspects;
+ (int)defaultLogLevel;
+ (void)initialize;
@property(copy) NSArray *activeLoggers; // @synthesize activeLoggers=_activeLoggers;
@property BOOL takeTimeProfile; // @synthesize takeTimeProfile=_takeTimeProfile;
@property BOOL signalInstruments; // @synthesize signalInstruments=_signalInstruments;
@property(readonly) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (id)description;
- (void)unregisterLogHandler:(id)arg1;
- (id)registerLogHandler:(CDUnknownBlockType)arg1;
- (void)_logAndOutdentAtLogLevel:(int)arg1 withFormat:(id)arg2;
- (void)_logAndIndentAtLogLevel:(int)arg1 withFormat:(id)arg2;
- (void)_logAtLogLevel:(int)arg1 withFormat:(id)arg2;
@property int logLevel;
- (id)initWithName:(id)arg1 logLevel:(int)arg2 signalInstruments:(BOOL)arg3 takeTimeProfile:(BOOL)arg4 activeLoggers:(id)arg5;
- (id)init;

@end

@interface DVTCodesignableDeviceSnapshot : NSObject <DVTCodesignableDevice>
{
    BOOL _supportsProvisioning;
    NSString *_name;
    NSString *_nameForDeveloperPortal;
    NSString *_identifier;
    NSString *_platformIdentifier;
    NSSet *_proxiedDevices;
}

+ (id)snapshotFromCodesignableDevice:(id)arg1;
@property(copy) NSSet *proxiedDevices; // @synthesize proxiedDevices=_proxiedDevices;
@property BOOL supportsProvisioning; // @synthesize supportsProvisioning=_supportsProvisioning;
@property(copy) NSString *platformIdentifier; // @synthesize platformIdentifier=_platformIdentifier;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy) NSString *nameForDeveloperPortal; // @synthesize nameForDeveloperPortal=_nameForDeveloperPortal;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
@property(readonly, copy) NSString *description;
@property(readonly) DVTPlatform *platform;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

@interface DVTDiffDescriptor : NSObject <NSCoding, NSCopying, DVTDiffHashing>
{
    DVTDiffContext *_diffContext;
    struct _NSRange _originalTokenRange;
    struct _NSRange _modifiedTokenRange;
    struct _NSRange _originalContentRange;
    struct _NSRange _modifiedContentRange;
    unsigned long long _originalTokenHash;
    unsigned long long _modifiedTokenHash;
    DVTDiffDescriptor *_parentDiffDescriptor;
    NSMutableArray *_childDescriptors;
    NSDictionary *_subdescriptorResults;
    long long _diffDescriptorType;
    long long _diffMergeDirection;
    BOOL _resolved;
    BOOL _binaryConflict;
    BOOL _diffMergeDirectionLocked;
}

+ (void)initialize;
@property BOOL diffMergeDirectionLocked; // @synthesize diffMergeDirectionLocked=_diffMergeDirectionLocked;
@property BOOL binaryConflict; // @synthesize binaryConflict=_binaryConflict;
@property BOOL resolved; // @synthesize resolved=_resolved;
@property(retain) NSDictionary *subdescriptorResults; // @synthesize subdescriptorResults=_subdescriptorResults;
@property(retain) DVTDiffDescriptor *parentDiffDescriptor; // @synthesize parentDiffDescriptor=_parentDiffDescriptor;
@property struct _NSRange modifiedContentRange; // @synthesize modifiedContentRange=_modifiedContentRange;
@property struct _NSRange originalContentRange; // @synthesize originalContentRange=_originalContentRange;
@property unsigned long long modifiedTokenHash; // @synthesize modifiedTokenHash=_modifiedTokenHash;
@property unsigned long long originalTokenHash; // @synthesize originalTokenHash=_originalTokenHash;
@property long long diffDescriptorType; // @synthesize diffDescriptorType=_diffDescriptorType;
@property struct _NSRange modifiedTokenRange; // @synthesize modifiedTokenRange=_modifiedTokenRange;
@property struct _NSRange originalTokenRange; // @synthesize originalTokenRange=_originalTokenRange;
@property DVTDiffContext *diffContext; // @synthesize diffContext=_diffContext;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)arg1;
@property(readonly) BOOL isInsertionOrDeletion;
- (void)diffDescriptor:(id)arg1 willRemoveChildDiffDescriptor:(id)arg2;
- (void)diffDescriptor:(id)arg1 didAddChildDiffDescriptor:(id)arg2;
- (void)removeAllChildDiffDescriptors;
- (void)removeChildDiffDescriptorAtIndex:(long long)arg1;
- (void)removeChildDiffDescriptor:(id)arg1;
- (void)insertChildDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (void)addChildDiffDescriptor:(id)arg1;
- (void)removeObjectFromChildDiffDescriptorsAtIndex:(long long)arg1;
- (void)insertObject:(id)arg1 inChildDiffDescriptorsAtIndex:(long long)arg2;
- (void)_diffDescriptor:(id)arg1 willRemoveChildDiffDescriptor:(id)arg2;
- (void)_diffDescriptor:(id)arg1 didAddChildDiffDescriptor:(id)arg2;
@property long long diffMergeDirection; // @dynamic diffMergeDirection;
- (id)childDiffDescriptors;
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;
- (id)initWithDiffContext:(id)arg1;

@end

@interface DVTProvisioningProfileProvider : NSObject
{
}

+ (id)providerWithProvisioningProfileSearchPaths:(id)arg1;
+ (id)sharedProvider;
- (id)profileWithUUID:(id)arg1;
- (void)uninstallHostProfiles:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (void)installHostProfiles:(id)arg1 callback:(CDUnknownBlockType)arg2;
- (id)profileWithData:(id)arg1 error:(id *)arg2;
- (id)profileWithURL:(id)arg1 error:(id *)arg2;
- (BOOL)isProfileExpiringWithCodeSigningIdentity:(id)arg1 profileName:(id *)arg2;
- (id)expiringProfilesInExpansionContext:(id)arg1;
@property(readonly) NSSet *expiringProfiles;
- (id)allProfiles_sync;
@property(readonly) NSSet *allProfiles;
@property(readonly) BOOL areProfilesLoaded;
- (void)forceProfileLoading;

@end

@interface DVTToolchain : NSObject <NSCopying>
{
    NSString *_embeddedDebuggerSetting;
    DVTFilePath *_lldbPath;
    DVTVersion *_swiftVersion;
    NSNumber *_providesSwiftVersion;
    NSNumber *_allowAsOverrideToolchain;
    NSString *_identifier;
    DVTFilePath *_path;
    DVTVersion *_version;
    NSArray *_aliases;
    NSString *_displayName;
    NSString *_displayDescription;
    DVTMacroDefinitionTable *_defaultMacros;
    DVTMacroDefinitionTable *_overrideMacros;
    DVTMacroDefinitionTable *_additionalDefaultMacrosIfTopToolchain;
    DVTSearchPath *_executableBinarySearchPath;
    DVTSearchPath *_librarySearchPath;
    NSURL *_reportProblemURL;
    NSString *_shortDisplayName;
    NSDate *_createdDate;
    NSNumber *_compatibilityVersion;
    NSString *_compatibilityVersionDisplayString;
}

+ (id)lldbToolchainForToolchains:(id)arg1;
+ (id)defaultToolchain;
@property(readonly) NSString *compatibilityVersionDisplayString; // @synthesize compatibilityVersionDisplayString=_compatibilityVersionDisplayString;
@property(readonly) NSNumber *compatibilityVersion; // @synthesize compatibilityVersion=_compatibilityVersion;
@property(readonly) NSDate *createdDate; // @synthesize createdDate=_createdDate;
@property(readonly) NSString *shortDisplayName; // @synthesize shortDisplayName=_shortDisplayName;
@property(readonly) NSNumber *allowAsOverrideToolchain; // @synthesize allowAsOverrideToolchain=_allowAsOverrideToolchain;
@property(readonly) NSURL *reportProblemURL; // @synthesize reportProblemURL=_reportProblemURL;
@property(readonly) DVTSearchPath *librarySearchPath; // @synthesize librarySearchPath=_librarySearchPath;
@property(readonly) DVTSearchPath *executableBinarySearchPath; // @synthesize executableBinarySearchPath=_executableBinarySearchPath;
@property(readonly) DVTMacroDefinitionTable *additionalDefaultMacrosIfTopToolchain; // @synthesize additionalDefaultMacrosIfTopToolchain=_additionalDefaultMacrosIfTopToolchain;
@property(readonly) DVTMacroDefinitionTable *overrideMacros; // @synthesize overrideMacros=_overrideMacros;
@property(readonly) DVTMacroDefinitionTable *defaultMacros; // @synthesize defaultMacros=_defaultMacros;
@property(readonly) NSString *displayDescription; // @synthesize displayDescription=_displayDescription;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) NSArray *aliases; // @synthesize aliases=_aliases;
@property(readonly) DVTVersion *version; // @synthesize version=_version;
@property(readonly) DVTFilePath *path; // @synthesize path=_path;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
@property(readonly) BOOL participatesInSwiftVersionSupport;
@property(readonly) DVTVersion *swiftVersion;
- (id)lldbPath;
- (BOOL)requiresEmbeddedDebuggerForSwift;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)description;
- (id)infoDictionaryWithError:(id *)arg1;
- (id)init;
- (id)initWithPath:(id)arg1 error:(id *)arg2;

@end

@interface DVTToolchainRegistry : NSObject
{
    DVTSearchPath *_searchPath;
    NSSet *_appleApprovedPaths;
    id <DVTUserDefaults> _userDefaults;
    DVTDispatchLock *_lock;
    NSSet *_toolchains;
    NSDictionary *_invalidToolchains;
    NSDictionary *_identsToToolchains;
    NSDictionary *_aliasesToToolchains;
    DVTDelayedInvocation *_scanSearchPathsInvocation;
}

+ (BOOL)verifySignatureRevocationStatusForPath:(id)arg1 error:(id *)arg2;
+ (id)keyPathsForValuesAffectingAvailableOverrideToolchains;
+ (id)keyPathsForValuesAffectingAvailableBuildSystemToolchains;
+ (id)keyPathsForValuesAffectingActiveDefaultToolchain;
+ (id)keyPathsForValuesAffectingDefaultToolchainOverride;
+ (id)keyPathsForValuesAffectingDefaultToolchain;
+ (BOOL)registerToolchain:(id)arg1 identsToToolchains:(id)arg2 aliasesToToolchains:(id)arg3 appleApprovedPaths:(id)arg4 error:(id *)arg5;
+ (id)defaultRegistry;
- (void).cxx_destruct;
- (BOOL)isBuiltInToolchain:(id)arg1;
- (BOOL)verifyToolchain:(id)arg1 error:(id *)arg2;
@property(readonly) NSSet *availableOverrideToolchains;
@property(readonly) NSSet *availableBuildSystemToolchains;
- (id)toolchainsForToolchainsBuildSettingValue:(id)arg1;
@property(readonly) DVTToolchain *activeDefaultToolchain;
@property(retain) DVTToolchain *defaultToolchainOverride;
- (void)scanSearchPaths;
@property(readonly) DVTToolchain *defaultToolchain;
- (id)_toolchainForIdentifier:(id)arg1;
- (id)toolchainForIdentifier:(id)arg1;
@property(readonly) NSDictionary *invalidToolchains;
@property(readonly) NSSet *toolchains;
- (void)dealloc;
- (id)init;
- (id)initWithSearchPath:(id)arg1 appleApprovedPaths:(id)arg2 userDefaults:(id)arg3;

@end

@interface DVTToolchainOverrideOption : NSObject
{
    NSString *_origin;
    BOOL _isValid;
    BOOL _isBuiltIn;
    BOOL _isActive;
    DVTToolchain *_toolchainForDisplay;
    DVTToolchain *_toolchainForToolchainRegistryDefaultOverride;
    DVTToolchain *_toolchainForXcodebuildCommandLine;
    NSString *_displayName;
    NSString *_shortDisplayName;
    NSDate *_createdDate;
    NSString *_localizedCreatedDate;
    NSError *_validationError;
    DVTToolchainRegistry *_registry;
}

@property(readonly) DVTToolchainRegistry *registry; // @synthesize registry=_registry;
@property(readonly) BOOL isActive; // @synthesize isActive=_isActive;
@property(readonly) BOOL isBuiltIn; // @synthesize isBuiltIn=_isBuiltIn;
@property(readonly) NSError *validationError; // @synthesize validationError=_validationError;
@property(readonly) BOOL isValid; // @synthesize isValid=_isValid;
@property(readonly) NSString *localizedCreatedDate; // @synthesize localizedCreatedDate=_localizedCreatedDate;
@property(readonly) NSDate *createdDate; // @synthesize createdDate=_createdDate;
@property(readonly) NSString *shortDisplayName; // @synthesize shortDisplayName=_shortDisplayName;
@property(readonly) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly) DVTToolchain *toolchainForXcodebuildCommandLine; // @synthesize toolchainForXcodebuildCommandLine=_toolchainForXcodebuildCommandLine;
@property(readonly) DVTToolchain *toolchainForToolchainRegistryDefaultOverride; // @synthesize toolchainForToolchainRegistryDefaultOverride=_toolchainForToolchainRegistryDefaultOverride;
@property(readonly) DVTToolchain *toolchainForDisplay; // @synthesize toolchainForDisplay=_toolchainForDisplay;
- (void).cxx_destruct;
- (id)description;
- (BOOL)activateWithError:(id *)arg1;
@property(readonly) NSString *origin;
@property(readonly) NSString *localizedFileSize;
@property(readonly) unsigned long long fileSize;
- (id)initWithRegistry:(id)arg1 toolchainForDisplay:(id)arg2 toolchainForToolchainRegistryDefaultOverride:(id)arg3 toolchainForXcodebuildCommandLine:(id)arg4 displayNameOverride:(id)arg5 shortDisplayNameOverride:(id)arg6;

@end

@interface DVTToolchainOverrideOptionProvider : NSObject
{
    DVTToolchainRegistry *_registry;
    BOOL _isAppleInternal;
}

+ (id)keyPathsForValuesAffectingShouldOfferOptions;
+ (id)keyPathsForValuesAffectingOptionsIncludingDoNotOverride;
+ (id)keyPathsForValuesAffectingOptionsExcludingDoNotOverride;
+ (id)defaultProvider;
@property(readonly) DVTToolchainRegistry *registry; // @synthesize registry=_registry;
- (void).cxx_destruct;
@property(readonly) BOOL shouldOfferOptions;
@property(readonly) NSArray *optionsIncludingDoNotOverride;
@property(readonly) NSArray *optionsExcludingDoNotOverride;
- (id)initWithToolchainRegistry:(id)arg1 isAppleInternal:(BOOL)arg2;

@end

@interface DVTMockProvisioningProfileProvider : NSObject
{
}

@property(readonly) BOOL areProfilesLoaded;

@end

@interface DVTDiffWordDataSource : DVTDiffDataSource
{
    NSArray *_tokenStorage;
}

- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)didChange;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (CDStruct_3dd9eb72)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (id)_tokenStorageForDescriptor:(id)arg1;

@end

@interface DVTDiagnosticsCollector : NSObject <DVTInvalidation>
{
    DVTFilePath *_path;
    NSString *_extensionIdentifier;
    NSString *_extensionName;
    CDUnknownBlockType _handler;
    NSFileManager *_fm;
    NSDate *_startCollectingDate;
}

+ (void)initialize;
@property(retain, nonatomic) NSDate *startCollectingDate; // @synthesize startCollectingDate=_startCollectingDate;
@property(retain, nonatomic) NSFileManager *fm; // @synthesize fm=_fm;
@property(copy, nonatomic) CDUnknownBlockType handler; // @synthesize handler=_handler;
@property(copy, nonatomic) NSString *extensionName; // @synthesize extensionName=_extensionName;
@property(copy, nonatomic) NSString *extensionIdentifier; // @synthesize extensionIdentifier=_extensionIdentifier;
@property(retain, nonatomic) DVTFilePath *path; // @synthesize path=_path;
- (void).cxx_destruct;
- (id)_serializeErrors:(id)arg1;
- (void)_saveEnvironmentVariables;
- (BOOL)writeDictionary:(id)arg1 fileName:(id)arg2 subPath:(id)arg3 format:(unsigned long long)arg4;
- (BOOL)runToolAtPath:(id)arg1 arguments:(id)arg2 outputFileName:(id)arg3 error:(id *)arg4;
- (BOOL)runTool:(unsigned long long)arg1;
- (void)copyResourcesFromPaths:(id)arg1;
- (void)endCollectingWithErrors:(id)arg1;
- (void)startCollecting;
- (void)primitiveInvalidate;
- (id)dictionaryRepresentation;
- (id)init;
- (id)initWithIdentifier:(id)arg1 name:(id)arg2 path:(id)arg3 completion:(CDUnknownBlockType)arg4;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTCheapReusableSubstring : NSString
{
    NSString *_realString;
    unsigned long long _realStringLength;
    struct _NSRange _subrange;
    unsigned long long _hashValue;
    BOOL _hashValueValid;
}

- (void).cxx_destruct;
- (struct _NSRange)rangeOfCharacterFromSet:(id)arg1 options:(unsigned long long)arg2 range:(struct _NSRange)arg3;
- (BOOL)isEqualToString:(id)arg1;
- (void)getCharacters:(unsigned short *)arg1 range:(struct _NSRange)arg2;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (unsigned long long)hash;
- (void)setRealString:(id)arg1 subrange:(struct _NSRange)arg2;
- (id)initWithRealString:(id)arg1 subrange:(struct _NSRange)arg2;

@end

@interface DVTITunesConnectProxy : NSObject
{
}

+ (id)SDKIdentifierForSoftwareBundleDescription:(id)arg1;
+ (id)dSYMURLForAdamID:(id)arg1 bundleIdentifier:(id)arg2 version:(id)arg3 buildNumber:(id)arg4 platform:(id)arg5 session:(id)arg6 error:(id *)arg7;
+ (id)dSYMURLsForApplicationVersion:(id)arg1 usingSession:(id)arg2 error:(id *)arg3;
+ (id)iTunesPlatformForApplicationType:(int)arg1 usingSession:(id)arg2 error:(id *)arg3;
+ (id)iTunesPlatformForSDKIdentifier:(id)arg1 usingSession:(id)arg2 error:(id *)arg3;
+ (id)allowedPlatformsUsingSession:(id)arg1 error:(id *)arg2;
+ (id)storeConfigurationUsingSession:(id)arg1 forBundleID:(id)arg2 error:(id *)arg3;
+ (id)storeConfigurationUsingSession:(id)arg1 error:(id *)arg2;
+ (id)symbolURLsByUUIDForApplicationVersion:(id)arg1 usingSession:(id)arg2 error:(id *)arg3;
+ (id)applicationVersionsForApplicationDecription:(id)arg1 usingSession:(id)arg2 error:(id *)arg3;
+ (id)applicationDescriptionWithBundleIdentifier:(id)arg1 platformSDKIdentifier:(id)arg2 usingSession:(id)arg3 logAspect:(id)arg4 error:(id *)arg5;
+ (id)applicationDescriptionsUsingSession:(id)arg1 error:(id *)arg2;
+ (id)applicationsWithContentHostedInAppPurchasesUsingSession:(id)arg1 error:(id *)arg2;
+ (id)uploadApplicationArchiveAtPath:(id)arg1 applicationType:(int)arg2 session:(id)arg3 willBeginCallback:(CDUnknownBlockType)arg4 updatePercentageCallback:(CDUnknownBlockType)arg5 updateMessageCallback:(CDUnknownBlockType)arg6 shouldContinueCallback:(CDUnknownBlockType)arg7 didCompleteCallback:(CDUnknownBlockType)arg8 logAspect:(id)arg9 error:(id *)arg10;
+ (id)validateApplicationArchiveAtPath:(id)arg1 applicationType:(int)arg2 usingSession:(id)arg3 error:(id *)arg4;
+ (id)authenticationContextForSession:(id)arg1 error:(id *)arg2;
+ (Class)ITunesAuthenticationContextClass;
+ (Class)ITunesSoftwareServiceClass;
+ (id)service;
+ (id)applicationLoaderPathOverride;

@end

@interface DVTITunesConnectProxyDelegate : NSObject <ITunesSoftwareServiceUploadDelegate, ITunesSoftwareServiceAuthenticationDelegate>
{
    id <DVTDirectoryServicesSessionDescription> _session;
    DVTLogAspect *_logAspect;
    CDUnknownBlockType _willBeginCallback;
    CDUnknownBlockType _updatePercentageCallback;
    CDUnknownBlockType _updateMessageCallback;
    CDUnknownBlockType _shouldContinueCallback;
    CDUnknownBlockType _didCompleteCallback;
}

@property(copy) CDUnknownBlockType didCompleteCallback; // @synthesize didCompleteCallback=_didCompleteCallback;
@property(copy) CDUnknownBlockType shouldContinueCallback; // @synthesize shouldContinueCallback=_shouldContinueCallback;
@property(copy) CDUnknownBlockType updateMessageCallback; // @synthesize updateMessageCallback=_updateMessageCallback;
@property(copy) CDUnknownBlockType updatePercentageCallback; // @synthesize updatePercentageCallback=_updatePercentageCallback;
@property(copy) CDUnknownBlockType willBeginCallback; // @synthesize willBeginCallback=_willBeginCallback;
@property(retain, nonatomic) DVTLogAspect *logAspect; // @synthesize logAspect=_logAspect;
@property(retain, nonatomic) id <DVTDirectoryServicesSessionDescription> session; // @synthesize session=_session;
- (void).cxx_destruct;
- (void)willAuthenticateWithContext:(id)arg1;
- (void)softwareService:(id)arg1 didCompleteUploadForApplication:(id)arg2;
- (BOOL)softwareService:(id)arg1 shouldContinueUploadForApplication:(id)arg2;
- (void)softwareService:(id)arg1 didUpdateStatusMessage:(id)arg2 forApplication:(id)arg3;
- (void)softwareService:(id)arg1 didUpdatePercentageComplete:(id)arg2 forApplication:(id)arg3;
- (void)softwareService:(id)arg1 willBeginUploadForApplication:(id)arg2;
- (id)initWithSession:(id)arg1 logAspect:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDeveloperPortalServiceConnection : NSObject <NSURLConnectionDataDelegate>
{
    NSURLRequest *_request;
    NSURLCredential *_credential;
    NSError *_error;
    NSURLResponse *_response;
    NSMutableData *_responseData;
    CDUnknownBlockType _completionHandler;
}

@property(copy, nonatomic) CDUnknownBlockType completionHandler; // @synthesize completionHandler=_completionHandler;
@property(retain, nonatomic) NSMutableData *responseData; // @synthesize responseData=_responseData;
@property(retain, nonatomic) NSURLResponse *response; // @synthesize response=_response;
@property(retain, nonatomic) NSError *error; // @synthesize error=_error;
@property(retain, nonatomic) NSURLCredential *credential; // @synthesize credential=_credential;
@property(readonly, nonatomic) NSURLRequest *request; // @synthesize request=_request;
- (void).cxx_destruct;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (BOOL)connectionShouldUseCredentialStorage:(id)arg1;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)_finishWithResponse:(id)arg1 data:(id)arg2 error:(id)arg3;
- (void)sendAsyncRequestWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)sendRequestWithResponse:(id *)arg1 error:(id *)arg2;
- (id)initWithRequest:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDataDigester : NSObject
{
}

- (id)digest;
- (void)updateWithArrayOfStrings:(id)arg1;
- (void)updateWithString:(id)arg1;
- (void)updateWithData:(id)arg1;
- (void)updateWithBytes:(const void *)arg1 length:(unsigned long long)arg2;

@end

@interface DVTMD5Digester : DVTDataDigester
{
    struct CC_MD5state_st _ctxt;
}

- (id)digest;
- (void)updateWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)init;

@end

@interface DVTSHA1Digester : DVTDataDigester
{
    struct CC_SHA1state_st _ctxt;
}

- (id)digest;
- (void)updateWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)init;

@end

@interface DVTSHA256Digester : DVTDataDigester
{
    struct CC_SHA256state_st _ctxt;
}

- (id)digest;
- (void)updateWithBytes:(const void *)arg1 length:(unsigned long long)arg2;
- (id)init;

@end

@interface DVTPlugInManager : NSObject
{
    DVTDispatchLock *_plugInManagerLock;
    NSFileManager *_fileManager;
    NSString *_hostAppName;
    NSString *_hostAppContainingPath;
    NSMutableArray *_searchPaths;
    NSArray *_extraSearchPaths;
    NSMutableSet *_pathExtensions;
    NSMutableSet *_exposedCapabilities;
    NSMutableSet *_defaultPlugInCapabilities;
    NSMutableSet *_requiredPlugInIdentifiers;
    NSString *_plugInCachePath;
    NSDictionary *_plugInCache;
    BOOL _shouldClearPlugInCaches;
    DVTPlugInLocator *_plugInLocator;
    NSMutableDictionary *_plugInsByIdentifier;
    NSMutableDictionary *_extensionPointsByIdentifier;
    NSMutableDictionary *_extensionsByIdentifier;
    NSMutableDictionary *_invalidExtensionsByIdentifier;
    NSMutableSet *_warnedExtensionPointFailures;
    NSMutableSet *_nonApplePlugInSanitizedStatuses;
    NSMutableDictionary *_nonApplePlugInDescriptors;
    NSMutableDictionary *_nonApplePlugInDescriptorActivateCallbacks;
    struct {
        unsigned int _reserved:62;
        unsigned int _isSecondaryScan:1;
        unsigned int _hasScannedForPlugIns:1;
    } _flags;
    CDUnknownBlockType _shouldAllowNonApplePlugInsCallback;
}

+ (BOOL)enumerateExtensionDataForPluginAtPath:(id)arg1 error:(id *)arg2 withBlock:(CDUnknownBlockType)arg3;
+ (BOOL)ib_enumerateExtensionDataForPluginAtPath:(id)arg1 error:(id *)arg2 withBlock:(CDUnknownBlockType)arg3;
+ (void)_setDefaultPlugInManager:(id)arg1;
+ (id)defaultPlugInManager;
+ (void)initialize;
@property(copy) CDUnknownBlockType shouldAllowNonApplePlugInsCallback; // @synthesize shouldAllowNonApplePlugInsCallback=_shouldAllowNonApplePlugInsCallback;
@property(retain) DVTPlugInLocator *plugInLocator; // @synthesize plugInLocator=_plugInLocator;
@property BOOL shouldClearPlugInCaches; // @synthesize shouldClearPlugInCaches=_shouldClearPlugInCaches;
- (void).cxx_destruct;
- (id)_invalidExtensionWithIdentifier:(id)arg1;
- (id)_plugInCachePath;
- (id)_applicationCachesPath;
- (id)_toolsVersionName;
- (void)_createPlugInObjectsFromCache;
- (BOOL)_savePlugInCacheWithScanRecords:(id)arg1 error:(id *)arg2;
- (BOOL)_removePlugInCacheAndReturnError:(id *)arg1;
- (BOOL)_loadPlugInCache:(id *)arg1;
- (BOOL)_cacheCoversPlugInsWithScanRecords:(id)arg1;
- (id)_modificationDateOfFileAtPath:(id)arg1;
@property(readonly) BOOL usePlugInCache;
- (void)_preLoadPlugIns;
- (BOOL)_checkPresenceOfRequiredPlugIns:(id)arg1 error:(id *)arg2;
- (BOOL)shouldPerformConsistencyCheck;
- (void)_registerPlugInsFromScanRecords:(id)arg1;
- (void)_pruneUnusablePlugInsAndScanRecords:(id)arg1 linkedFrameworkPaths:(id)arg2;
- (id)_oldPluginNamesToSupersedingPluginNames;
- (id)_plugInIDsToIgnore;
- (void)_recordSanitizedPluginStatus:(id)arg1 errorMessage:(id)arg2;
- (void)_addSanitizedNonApplePlugInStatusForBundle:(id)arg1 reason:(id)arg2;
@property(readonly) NSSet *sanitizedNonApplePlugInStatuses;
- (void)_createPlugInObjectsFromScanRecords:(id)arg1;
- (void)_instantiatePlugInsForScanRecords:(id)arg1;
- (void)_applyActivationRulesToScanRecords:(id)arg1;
- (id)_scanForPlugInsInDirectories:(id)arg1 skippingDuplicatesOfPlugIns:(id)arg2;
- (BOOL)initializePlugIns:(id *)arg1;
- (void)_checkNonApplePlugIns;
- (BOOL)_allowNonApplePlugInsFromDescriptors:(id)arg1 error:(id *)arg2;
- (void)_saveNonApplePlugInListBasedOnAllowedDescriptors:(id)arg1;
- (void)_registerDescriptorType:(id)arg1 activationCallback:(CDUnknownBlockType)arg2;
- (void)_recordNonApplePlugInDescriptor:(id)arg1;
- (BOOL)_checkValidityForBundle:(id)arg1 error:(id *)arg2;
- (id)nonApplePlugInDescriptorsNotPreviouslyAllowedOrSkipped;
- (id)nonApplePlugInDescriptorsPreviouslyAllowed;
- (id)_nonApplePlugInListDefault;
@property(readonly, copy) NSArray *nonApplePlugInDescriptors;
- (id)_extractErrorFromPlugInLoadingException:(id)arg1;
- (BOOL)_scanForPlugIns:(id *)arg1;
- (id)_plugInScanRecordsForInitialScan:(BOOL)arg1 linkedFrameworksScanRecords:(id *)arg2;
- (id)_allFrameworks;
@property(readonly, copy) NSUUID *plugInHostUUID;
@property BOOL hasScannedForPlugIns; // @dynamic hasScannedForPlugIns;
- (id)_scanRecordForBundle:(id)arg1 atPath:(id)arg2;
- (BOOL)_isInitialScan;
- (id)_defaultPathExtensions;
@property(readonly, copy) NSArray *defaultSearchPaths;
- (id)_defaultApplicationSupportSubdirectory;
@property(readonly, copy) NSArray *extraSearchPaths;
- (id)_extensionsForExtensionPoint:(id)arg1 matchingPredicate:(id)arg2;
- (id)classesImplementingProtocol:(id)arg1;
- (id)extensionWithIdentifier:(id)arg1;
- (id)extensionPointWithIdentifier:(id)arg1;
- (id)plugInWithIdentifier:(id)arg1;
- (BOOL)scanForPlugIns:(id *)arg1;
- (id)init;
- (id)_hostAppName;
- (id)_hostAppContainingPath;

// Remaining properties
@property(copy) NSSet *defaultPlugInCapabilities; // @dynamic defaultPlugInCapabilities;
@property(copy) NSSet *exposedCapabilities; // @dynamic exposedCapabilities;
@property(readonly) NSMutableSet *mutableDefaultPlugInCapabilities; // @dynamic mutableDefaultPlugInCapabilities;
@property(readonly) NSMutableSet *mutableExposedCapabilities; // @dynamic mutableExposedCapabilities;
@property(readonly) NSMutableSet *mutablePathExtensions; // @dynamic mutablePathExtensions;
@property(readonly) NSMutableSet *mutableRequiredPlugInIdentifiers; // @dynamic mutableRequiredPlugInIdentifiers;
@property(readonly) NSMutableArray *mutableSearchPaths; // @dynamic mutableSearchPaths;
@property(copy) NSSet *pathExtensions; // @dynamic pathExtensions;
@property(copy) NSSet *requiredPlugInIdentifiers; // @dynamic requiredPlugInIdentifiers;
@property(copy) NSArray *searchPaths; // @dynamic searchPaths;

@end

@interface _DVTPlugInDescriptor : NSObject
{
    NSString *_type;
    NSString *_name;
    id <NSCopying> _version;
    NSString *_identifier;
    id _other;
}

@property(retain) id other; // @synthesize other=_other;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy) id <NSCopying> version; // @synthesize version=_version;
@property(copy) NSString *name; // @synthesize name=_name;
@property(copy) NSString *type; // @synthesize type=_type;
- (void).cxx_destruct;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;

@end

@interface DVTFileSystemVNode : NSObject
{
    NSMutableDictionary *_derivedInfoDict;
    NSPointerArray *_filePaths;
    DVTFilePath *_filePath;
    struct os_unfair_lock_s _derivedInfoDictLock;
    unsigned long long _inodeNumber;
    long long _fileSize;
    unsigned long long _statFlags;
    long long _posixModificationTime;
    unsigned int _statUid;
    unsigned int _statGid;
    int _deviceNumber;
    unsigned short _statMode;
}

+ (id)lookupVNodeForDeviceNumber:(int)arg1 inodeNumber:(unsigned long long)arg2;
@property(readonly) long long posixModificationTime; // @synthesize posixModificationTime=_posixModificationTime;
@property(readonly) long long fileSize; // @synthesize fileSize=_fileSize;
@property(readonly) unsigned long long statFlags; // @synthesize statFlags=_statFlags;
@property(readonly) unsigned int statGid; // @synthesize statGid=_statGid;
@property(readonly) unsigned int statUid; // @synthesize statUid=_statUid;
@property(readonly) unsigned short statMode; // @synthesize statMode=_statMode;
@property(readonly) unsigned long long inodeNumber; // @synthesize inodeNumber=_inodeNumber;
@property(readonly) int deviceNumber; // @synthesize deviceNumber=_deviceNumber;
- (void).cxx_destruct;
- (id)description;
- (void)recordStatInfo:(const struct stat *)arg1;
- (void)discardCaches;
- (void)addCachedEntriesFromDictionary:(id)arg1;
- (id)cachedValueForKey:(id)arg1;
- (void)removeFilePath:(id)arg1;
- (void)addFilePath:(id)arg1;
- (id)filePath;
- (id)filePaths;
@property(readonly) DVTMountedFileSystem *fileSystem;
- (id)initWithStatInfo:(const struct stat *)arg1;

@end

@interface DVTMountedFileSystem : NSObject
{
    int _deviceNumber;
    NSString *_mountPath;
    NSMapTable *_inodesToVNodes;
}

+ (id)mountedFileSystemWithDeviceNumber:(int)arg1;
@property(readonly) NSString *mountPath; // @synthesize mountPath=_mountPath;
@property(readonly) int deviceNumber; // @synthesize deviceNumber=_deviceNumber;
- (void).cxx_destruct;
- (id)description;
- (void)removeVNode:(id)arg1;
- (void)addVNode:(id)arg1;
- (void)noteFileSystemWasUnmounted;
- (id)vnodeForInodeNumber:(unsigned long long)arg1;
- (id)initWithDeviceNumber:(int)arg1 statfsInfo:(const struct statfs *)arg2;

@end

@interface DVTQuickLookDocumentLocation : DVTDocumentLocation <NSCoding>
{
    DVTQuickLookPage *_page;
}

@property(readonly) DVTQuickLookPage *page; // @synthesize page=_page;
- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)description;
- (id)initWithDocumentURL:(id)arg1 page:(id)arg2;

@end

@interface DVTSimpleSerializer : NSObject
{
    DVTByteBuffer *_buffer;
    NSError *_error;
}

- (void).cxx_destruct;
- (id)data;
- (id)error;
- (void)encodeObjectList:(id)arg1;
- (void)encodeObject:(id)arg1;
- (void)encodeString:(id)arg1;
- (void)encodeDouble:(double)arg1;
- (void)encodeFloat:(float)arg1;
- (void)encodeInteger:(unsigned long long)arg1;
- (id)init;

@end

@interface DVTSimpleDeserializer : NSObject
{
    NSData *_inputData;
    DVTByteBuffer *_buffer;
    NSError *_error;
}

- (void).cxx_destruct;
- (id)error;
- (id)decodeObjectList;
- (id)decodeObject;
- (id)decodeString;
- (double)decodeDouble;
- (float)decodeFloat;
- (unsigned long long)decodeInteger;
- (id)init;
- (id)initWithData:(id)arg1;

@end

@interface DVTMacroDefinitionCondition : NSObject <NSCopying>
{
    DVTMacroDefinitionConditionParameter *_parameter;
    NSString *_valuePattern;
}

+ (id)conditionWithParameterName:(id)arg1 valuePattern:(id)arg2;
- (void).cxx_destruct;
- (id)description;
- (id)subscriptRepresentation;
- (long long)compare:(id)arg1;
- (BOOL)evaluateInScope:(id)arg1;
- (BOOL)evaluateForParameterValues:(id)arg1;
@property(readonly) NSString *valuePattern;
@property(readonly) DVTMacroDefinitionConditionParameter *parameter;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithParameterName:(id)arg1 valuePattern:(id)arg2;

@end

@interface DVTCSourceModelParser : DVTSourceModelParser
{
    void *_lexer;
}

+ (void)initialize;
+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (void)initializeLexerModes;
+ (id)languageSpecification;
- (void)_endLexerMode:(unsigned long long)arg1;
- (void)_beginLexerMode:(unsigned long long)arg1;
- (BOOL)_getNextToken:(CDStruct_341fcc3f *)arg1 temporaryFlags:(unsigned long long)arg2;
- (unsigned long long)_currentLocation;
- (void)_setCurrentLocation:(unsigned long long)arg1;
- (void)_resetLexerWithInputString:(id)arg1;
- (id)init;

@end

@interface DVTMacroDefinitionConditionParameter : NSObject
{
    NSString *_name;
    unsigned long long _precedence;
    NSString *_displayName;
    NSAttributedString *_displayDesc;
}

+ (id)defaultConditionParameters;
+ (id)registeredConditionParameters;
+ (id)conditionParameterNamed:(id)arg1;
+ (void)registerConditionParameterNamed:(id)arg1 precedence:(unsigned long long)arg2 displayName:(id)arg3 displayDescription:(id)arg4;
+ (void)initialize;
- (void).cxx_destruct;
- (id)description;
- (long long)compare:(id)arg1;
@property(readonly) NSAttributedString *displayDescription;
@property(readonly) NSString *displayName;
@property(readonly) unsigned long long precedence;
@property(readonly) NSString *name;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)initWithName:(id)arg1 precedence:(unsigned long long)arg2 displayName:(id)arg3 displayDescription:(id)arg4;

@end

@interface DVTSourceScanner : NSObject
{
    DVTLanguageSpecification *_langSpec;
    NSMutableArray *_includedRules;
    DVTSourceScanner *_lexer;
    long long _langId;
    long long _token;
    unsigned int _nodeType:16;
    unsigned int _altNodeType:16;
    unsigned int _startAtBOL:1;
    unsigned int _startAtColumnZero:1;
    unsigned int _isFoldable:1;
    unsigned int _ignoreToken:1;
    unsigned int _inheritsNodeType:1;
    unsigned int _altIgnoreToken:1;
    unsigned int _altInheritsNodeType:1;
    unsigned int _needToDirtyRightEdges:1;
}

+ (void)initialize;
@property(readonly) DVTLanguageSpecification *langSpec; // @synthesize langSpec=_langSpec;
@property(readonly) DVTSourceScanner *lexer; // @synthesize lexer=_lexer;
@property(readonly) long long token; // @synthesize token=_token;
@property(readonly) long long langId; // @synthesize langId=_langId;
- (void).cxx_destruct;
- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2;
- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2 allowNonWords:(BOOL)arg3;
- (BOOL)canTokenize;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (void)parseIncludedRules:(id)arg1 inTree:(id)arg2 withContext:(id)arg3 initialToken:(long long)arg4 inputStream:(id)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7;
- (long long)parseOneIncludedRule:(id)arg1 inTree:(id)arg2 withContext:(id)arg3 initialToken:(long long)arg4 inputStream:(id)arg5 range:(struct _NSRange)arg6 dirtyRange:(struct _NSRange *)arg7 isLexing:(BOOL)arg8 reusedToken:(char *)arg9;
- (id)nodeForThisScanner:(id)arg1 atLocation:(unsigned long long)arg2 inputStream:(id)arg3;
- (id)nodeToReuse:(id)arg1 forScanner:(id)arg2 inputStream:(id)arg3;
@property(readonly) NSArray *includedRules; // @synthesize includedRules=_includedRules;
- (id)description;
- (id)initWithLanguageSpecification:(id)arg1;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTAppIDFeatures : NSObject <NSCopying>
{
    NSDictionary *_flags;
    NSSet *_cloudContainers;
    NSSet *_applicationGroups;
    NSSet *_omcIdentifiers;
}

+ (id)paymentPassAccessEntitlement;
+ (id)inAppPaymentsEntitlement;
+ (id)userNameForFlag:(id)arg1;
@property(readonly) NSSet *omcIdentifiers; // @synthesize omcIdentifiers=_omcIdentifiers;
@property(readonly) NSSet *applicationGroups; // @synthesize applicationGroups=_applicationGroups;
@property(readonly) NSSet *cloudContainers; // @synthesize cloudContainers=_cloudContainers;
@property(readonly) NSDictionary *flags; // @synthesize flags=_flags;
- (void).cxx_destruct;
- (BOOL)allowsFeatures:(id)arg1 missingFeatures:(id *)arg2;
@property(readonly) NSString *userDescription;
- (id)description;
- (id)plistRepresentation;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(readonly) BOOL requiresExplicitAppID;
@property(readonly) BOOL hasEnabledFeatures;
- (id)portalKeyToFeatureValues;
- (id)portalKeyToContainerValues;
@property(readonly) DVTAppIDFeatures *enabledFeatures;
- (id)featuresBySettingValue:(id)arg1 forKey:(id)arg2;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)initWithFlags:(id)arg1 cloudContainers:(id)arg2 applicationGroups:(id)arg3 omcIdentifiers:(id)arg4;
- (id)init;

@end

@interface DVTUserDefaultsStub : NSObject <DVTUserDefaults>
{
    NSMutableDictionary *_storage;
}

- (void).cxx_destruct;
- (id)URLForKey:(id)arg1;
- (double)doubleForKey:(id)arg1;
- (id)stringArrayForKey:(id)arg1;
- (long long)integerForKey:(id)arg1;
- (float)floatForKey:(id)arg1;
- (id)dataForKey:(id)arg1;
- (id)dictionaryForKey:(id)arg1;
- (id)arrayForKey:(id)arg1;
- (BOOL)boolForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
- (void)removeObjectForKey:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)objectForKey:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDeviceType : NSObject
{
    NSString *_identifier;
    NSString *_name;
    NSString *_UTI;
    NSOrderedSet *_supportedArchitectures;
    NSString *_deviceSpecifierPrefix;
    NSDictionary *_deviceSpecifierOptionDefaults;
    NSSet *_knownDeviceSpecifierOptions;
    NSSet *_requiredDeviceSpecifierOptions;
}

+ (id)deviceTypeWithIdentifier:(id)arg1;
+ (void)initialize;
@property(readonly, copy) NSSet *requiredDeviceSpecifierOptions; // @synthesize requiredDeviceSpecifierOptions=_requiredDeviceSpecifierOptions;
@property(readonly, copy) NSSet *knownDeviceSpecifierOptions; // @synthesize knownDeviceSpecifierOptions=_knownDeviceSpecifierOptions;
@property(readonly, copy) NSDictionary *deviceSpecifierOptionDefaults; // @synthesize deviceSpecifierOptionDefaults=_deviceSpecifierOptionDefaults;
@property(readonly, copy) NSString *deviceSpecifierPrefix; // @synthesize deviceSpecifierPrefix=_deviceSpecifierPrefix;
@property(readonly, copy) NSOrderedSet *supportedArchitectures; // @synthesize supportedArchitectures=_supportedArchitectures;
@property(readonly, copy) NSString *UTI; // @synthesize UTI=_UTI;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (id)description;
- (id)initWithExtension:(id)arg1;

@end

@interface DVTStablePropertyListDictionary : NSDictionary
{
    NSDictionary *_dictionary;
    NSArray *_orderedKeys;
}

- (void).cxx_destruct;
- (id)keyEnumerator;
- (id)objectForKey:(id)arg1;
- (unsigned long long)count;
- (id)initWithContents:(id)arg1 memoTable:(id)arg2;

@end

@interface DVTModelGraphTransactionScope : NSObject
{
    unsigned long long _transactionCount;
    DVTModelGraphTransactionScope *_parentScope;
    NSMapTable *_subTransactionScopesByWeakOwner;
    NSMapTable *_pendedBlocks;
    BOOL _performingTransaction;
}

+ (id)transactionScopeForOwner:(id)arg1;
+ (id)_globalTransactionScope;
@property(nonatomic) BOOL performingTransaction; // @synthesize performingTransaction=_performingTransaction;
- (void).cxx_destruct;
- (void)dispatchAfterScopeCloseForKey:(id)arg1 block:(CDUnknownBlockType)arg2;
- (void)_dispatchPendedBlocks;
- (void)performTransaction:(CDUnknownBlockType)arg1;
- (void)_endTransactionUpward;
- (void)_beginTransactionUpward;
- (void)_endTransactionDownward;
- (void)_beginTransactionDownward;
- (void)_decrementTransactionCount;
- (void)_incrementTransactionCount;
- (id)subTransactionScopeForOwner:(id)arg1;
- (id)_initWithParentScope:(id)arg1;

@end

@interface DVTSysmonBridge : NSObject
{
    BOOL _hasStarted;
    BOOL _isDisconnected;
    id <DVTSysmonBridgeDelegate><DVTInvalidation> _delegate;
    NSDate *_currentSampleTimestamp;
    NSObject<OS_sysmon_request> *_sysmonRequest;
    NSObject<OS_sysmon_row> *_currentRow;
}

@property(nonatomic) BOOL isDisconnected; // @synthesize isDisconnected=_isDisconnected;
@property(nonatomic) BOOL hasStarted; // @synthesize hasStarted=_hasStarted;
@property(nonatomic) NSObject<OS_sysmon_row> *currentRow; // @synthesize currentRow=_currentRow;
@property(retain, nonatomic) NSObject<OS_sysmon_request> *sysmonRequest; // @synthesize sysmonRequest=_sysmonRequest;
@property(retain, nonatomic) NSDate *currentSampleTimestamp; // @synthesize currentSampleTimestamp=_currentSampleTimestamp;
@property(nonatomic) __weak id <DVTSysmonBridgeDelegate><DVTInvalidation> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)dealloc;
- (void)disconnect;
- (void)startUpdates;
- (BOOL)getSInt64Value:(long long *)arg1 forProcessAttribute:(unsigned int)arg2;
- (id)initWithAttributes:(unsigned int)arg1;

@end

@interface DVTProvisioningTemporaryStateManager : NSObject
{
    struct OpaqueSecKeychainRef *_keychain;
    DVTFilePath *_provisioningProfileSearchPath;
}

+ (id)provisioningProfileSearchPath;
+ (id)defaultTemporaryStateManager;
@property(retain) DVTFilePath *provisioningProfileSearchPath; // @synthesize provisioningProfileSearchPath=_provisioningProfileSearchPath;
@property struct OpaqueSecKeychainRef *keychain; // @synthesize keychain=_keychain;
- (void).cxx_destruct;
- (id)initWithKeychain:(struct OpaqueSecKeychainRef *)arg1 provisioningProfileSearchPath:(id)arg2;

@end

@interface DVTReferenceResolutionStrategy : NSObject
{
    DVTExtension *_extension;
    NSString *_persistenceIdentifier;
    NSString *_displayName;
}

+ (id)strategyWithPersistenceIdentifier:(id)arg1;
+ (id)strategyWithStrategyIdentifier:(id)arg1 persistanceIdentifier:(id)arg2;
+ (void)initialize;
@property(readonly, copy) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, copy) NSString *persistenceIdentifier; // @synthesize persistenceIdentifier=_persistenceIdentifier;
@property(readonly) DVTExtension *extension; // @synthesize extension=_extension;
- (void).cxx_destruct;
- (id)displayNameInContext:(id)arg1;
- (id)resolveInput:(id)arg1 inContext:(id)arg2 usingSnapshot:(id)arg3 error:(id *)arg4;
- (id)snapshotForResolution;
@property(readonly) BOOL canResolveInputInBackground;
- (id)initWithExtension:(id)arg1;
- (id)init;

@end

@interface DVTAssertionHandler : NSObject <DVTAssertionHandling>
{
}

+ (void)_crashWithCrashReporterString:(id)arg1 assertionSignature:(id)arg2;
+ (id)assertionLoggingAspect;
+ (void)setCurrentHandler:(id)arg1 forThread:(id)arg2;
+ (id)currentHandlerForThread:(id)arg1;
+ (void)setCurrentHandler:(id)arg1;
+ (id)currentHandler;
- (void)handleWarningInFunction:(id)arg1 fileName:(id)arg2 lineNumber:(long long)arg3 messageFormat:(id)arg4 arguments:(struct __va_list_tag [1])arg5;
- (void)handleWarningInMethod:(SEL)arg1 object:(id)arg2 fileName:(id)arg3 lineNumber:(long long)arg4 messageFormat:(id)arg5 arguments:(struct __va_list_tag [1])arg6;
- (void)handleFailureInFunction:(id)arg1 fileName:(id)arg2 lineNumber:(long long)arg3 assertionSignature:(id)arg4 messageFormat:(id)arg5 arguments:(struct __va_list_tag [1])arg6;
- (void)handleFailureInMethod:(SEL)arg1 object:(id)arg2 fileName:(id)arg3 lineNumber:(long long)arg4 assertionSignature:(id)arg5 messageFormat:(id)arg6 arguments:(struct __va_list_tag [1])arg7;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTMacroNameRegistryRegistration : NSObject <DVTRegistrable>
{
    BOOL _listType;
    NSString *_macroName;
}

@property(readonly, getter=isListType) BOOL listType; // @synthesize listType=_listType;
@property(readonly, copy) NSString *macroName; // @synthesize macroName=_macroName;
- (void).cxx_destruct;
@property(readonly, copy) NSString *description;
@property(readonly) NSString *identifier;
- (id)initWithMacroName:(id)arg1 isListType:(BOOL)arg2;

// Remaining properties
@property(readonly) NSArray *aliases;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) NSString *displayDescription;
@property(readonly) NSString *displayName;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(readonly) DVTVersion *version;

@end

@interface DVTMacroNameRegistry : DVTRegistry
{
    BOOL _defaultIsListType;
}

+ (void)initialize;
@property(readonly) BOOL defaultIsListType; // @synthesize defaultIsListType=_defaultIsListType;
- (BOOL)macroIsListType:(id)arg1;
- (void)registerMacroName:(id)arg1 isListType:(BOOL)arg2;
- (id)initWithDebugName:(id)arg1 defaultIsListType:(BOOL)arg2;
- (id)initWithDebugName:(id)arg1;
- (id)init;

@end

@interface DVTModelTree : NSObject <DVTModelObject, DVTInvalidation>
{
    DVTModelTreeNode *_rootNode;
    DVTModelObjectGraph *_objectGraph;
}

+ (BOOL)automaticallyNotifiesObserversOfSubclass_rootNode;
+ (void)synthesizeCoverAPIWithKeyForRootNode:(id)arg1;
+ (BOOL)automaticallyNotifiesObserversOfObjectGraph;
+ (void)initialize;
@property(retain, nonatomic) DVTModelObjectGraph *objectGraph; // @synthesize objectGraph=_objectGraph;
@property(readonly) DVTModelTreeNode *subclass_rootNode; // @synthesize subclass_rootNode=_rootNode;
- (void).cxx_destruct;
- (id)subclass_createRootNode;
- (void)_recursivelyMoveNode:(id)arg1 fromObjectGraph:(id)arg2 toObjectGraph:(id)arg3;
- (void)primitiveInvalidate;
- (id)initWithObjectGraph:(id)arg1;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTKeywordScanner : DVTSourceScanner
{
    NSCharacterSet *_startSet;
    NSCharacterSet *_invertedOtherSet;
    DVTSourceTokens *_keywords;
    struct _NSRange _previousTokenRange;
    BOOL _caseSensitive;
    BOOL _wordBreak;
    BOOL _isSimpleToken;
}

- (void).cxx_destruct;
- (struct _NSRange)wordRangeInString:(id)arg1 fromIndex:(unsigned long long)arg2;
- (BOOL)canTokenize;
- (id)parse:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3 inputStream:(id)arg4 range:(struct _NSRange)arg5 dirtyRange:(struct _NSRange *)arg6;
- (long long)nextToken:(id)arg1 withContext:(id)arg2 initialToken:(long long)arg3;
- (BOOL)predictsRule:(long long)arg1 inputStream:(id)arg2;
- (id)initWithPropertyListDictionary:(id)arg1 language:(long long)arg2;

@end

@interface DVTGlobalCustomDataStore : NSObject <DVTCustomDataStoring>
{
    DVTDirectoryBasedCustomDataStore *_dataArchiver;
}

+ (id)defaultStore;
@property(readonly) DVTDirectoryBasedCustomDataStore *dataArchiver; // @synthesize dataArchiver=_dataArchiver;
- (void).cxx_destruct;
@property(readonly) NSString *displayName;
- (BOOL)supportsCustomDataForOwnership:(id)arg1;
- (void)moveCustomDataWithSpecifier:(id)arg1 toSpecifier:(id)arg2 completionQueue:(id)arg3 completionBlock:(CDUnknownBlockType)arg4;
- (void)removeCustomDataWithSpecifier:(id)arg1 completionQueue:(id)arg2 completionBlock:(CDUnknownBlockType)arg3;
- (void)writeCustomData:(id)arg1 withSpecifier:(id)arg2 forceOverwrite:(BOOL)arg3 completionQueue:(id)arg4 completionBlock:(CDUnknownBlockType)arg5;
- (id)readCustomDataWithSpecifier:(id)arg1 error:(id *)arg2;
- (id)customDataOwnershipsForGrouping:(id)arg1;
- (id)customDataSpecifiersForGrouping:(id)arg1 ownership:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTLocalProcessInformation : DVTProcessInformation
{
    NSString *_realApplicationName;
    NSString *_requestedApplicationName;
    NSString *_firstApplicationArgument;
    NSArray *_allApplicationArguments;
}

+ (id)_blacklistedProcesses;
+ (id)_currentProcessIDsAsNumbers;
+ (id)currentProcessInformationsUnfiltered;
+ (id)currentProcessInformations;
+ (id)_processInformationsFilteredBy:(CDUnknownBlockType)arg1;
+ (id)_archNameForExecutableArchitecture:(int)arg1;
@property(copy, nonatomic) NSString *firstApplicationArgument; // @synthesize firstApplicationArgument=_firstApplicationArgument;
@property(copy, nonatomic) NSString *requestedApplicationName; // @synthesize requestedApplicationName=_requestedApplicationName;
@property(copy, nonatomic) NSString *realApplicationName; // @synthesize realApplicationName=_realApplicationName;
- (void).cxx_destruct;
- (id)_procTableName;
- (BOOL)_isLaunchCFMApp;
- (id)_calculatePreferredArchitecture;
- (id)_calculateProcessURL;
- (id)_calculateDisplayName;
- (void)_initProcessInformationFetchingAllArguments:(BOOL)arg1;
@property(readonly, nonatomic) NSArray *allApplicationArguments; // @synthesize allApplicationArguments=_allApplicationArguments;
- (id)preferredArchitecture;
- (id)processURL;
- (id)displayName;

@end

@interface DVTObservingToken : NSObject <DVTCancellable>
{
    BOOL _isCancelled;
    DVTStackBacktrace *_creationBacktrace;
}

+ (void)initialize;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
- (void).cxx_destruct;
- (void)dealloc;
- (id)_dvt_keyPath;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (void)cancel;
- (void)_primitiveCancelObservation;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTSelectorBasedObservingToken : DVTObservingToken
{
    DVTWeakInterposer *_target_dvtWeakInterposer;
    id _observedObject;
    NSString *_keyPath;
}

@property(retain) id observedObject; // @synthesize observedObject=_observedObject;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_primitiveCancelObservation;
- (id)description;
- (id)initWithTarget:(id)arg1 observedObject:(id)arg2 keyPath:(id)arg3 creationBacktrace:(id)arg4;
- (void)setTarget:(id)arg1;
- (id)target;

@end

@interface DVTObservingBlockToken : DVTObservingToken
{
    id _owner;
    id _observedObject;
    CDUnknownBlockType _handlerBlock;
    NSString *_keyPath;
}

@property(retain) id owner; // @synthesize owner=_owner;
- (void).cxx_destruct;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)setHandlerBlock:(CDUnknownBlockType)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3;
- (void)_tearDownObserving;
- (void)_setupObservingWithOptions:(unsigned long long)arg1;
- (id)description;
- (void)_primitiveCancelObservation;
- (id)_dvt_keyPath;
- (void)cancel;
- (id)initWithObservedObject:(id)arg1 owner:(id)arg2 creationBacktrace:(id)arg3;

@end

@interface DVTArrayObservingBlockToken : DVTObservingBlockToken
{
    NSArray *_observedArray;
}

- (void).cxx_destruct;
- (void)_tearDownObserving;
- (void)_setupObservingWithOptions:(unsigned long long)arg1;

@end

@interface DVTSharedObserver : NSObject
{
    NSString *_keyPath;
    id _object;
    NSMapTable *_registeredObservers;
}

- (void).cxx_destruct;
@property(readonly) BOOL _hasRegisteredObservers;
- (void)_removeObserver:(id)arg1 forName:(id)arg2;
- (void)_setObserver:(id)arg1 forName:(id)arg2 handlerBlock:(CDUnknownBlockType)arg3;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)_handlerInfoForObserver:(id)arg1;
- (void)dealloc;
- (id)_initWithObservedObject:(id)arg1 keyPath:(id)arg2;

@end

@interface DVTTestPerformanceMetricOutput : NSObject
{
    NSString *_identifier;
    NSString *_filePath;
    NSNumber *_lineNumber;
    NSString *_displayName;
    NSString *_unitOfMeasurement;
    NSArray *_measurements;
    NSString *_baselineName;
    NSNumber *_baselineAverage;
    NSNumber *_maxPercentRegression;
    NSNumber *_maxPercentRelativeStandardDeviation;
    NSNumber *_maxRegression;
    NSNumber *_maxStandardDeviation;
    DVTDevice *_targetDevice;
    NSString *_targetArchitecture;
    double _creationTimeIntervalSinceReferenceDate;
}

@property(readonly) double creationTimeIntervalSinceReferenceDate; // @synthesize creationTimeIntervalSinceReferenceDate=_creationTimeIntervalSinceReferenceDate;
@property(copy) NSString *targetArchitecture; // @synthesize targetArchitecture=_targetArchitecture;
@property(retain) DVTDevice *targetDevice; // @synthesize targetDevice=_targetDevice;
@property(readonly) NSNumber *maxStandardDeviation; // @synthesize maxStandardDeviation=_maxStandardDeviation;
@property(readonly) NSNumber *maxRegression; // @synthesize maxRegression=_maxRegression;
@property(readonly) NSNumber *maxPercentRelativeStandardDeviation; // @synthesize maxPercentRelativeStandardDeviation=_maxPercentRelativeStandardDeviation;
@property(readonly) NSNumber *maxPercentRegression; // @synthesize maxPercentRegression=_maxPercentRegression;
@property(readonly) NSNumber *baselineAverage; // @synthesize baselineAverage=_baselineAverage;
@property(readonly) NSString *baselineName; // @synthesize baselineName=_baselineName;
@property(readonly, copy) NSArray *measurements; // @synthesize measurements=_measurements;
@property(readonly, copy) NSString *unitOfMeasurement; // @synthesize unitOfMeasurement=_unitOfMeasurement;
@property(readonly, copy) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, copy) NSNumber *lineNumber; // @synthesize lineNumber=_lineNumber;
@property(readonly, copy) NSString *filePath; // @synthesize filePath=_filePath;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
@property(readonly) double relativeStandardDeviationOfMeasurements;
@property(readonly) double meanAverageOfMeasurements;
- (id)initWithPerformanceMetricName:(id)arg1 filePath:(id)arg2 lineNumber:(id)arg3 unitOfMeasurement:(id)arg4 measurements:(id)arg5 identifier:(id)arg6 baselineName:(id)arg7 baselineAverage:(id)arg8 maxPercentRegression:(id)arg9 maxPercentRelativeStandardDeviation:(id)arg10 maxRegression:(id)arg11 maxStandardDeviation:(id)arg12;

@end

@interface _DVTDiffHashingDictionaryDiffHashContext : NSObject
{
    DVTDiffDataSource *_dataSource;
    unsigned long long _diffHash;
}

@property unsigned long long diffHash; // @synthesize diffHash=_diffHash;
@property(retain) DVTDiffDataSource *dataSource; // @synthesize dataSource=_dataSource;
- (void).cxx_destruct;
- (id)initWithDataSource:(id)arg1 diffHash:(unsigned long long)arg2;

@end

@interface DVTSourceModelParserProductionState : NSObject
{
    DVTSourceModelParserProductionRule *_productionRule;
    unsigned long long _stackOffset;
    DVTSourceModelParserProductionState *_innerState;
    unsigned long long _currentRuleIndex;
    BOOL _canSkipCurrentRule;
    BOOL _hasInnerState;
    BOOL _completeMatch;
    BOOL _epsilonMatch;
    unsigned long long _ignoreNodes;
}

- (void).cxx_destruct;
- (id)description;
- (id)reduceToProduction:(id *)arg1 stackOffset:(unsigned long long *)arg2;
- (BOOL)matchNode:(id)arg1 currentStackTop:(unsigned long long)arg2;
- (BOOL)matchToken:(int)arg1 currentStackTop:(unsigned long long)arg2;
@property(readonly, nonatomic) unsigned long long temporaryLexerFlags;
@property(readonly, nonatomic) DVTSourceModelParserProductionRule *scopeProduction;
@property(readonly, nonatomic) unsigned long long ignoreNodes; // @synthesize ignoreNodes=_ignoreNodes;
@property(readonly, nonatomic) BOOL epsilonMatch; // @synthesize epsilonMatch=_epsilonMatch;
@property(readonly, nonatomic) BOOL completeMatch; // @synthesize completeMatch=_completeMatch;
- (void)resetWithProductionRule:(id)arg1 stackOffset:(unsigned long long)arg2;
- (id)initWithProductionRule:(id)arg1 stackOffset:(unsigned long long)arg2;

@end

@interface DVTDiagnosticsManager : NSObject
{
    double _timeout;
    NSObject<OS_dispatch_group> *_group;
    NSObject<OS_dispatch_queue> *_queue;
    NSMutableDictionary *_paths;
    NSMutableDictionary *_tools;
    NSMutableDictionary *_errors;
    NSDictionary *_options;
}

+ (id)_stringByTrimmingTrailingCharactersInSet:(id)arg1 fromString:(id)arg2;
+ (id)_stringByTrimmingTrailingWhitespaceAndNewlineCharactersFromString:(id)arg1;
+ (id)launchAtPath:(id)arg1 arguments:(id)arg2 outputFilePath:(id)arg3 captureOutput:(BOOL)arg4;
+ (id)sharedDirectoryPathForDiagnosticsPath:(id)arg1;
+ (id)defaultManager;
@property(retain, nonatomic) NSDictionary *options; // @synthesize options=_options;
@property(retain, nonatomic) NSMutableDictionary *errors; // @synthesize errors=_errors;
@property(retain, nonatomic) NSMutableDictionary *tools; // @synthesize tools=_tools;
@property(retain, nonatomic) NSMutableDictionary *paths; // @synthesize paths=_paths;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *group; // @synthesize group=_group;
@property(nonatomic) double timeout; // @synthesize timeout=_timeout;
- (void).cxx_destruct;
- (void)_launchTool:(id)arg1 diagnosticsPath:(id)arg2 collectors:(id)arg3;
- (void)_addTool:(id)arg1 usingCollectorDictionaryRepresentation:(id)arg2;
- (void)_invokeExtensions:(id)arg1;
- (void)_broadcastExtensionInventoryNotification:(id)arg1;
- (BOOL)_loadAndSummonDiagnosticClientsAtPath:(id)arg1 error:(id *)arg2;
- (BOOL)_teardownPhaseWithDiagnosticsPath:(id)arg1 errors:(id *)arg2;
- (BOOL)_copyPhaseWithDiagnosticsPath:(id)arg1 errors:(id *)arg2;
- (BOOL)_toolsPhaseWithDiagnosticsPath:(id)arg1 errors:(id *)arg2;
- (BOOL)_diagnosticsPhaseWithDiagnosticsPath:(id)arg1 errors:(id *)arg2;
- (BOOL)runToolNamed:(id)arg1 atPath:(id)arg2 arguments:(id)arg3 usingCollector:(id)arg4 error:(id *)arg5;
- (BOOL)runTool:(unsigned long long)arg1 usingCollector:(id)arg2;
- (void)addResourcesToCopyPhase:(id)arg1 usingCollector:(id)arg2;
- (void)performDiagnosticsWithErrors:(id *)arg1;
- (void)performDiagnostics:(id)arg1;
- (void)dealloc;
- (id)init;

@end

@interface DVTSigningCertificateSource : NSObject <DVTInvalidation>
{
    BOOL _wantsAllApplicationsToAccessKeychainItems;
    id <DVTSigningCertificateSourceDelegate> _delegate;
    NSArray *_keychainSearchList;
    DVTLogAspect *_logAspect;
}

+ (id)_defaultKeychainSearchList;
+ (void)initialize;
@property(nonatomic) BOOL wantsAllApplicationsToAccessKeychainItems; // @synthesize wantsAllApplicationsToAccessKeychainItems=_wantsAllApplicationsToAccessKeychainItems;
@property(readonly) DVTLogAspect *logAspect; // @synthesize logAspect=_logAspect;
@property(readonly) NSArray *keychainSearchList; // @synthesize keychainSearchList=_keychainSearchList;
@property(retain, nonatomic) id <DVTSigningCertificateSourceDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_keychainUnknownEvent;
- (void)_keychainKeyAddedOrDeleted;
- (void)_keychainCertificateDeleted:(struct OpaqueSecCertificateRef *)arg1;
- (void)_keychainCertificateAdded:(struct OpaqueSecCertificateRef *)arg1;
- (void)_stopListeningForKeychainEvents;
- (void)_startListeningForKeychainEvents;
- (void)_registerKeychainCallback;
- (id)_fetchSigningCertificates;
- (BOOL)_isCertificateAnIdentity:(id)arg1;
- (BOOL)_installPrivateKey:(struct OpaqueSecKeyRef *)arg1 privateKeyName:(id)arg2 error:(id *)arg3;
- (BOOL)_installCertificate:(id)arg1 error:(id *)arg2;
- (BOOL)_installCertificate:(id)arg1 privateKey:(struct OpaqueSecKeyRef *)arg2 keyName:(id)arg3 error:(id *)arg4;
- (struct OpaqueSecKeychainRef *)_installKeychain;
- (id)allSigningCertificates;
- (id)initWithKeychainSearchList:(id)arg1 wantsAllApplicationsToAccessKeychainItems:(BOOL)arg2 logAspect:(id)arg3;
- (id)initWithLogAspect:(id)arg1;
- (id)init;
- (void)primitiveInvalidate;

// Remaining properties
@property(retain) DVTStackBacktrace *creationBacktrace;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly) Class superclass;
@property(readonly, nonatomic, getter=isValid) BOOL valid;

@end

@interface DVTDiffBinaryDataSource : DVTDiffDataSource
{
    CDStruct_3dd9eb72 _tokenStorage[5];
}

- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_setTokenStorage:(CDStruct_3dd9eb72 [5])arg1;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (void)getDiffTokens:(CDStruct_3dd9eb72 *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (CDStruct_3dd9eb72)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
@property(readonly) DVTFilePath *contentFilePath;
- (void)_setupHash;
- (id)initWithContentFilePath:(id)arg1;

@end

@interface DVTMacroExpansionOperator : NSObject
{
}

+ (id)operatorName;
+ (void)initialize;
+ (Class)replacementOperatorClassForOperatorNamed:(id)arg1;
+ (id)registeredReplacementOperatorClasses;
+ (void)registerReplacementOperatorClass:(Class)arg1;
+ (id)replacementOperatorRegistry;
+ (Class)retrievalOperatorClassForOperatorNamed:(id)arg1;
+ (id)registeredRetrievalOperatorClasses;
+ (void)registerRetrievalOperatorClass:(Class)arg1;
+ (id)retrievalOperatorRegistry;
+ (void)registerBuiltInOperators;
- (id)dvt_debugDescription;
- (id)parseError;
- (BOOL)hasParseError;
- (id)stringListByApplyingOperatorToStringList:(id)arg1 inMacroExpansionScope:(id)arg2;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator : DVTMacroExpansionOperator
{
}

- (id)dvt_debugDescription;
- (id)stringListByApplyingOperatorToStringList:(id)arg1 inMacroExpansionScope:(id)arg2;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;
- (id)init;

@end

@interface DVTMacroExpansionRetrievalOperatorWithParseError : DVTMacroExpansionRetrievalOperator
{
    NSError *_parseError;
}

+ (id)operatorName;
- (void).cxx_destruct;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;
- (id)parseError;
- (id)initWithParseError:(id)arg1;

@end

@interface DVTMacroExpansionReplacementOperator : DVTMacroExpansionOperator
{
    NSString<DVTMacroExpansion> *_replExpr;
}

- (void).cxx_destruct;
- (id)dvt_debugDescription;
- (id)stringListByApplyingOperatorToStringList:(id)arg1 inMacroExpansionScope:(id)arg2;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;
- (id)replacementExpression;
- (id)initWithReplacementExpression:(id)arg1;

@end

@interface DVTMacroExpansionReplacementOperatorWithParseError : DVTMacroExpansionReplacementOperator
{
    NSError *_parseError;
}

+ (id)operatorName;
- (void).cxx_destruct;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;
- (id)parseError;
- (id)initWithReplacementExpression:(id)arg1 parseError:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_quote : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_upper : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_lower : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_identifier : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_rfc1034identifier : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_c99extidentifier : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_dir : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_file : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_base : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_suffix : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_standardizepath : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionRetrievalOperator_xml : DVTMacroExpansionRetrievalOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionReplacementOperator_dir : DVTMacroExpansionReplacementOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionReplacementOperator_file : DVTMacroExpansionReplacementOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionReplacementOperator_base : DVTMacroExpansionReplacementOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface DVTMacroExpansionReplacementOperator_suffix : DVTMacroExpansionReplacementOperator
{
}

+ (id)operatorName;
- (id)stringByApplyingOperatorToString:(id)arg1 inMacroExpansionScope:(id)arg2;

@end

@interface _DVTCancellationBlockToken : NSObject <DVTCancellationBlockCompletion>
{
    NSCondition *_condition;
    CDUnknownBlockType _cancellationBlock;
}

@property(copy) CDUnknownBlockType cancellationBlock; // @synthesize cancellationBlock=_cancellationBlock;
- (void).cxx_destruct;
- (void)runCancellatonBlockWithOperation:(id)arg1;
- (void)waitForCancellation;
- (id)initWithCancellationBlock:(CDUnknownBlockType)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTDisallowFinishToken : NSObject <DVTCancellable>
{
    DVTOperation *_operation;
    NSString *_reason;
}

@property(readonly) NSString *reason; // @synthesize reason=_reason;
- (void).cxx_destruct;
- (void)cancel;
@property(readonly, getter=isCancelled) BOOL cancelled;
@property(readonly, copy) NSString *description;
- (id)initWithReason:(id)arg1 operation:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTOperation : NSOperation
{
    CDUnknownBlockType _block;
    NSError *_error;
    DVTDispatchLock *_cancellationRegistrationLock;
    DVTDispatchLock *_cancellationBlockLock;
    NSMutableArray *_cancellationBlockTokens;
    DVTDispatchLock *_finishingLock;
    NSMutableArray *_finishingTokens;
    BOOL _preventFinish;
    DVTObservingToken *_isFinishedObserverToken;
    DVTObservingToken *_isExecutingObserverToken;
    DVTStackBacktrace *_creationBacktrace;
}

+ (void)_trackStateChange:(id)arg1 ofOperation:(id)arg2 forKeyPath:(id)arg3;
+ (id)unfinishedOperations;
+ (id)operationWithBlock:(CDUnknownBlockType)arg1;
@property BOOL preventFinish; // @synthesize preventFinish=_preventFinish;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(copy) NSError *error; // @synthesize error=_error;
@property(copy) CDUnknownBlockType block; // @synthesize block=_block;
- (void).cxx_destruct;
- (id)notFinishedReasonWithDepth:(unsigned long long)arg1;
- (id)stateString;
- (void)enumerateUsingBlock:(CDUnknownBlockType)arg1;
- (void)_enumerateWithStop:(char *)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)allowFinishForToken:(id)arg1;
- (id)disallowFinishWithReason:(id)arg1;
- (BOOL)isFinished;
- (void)cancel;
- (BOOL)unregisterCancellationBlockForToken:(id)arg1;
- (id)registerCancellationBlock:(CDUnknownBlockType)arg1;
- (void)main;
- (id)description;
- (void)dealloc;
- (id)init;
- (void)trackFuture:(id)arg1;
- (void)trackFuture:(id)arg1 cancel:(BOOL)arg2 error:(BOOL)arg3;

@end

@interface DVTExtendedPlatformInfo : NSObject
{
    BOOL _profileCreationRequiresProvisioningProfilePlatform;
    BOOL _devicesCanBeRegistered;
    BOOL _requiresProxiedDevicesToBeRegistered;
    BOOL _requiresPortalAppGroups;
    BOOL _universalProfileRequiresCloudContainerEnvironmentString;
    BOOL _requiresExplicitAppIDForGameCenter;
    BOOL _requiresLocalGameCenterEntitlement;
    BOOL _useFallbackEntitlementsInXBS;
    BOOL _devicesEligibleOnlyIfRunnableMatchesPlatform;
    BOOL _prefersModelSpecificSupportDirectories;
    BOOL _ignoreDevices;
    NSString *_platformIdentifier;
    NSString *_provisioningProfilePlatform;
    NSString *_portalDeviceClass;
    NSArray *_provisioningProfileUTIs;
    NSString *_portalPlatformIdentifier;
    NSString *_developerProgramUserDescription;
    NSString *_pushNotificationServiceEntitlement;
    NSArray *_supportedCertificateKindNames;
    NSString *_correspondingDevicePlatformIdentifier;
    NSString *_correspondingSimulatorPlatformIdentifier;
    NSString *_minimumVersionForAnalytics;
    NSString *_minimumOSForDeviceSupport;
    NSString *_additionalBuiltProductsDirName;
    NSString *_additionalBuiltProductsDirExpression;
    NSString *_minimumOSForDownloadableSymbols;
    NSString *_defaultCodeSignIdentity;
    NSString *_productCategoryIdentifier;
    NSString *_minimumOSForASANWithoutDyldInsertLibrary;
    NSString *_minimumOSForTSanWithoutDyldInsertLibrary;
    NSString *_minimumOSForXPCServiceDebugging;
    NSString *_minimumOSForUnhostedXPCServiceDebugging;
    NSString *_minimumOSForTestManagerDaemon;
    NSString *_minimumOSForRecordedFrames;
    NSString *_minimumOSForMainThreadChecker;
    NSString *_minimumOSForBackgroundFetchEvents;
    unsigned long long _backgroundFetchSupportStyle;
    NSNumber *_machOMinOSLoadCommand;
    NSString *_minimumOSForNetworkedDevelopment;
    NSString *_analyticsPlatformIdentifier;
    NSSet *_destinationSpecifierAliases;
}

+ (id)extendedPlatformInfoForPlatformIdentifier:(id)arg1 error:(id *)arg2;
+ (id)extendedPlatformInfoForPlatformIdentifier:(id)arg1;
@property(readonly) NSSet *destinationSpecifierAliases; // @synthesize destinationSpecifierAliases=_destinationSpecifierAliases;
@property(readonly) NSString *analyticsPlatformIdentifier; // @synthesize analyticsPlatformIdentifier=_analyticsPlatformIdentifier;
@property(readonly) NSString *minimumOSForNetworkedDevelopment; // @synthesize minimumOSForNetworkedDevelopment=_minimumOSForNetworkedDevelopment;
@property(readonly) NSNumber *machOMinOSLoadCommand; // @synthesize machOMinOSLoadCommand=_machOMinOSLoadCommand;
@property(readonly) unsigned long long backgroundFetchSupportStyle; // @synthesize backgroundFetchSupportStyle=_backgroundFetchSupportStyle;
@property(readonly) NSString *minimumOSForBackgroundFetchEvents; // @synthesize minimumOSForBackgroundFetchEvents=_minimumOSForBackgroundFetchEvents;
@property(readonly) NSString *minimumOSForMainThreadChecker; // @synthesize minimumOSForMainThreadChecker=_minimumOSForMainThreadChecker;
@property(readonly) NSString *minimumOSForRecordedFrames; // @synthesize minimumOSForRecordedFrames=_minimumOSForRecordedFrames;
@property(readonly) NSString *minimumOSForTestManagerDaemon; // @synthesize minimumOSForTestManagerDaemon=_minimumOSForTestManagerDaemon;
@property(readonly) NSString *minimumOSForUnhostedXPCServiceDebugging; // @synthesize minimumOSForUnhostedXPCServiceDebugging=_minimumOSForUnhostedXPCServiceDebugging;
@property(readonly) NSString *minimumOSForXPCServiceDebugging; // @synthesize minimumOSForXPCServiceDebugging=_minimumOSForXPCServiceDebugging;
@property(readonly) NSString *minimumOSForTSanWithoutDyldInsertLibrary; // @synthesize minimumOSForTSanWithoutDyldInsertLibrary=_minimumOSForTSanWithoutDyldInsertLibrary;
@property(readonly) NSString *minimumOSForASANWithoutDyldInsertLibrary; // @synthesize minimumOSForASANWithoutDyldInsertLibrary=_minimumOSForASANWithoutDyldInsertLibrary;
@property(readonly) NSString *productCategoryIdentifier; // @synthesize productCategoryIdentifier=_productCategoryIdentifier;
@property(readonly) BOOL ignoreDevices; // @synthesize ignoreDevices=_ignoreDevices;
@property(readonly) NSString *defaultCodeSignIdentity; // @synthesize defaultCodeSignIdentity=_defaultCodeSignIdentity;
@property(readonly) NSString *minimumOSForDownloadableSymbols; // @synthesize minimumOSForDownloadableSymbols=_minimumOSForDownloadableSymbols;
@property(readonly) BOOL prefersModelSpecificSupportDirectories; // @synthesize prefersModelSpecificSupportDirectories=_prefersModelSpecificSupportDirectories;
@property(readonly) BOOL devicesEligibleOnlyIfRunnableMatchesPlatform; // @synthesize devicesEligibleOnlyIfRunnableMatchesPlatform=_devicesEligibleOnlyIfRunnableMatchesPlatform;
@property(readonly) NSString *additionalBuiltProductsDirExpression; // @synthesize additionalBuiltProductsDirExpression=_additionalBuiltProductsDirExpression;
@property(readonly) NSString *additionalBuiltProductsDirName; // @synthesize additionalBuiltProductsDirName=_additionalBuiltProductsDirName;
@property(readonly) NSString *minimumOSForDeviceSupport; // @synthesize minimumOSForDeviceSupport=_minimumOSForDeviceSupport;
@property(readonly) NSString *minimumVersionForAnalytics; // @synthesize minimumVersionForAnalytics=_minimumVersionForAnalytics;
@property(readonly) NSString *correspondingSimulatorPlatformIdentifier; // @synthesize correspondingSimulatorPlatformIdentifier=_correspondingSimulatorPlatformIdentifier;
@property(readonly) NSString *correspondingDevicePlatformIdentifier; // @synthesize correspondingDevicePlatformIdentifier=_correspondingDevicePlatformIdentifier;
@property(readonly) NSArray *supportedCertificateKindNames; // @synthesize supportedCertificateKindNames=_supportedCertificateKindNames;
@property(readonly) BOOL useFallbackEntitlementsInXBS; // @synthesize useFallbackEntitlementsInXBS=_useFallbackEntitlementsInXBS;
@property(readonly) NSString *pushNotificationServiceEntitlement; // @synthesize pushNotificationServiceEntitlement=_pushNotificationServiceEntitlement;
@property(readonly) BOOL requiresLocalGameCenterEntitlement; // @synthesize requiresLocalGameCenterEntitlement=_requiresLocalGameCenterEntitlement;
@property(readonly) BOOL requiresExplicitAppIDForGameCenter; // @synthesize requiresExplicitAppIDForGameCenter=_requiresExplicitAppIDForGameCenter;
@property(readonly) BOOL universalProfileRequiresCloudContainerEnvironmentString; // @synthesize universalProfileRequiresCloudContainerEnvironmentString=_universalProfileRequiresCloudContainerEnvironmentString;
@property(readonly) BOOL requiresPortalAppGroups; // @synthesize requiresPortalAppGroups=_requiresPortalAppGroups;
@property(readonly) NSString *developerProgramUserDescription; // @synthesize developerProgramUserDescription=_developerProgramUserDescription;
@property(readonly) NSString *portalPlatformIdentifier; // @synthesize portalPlatformIdentifier=_portalPlatformIdentifier;
@property(readonly) NSArray *provisioningProfileUTIs; // @synthesize provisioningProfileUTIs=_provisioningProfileUTIs;
@property(readonly) NSString *portalDeviceClass; // @synthesize portalDeviceClass=_portalDeviceClass;
@property(readonly) BOOL requiresProxiedDevicesToBeRegistered; // @synthesize requiresProxiedDevicesToBeRegistered=_requiresProxiedDevicesToBeRegistered;
@property(readonly) BOOL devicesCanBeRegistered; // @synthesize devicesCanBeRegistered=_devicesCanBeRegistered;
@property(readonly) BOOL profileCreationRequiresProvisioningProfilePlatform; // @synthesize profileCreationRequiresProvisioningProfilePlatform=_profileCreationRequiresProvisioningProfilePlatform;
@property(readonly) NSString *provisioningProfilePlatform; // @synthesize provisioningProfilePlatform=_provisioningProfilePlatform;
@property(readonly) NSString *platformIdentifier; // @synthesize platformIdentifier=_platformIdentifier;
- (void).cxx_destruct;
@property(readonly) DVTPlatform *primaryPlatform;
@property(readonly) BOOL isSimulatorPlatform;
@property(readonly) DVTPlatform *correspondingSimulatorPlatform;
@property(readonly) DVTPlatform *correspondingDevicePlatform;
- (id)initWithExtension:(id)arg1;

@end

@interface DVTDeveloperAccount : NSObject
{
    DVTDispatchLock *_lock;
    BOOL _enabled;
    BOOL _alwaysLogInUsingQA;
    DVTDeveloperAccountSession *_session;
    DVTDeveloperAccountCredentials *_accountCredentials;
    NSString *_userDescription;
    NSString *_credentialsErrorDescription;
    long long _accountType;
}

+ (id)keyPathsForValuesAffectingUserDescriptionOrBestGuess;
+ (id)keyPathsForValuesAffectingHasPassword;
+ (id)keyPathsForValuesAffectingPassword;
+ (id)keyPathsForValuesAffectingSession;
+ (id)_accountWithPropertyListRepresentation:(id)arg1 keychain:(struct OpaqueSecKeychainRef *)arg2 error:(id *)arg3;
+ (id)accountWithIdentity:(struct OpaqueSecIdentityRef *)arg1;
+ (id)accountWithCredentials:(id)arg1;
@property BOOL alwaysLogInUsingQA; // @synthesize alwaysLogInUsingQA=_alwaysLogInUsingQA;
@property BOOL enabled; // @synthesize enabled=_enabled;
@property long long accountType; // @synthesize accountType=_accountType;
@property(retain) NSString *credentialsErrorDescription; // @synthesize credentialsErrorDescription=_credentialsErrorDescription;
@property(copy, nonatomic) NSString *userDescription; // @synthesize userDescription=_userDescription;
@property(copy) DVTDeveloperAccountCredentials *accountCredentials; // @synthesize accountCredentials=_accountCredentials;
- (void).cxx_destruct;
- (void)checkForValidCredentials:(CDUnknownBlockType)arg1;
- (void)validateCredentialsWithCallback:(CDUnknownBlockType)arg1;
@property(readonly) NSDictionary *propertyListRepresentation;
@property(readonly) NSString *userDescriptionOrBestGuess;
@property(readonly) BOOL hasPassword;
@property(copy) NSString *password;
@property(readonly) NSString *certSerialNumber;
@property(readonly) NSString *certCommonName;
@property(readonly) struct OpaqueSecIdentityRef *identity;
@property(readonly) BOOL isCertBased;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
@property(readonly, copy) NSString *username;
- (void)revokeSession:(id)arg1;
- (id)sessionIfAvailable;
@property(readonly) DVTDeveloperAccountSession *session; // @synthesize session=_session;
- (void)executeWithSession:(CDUnknownBlockType)arg1;
- (id)_sessionByLoggingInIfNeededWithinLock:(id *)arg1;
- (id)sessionByLoggingInIfNeeded:(id *)arg1;
- (id)_sessionByLoggingIn:(id *)arg1;
- (id)init;

@end

@interface DVTCertBasedDeveloperAccount : DVTDeveloperAccount
{
    struct OpaqueSecIdentityRef *_identity;
    DVTSigningCertificate *_certificate;
}

+ (id)accountWithIdentity:(struct OpaqueSecIdentityRef *)arg1;
- (void).cxx_destruct;
- (id)_sessionByLoggingIn:(id *)arg1;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)username;
- (BOOL)isCertBased;
- (struct OpaqueSecIdentityRef *)identity;
- (id)certSerialNumber;
- (id)certCommonName;
- (void)dealloc;

@end

@interface DVTAppleIDBasedDeveloperAccount : DVTDeveloperAccount
{
}

+ (id)accountWithCredentials:(id)arg1;
- (id)_sessionByLoggingIn:(id *)arg1;
- (id)propertyListRepresentation;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;

@end

@interface DVTProductCategoryProviderUnknown : NSObject <DVTProductCategoryProvider>
{
}

+ (id)overridingDeviceTypes;

@end

@interface DVTDeviceLocator : NSObject
{
    NSMutableSet *_locatedDevices;
}

+ (id)deviceLocator;
+ (void)initialize;
- (void).cxx_destruct;
- (void)unpairDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)pairCompanionDevice:(id)arg1 withGizmoDevice:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)deleteDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)matchDevice:(id)arg1 againstOptions:(id)arg2 genericOnly:(BOOL)arg3;
- (BOOL)matchDevice:(id)arg1 againstOptions:(id)arg2 genericOnly:(BOOL)arg3 allowAliases:(BOOL)arg4;
- (BOOL)validateDeviceSpecifierOptions:(id)arg1 genericOnly:(BOOL)arg2 allowMultipleMatches:(BOOL)arg3 error:(id *)arg4;
@property(readonly) DVTDeviceType *deviceType; // @dynamic deviceType;
- (id)knownDeviceAtDeviceLocation:(id)arg1;
- (void)stopLocating;
- (BOOL)startLocatingWithError:(id *)arg1;
- (void)startLocating;
@property(readonly, copy) NSSet *platforms;
@property(readonly, copy) DVTPlatform *platform;
@property(readonly, copy) NSString *deviceLocationScheme; // @dynamic deviceLocationScheme;
- (id)init;

// Remaining properties
@property(readonly, copy) NSSet *locatedDevices; // @dynamic locatedDevices;
@property(readonly, copy) NSMutableSet *mutableLocatedDevices; // @dynamic mutableLocatedDevices;

@end

@interface DVTServiceDefaults : NSObject
{
    NSString *_serviceXcodeVersionString;
}

+ (id)sharedDefaults;
- (void).cxx_destruct;
@property(readonly, copy, nonatomic) NSString *serviceXcodeVersionString; // @synthesize serviceXcodeVersionString=_serviceXcodeVersionString;
@property(readonly, copy, nonatomic) NSString *serviceXcodeServerUserAgentString;
@property(readonly, copy, nonatomic) NSString *serviceXcodeUserAgentString;

@end

@interface DVTProductCategoryProviderMacApp : NSObject <DVTProductCategoryProvider>
{
}

+ (id)overridingDeviceTypes;

@end

@interface DVTDispatchLock : NSObject <DVTLocking>
{
    NSObject<OS_dispatch_queue> *_queue;
}

+ (id)readWriteDispatchLockWithDebugName:(id)arg1;
+ (id)recursiveDispatchLockWithDebugName:(id)arg1;
+ (id)dispatchLockWithDebugName:(id)arg1;
@property(readonly) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
- (void).cxx_destruct;
- (void)performLockedBlockAsyncUnlessRecursing:(CDUnknownBlockType)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)afterTimeInterval:(double)arg1 asyncPerformLockedBlock:(CDUnknownBlockType)arg2;
- (void)asyncPerformLockedWriterBlock:(CDUnknownBlockType)arg1;
- (void)asyncPerformLockedReaderBlock:(CDUnknownBlockType)arg1;
- (void)performLockedWriterBlock:(CDUnknownBlockType)arg1;
- (void)performLockedReaderBlock:(CDUnknownBlockType)arg1;
- (void)asyncPerformLockedBlock:(CDUnknownBlockType)arg1;
- (void)performLockedBlock:(CDUnknownBlockType)arg1;
@property(readonly) NSString *debugName;
- (void)dealloc;
- (id)initWithDebugName:(id)arg1;
- (id)initWithDebugName:(id)arg1 isRecursive:(BOOL)arg2;
- (void)dvt_asyncPerformLockedBlock:(CDUnknownBlockType)arg1;
- (void)dvt_performLockedBlock:(CDUnknownBlockType)arg1;

@end

@interface DVTDispatchLock_Recursive : DVTDispatchLock
{
    // Error parsing type: A^{_opaque_pthread_t}, name: _recursiveSafeThread
}

- (void)performLockedBlockAsyncUnlessRecursing:(CDUnknownBlockType)arg1;
- (void)afterTimeInterval:(double)arg1 asyncPerformLockedBlock:(CDUnknownBlockType)arg2;
- (void)asyncPerformLockedWriterBlock:(CDUnknownBlockType)arg1;
- (void)asyncPerformLockedReaderBlock:(CDUnknownBlockType)arg1;
- (void)asyncPerformLockedBlock:(CDUnknownBlockType)arg1;
- (void)performLockedReaderBlock:(CDUnknownBlockType)arg1;
- (void)performLockedBlock:(CDUnknownBlockType)arg1;

@end

@interface DVTDispatchLock_ReadWrite : DVTDispatchLock
{
    void *_context;
}

- (void)performLockedReaderBlock:(CDUnknownBlockType)arg1;
- (id)initWithDebugName:(id)arg1;

@end

@interface DVTTextPreferences : NSObject
{
    double _autoHighlightTokenAppearancesDelay;
    long long _wrappedLinesIndentWidth;
    long long _tabKeyIndentingBehavior;
    unsigned long long _defaultLineEndings;
    BOOL _codeFocusOnHover;
}

+ (id)sharedPreferences;
+ (id)preferences;
+ (id)_userStatisticsValueForKey:(id)arg1;
+ (void)recordMessageTracerStatistics;
+ (id)_defaultDefaults;
+ (void)initialize;
@property(nonatomic) long long tabKeyIndentingBehavior; // @synthesize tabKeyIndentingBehavior=_tabKeyIndentingBehavior;
@property BOOL beepOnNonMatchingBrace;
@property BOOL showMatchingBrace;
@property BOOL selectToInsideMatchingQuotes;
@property BOOL selectToInsideMatchingBraces;
@property BOOL selectToMatchingBrace;
@property BOOL scrollToEndOfMatchingBrace;
@property BOOL showCompletionsOnEsc;
@property BOOL completionsIncludeParameters;
@property double autoSuggestCompletionsDelay;
@property BOOL autoSuggestCompletions;
@property BOOL enableTypeOverCompletions;
@property BOOL autoInsertOpenBracket;
@property BOOL autoInsertClosingBrace;
@property BOOL trimWhitespaceOnlyLines;
@property BOOL trimTrailingWhitespace;
@property long long wrappedLinesIndentWidth;
@property BOOL wrapLines;
- (BOOL)characterIsAutoIndent:(unsigned short)arg1;
@property(copy) NSString *autoIndentCharacters;
@property BOOL matchIndentWithLineAbove;
@property BOOL alignConsecutiveSlashSlashComments;
@property BOOL indentSlashSlashComments;
@property long long soloBraceIndentWidth;
@property BOOL indentSoloBraces;
@property BOOL useSyntaxAwareIndenting;
@property long long indentWidth;
@property long long tabWidth;
@property BOOL useTabsToIndent;
@property(readonly) NSArray *availableTextEncodings;
@property unsigned long long defaultTextEncoding;
@property BOOL convertExistingFilesLineEndings;
@property unsigned long long defaultLineEndings;
@property BOOL centersOnScroll;
@property BOOL showCodeCoverageCounts;
@property BOOL showCodeCoverage;
@property BOOL showInvisibleCharacters;
@property BOOL highlightCurrentLine;
@property int annotationDisplayPolicy;
@property BOOL showMessageBubbleAnnotations;
@property double autoHighlightTokenAppearancesDelay;
@property BOOL autoHighlightTokenAppearances;
@property long long pageGuideLocation;
@property BOOL showPageGuide;
@property BOOL codeFocusOnHover;
@property BOOL codeFocusFollowsSelection;
@property BOOL showCodeFoldingSidebar;
@property BOOL showLineNumbers;
- (id)init;

@end

@interface DVTTextFinder : NSObject
{
    NSMutableArray *_findResults;
    id <DVTTextFindable> _findable;
    DVTFindDescriptor *_findDescriptor;
    BOOL _findComplete;
    BOOL _findableSupportsReplace;
}

@property(readonly) id <DVTTextFindable> findable; // @synthesize findable=_findable;
@property(readonly) DVTFindDescriptor *findDescriptor; // @synthesize findDescriptor=_findDescriptor;
- (void).cxx_destruct;
- (unsigned long long)_findIndexForLocation:(id)arg1 inResults:(id)arg2;
- (BOOL)_findNext;
- (long long)_compareLocation:(id)arg1 toLocation:(id)arg2;
- (id)findResultsFrom:(id)arg1 to:(id)arg2 beforeDate:(id)arg3;
- (BOOL)findBeforeDate:(id)arg1;
- (id)findResultAfter:(id)arg1;
- (id)findResultBefore:(id)arg1;
@property(readonly) unsigned long long foundCount;
@property(readonly) NSArray *findResults;
@property(readonly) BOOL findComplete;
- (id)initWithFindDescriptor:(id)arg1 onFindable:(id)arg2;

@end

@interface DVTObsoleteUnarchivedObjectPlaceholder : NSObject
{
}

- (void)dvt_addObject:(id)arg1 fromXMLUnarchiver:(id)arg2;

@end

@interface _DVTDiffLineDataSourceConsistentCopy : DVTDiffDataSource
{
    unsigned long long _tokenCount;
    NSData *_tokenStorage;
    CDStruct_3dd9eb72 *_rawTokenStorage;
    NSString *_arrangedContent;
}

- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)arrangedContent;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (void)getDiffTokens:(CDStruct_3dd9eb72 *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (CDStruct_3dd9eb72)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (id)initWithContent:(id)arg1 arrangedContent:(id)arg2 tokenStorage:(id)arg3;

@end

@interface DVTDiffLineDataSource : DVTDiffDataSource
{
    DVTDispatchLock *_tokenStorageLock;
}

- (void).cxx_destruct;
- (struct _NSRange)tokenRangeForCharacterRange:(struct _NSRange)arg1;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (void)getDiffTokens:(CDStruct_3dd9eb72 *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (CDStruct_3dd9eb72)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithContent:(id)arg1;

@end

@interface DVTFileLogger : DVTLogger
{
    unsigned long long _indentLevel;
    NSURL *_fileURL;
    NSFileHandle *_fileHandle;
}

+ (void)initialize;
@property(readonly) NSURL *fileURL; // @synthesize fileURL=_fileURL;
@property unsigned long long indentLevel; // @synthesize indentLevel=_indentLevel;
- (void).cxx_destruct;
- (void)decreaseIndentLevelForAspect:(id)arg1;
- (void)increaseIndentLevelForAspect:(id)arg1;
- (void)logMessage:(id)arg1 forAspect:(id)arg2 logLevel:(int)arg3;
- (id)init;
- (id)initWithURL:(id)arg1;
- (id)initWithURL:(id)arg1 append:(BOOL)arg2;

@end

@interface DVTRegistry : NSObject
{
    DVTDispatchLock *_lock;
    DVTMutableOrderedDictionary *_identsToObjects;
    NSMutableDictionary *_aliasesToObjects;
    NSString *_debugName;
}

@property(readonly) DVTDispatchLock *lock; // @synthesize lock=_lock;
- (void).cxx_destruct;
- (id)description;
- (id)allRegisteredObjects;
- (id)objectForIdentifier:(id)arg1;
- (void)didRegisterObject:(id)arg1 replacingObject:(id)arg2;
- (BOOL)registerObject:(id)arg1 collisionHandler:(CDUnknownBlockType)arg2;
@property(readonly) NSString *debugName;
- (id)init;
- (id)initWithDebugName:(id)arg1;

@end

@interface DVTPerformanceMetric : NSObject
{
    DVTLogAspect *_aspect;
    int _logLevel;
    id <DVTSelfInstrumentationSession> _selfInstrumentationSession;
    NSString *_label;
    NSString *_context;
    NSString *_result;
    NSString *_profileLogInfo;
    id _identifier;
    DVTDispatchLock *_checkpointsLock;
    NSMutableArray *_checkpoints;
    struct __CFRunLoopObserver *_runLoopObserver;
    double _tolerance;
    double _start;
    double _end;
    double _expectedDuration;
    double _lastRunLoopPollTime;
    double _maxRunLoopBusyInterval;
    NSTimer *_expireTimer;
    double _expireInterval;
    BOOL _logImmediately;
    BOOL _stopWhenRunLoopIdle;
    BOOL _checkpointSkipsInstrumentsSignal;
}

+ (Class)selfInstrumentationClass;
+ (void)dumpAggregateStats:(id)arg1;
+ (id)startedMetricForAspect:(id)arg1 logLevel:(int)arg2 label:(id)arg3;
+ (id)metricWithIdentifier:(id)arg1;
+ (void)initialize;
- (void).cxx_destruct;
- (void)runLoopBeforeSources;
- (void)runLoopBeforeTimers;
- (void)runLoopWaking;
- (void)runLoopSleeping;
- (void)monitorRunLoop;
- (void)expire:(id)arg1;
- (void)setExpireInterval:(double)arg1;
- (void)_registerForRunLoopCallouts;
- (void)setExpectedDuration:(double)arg1 tolerance:(double)arg2;
- (void)stopWhenRunLoopIdle;
- (void)setContextString:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)logPerformanceMetricData;
- (void)checkpoint:(id)arg1;
- (void)setResultString:(id)arg1;
- (void)setEndTime;
- (void)setStartTime;
- (id)initWithAspect:(id)arg1 logLevel:(int)arg2 label:(id)arg3;

@end

@interface DVTFindPattern : NSObject <NSCoding, NSCopying>
{
    NSString *regularExpression;
    NSString *tokenString;
    NSString *displayString;
    NSString *replacementString;
    NSString *uniqueID;
    BOOL allowsBackreferences;
    BOOL isNegation;
    int groupID;
    int captureGroupID;
    int repeatedPatternID;
}

+ (id)displayStringDepictingPatterns:(id)arg1;
+ (id)replacementExpressionFromPatternArray:(id)arg1;
+ (id)regularExpressionFromPatternArray:(id)arg1 escapingStrings:(BOOL)arg2 usingBackreferences:(BOOL)arg3;
+ (id)placeholderFindPattern;
@property(copy) NSString *replacementString; // @synthesize replacementString;
@property int repeatedPatternID; // @synthesize repeatedPatternID;
@property(readonly) NSString *uniqueID; // @synthesize uniqueID;
@property int captureGroupID; // @synthesize captureGroupID;
@property BOOL isNegation; // @synthesize isNegation;
@property BOOL allowsBackreferences; // @synthesize allowsBackreferences;
@property int groupID; // @synthesize groupID;
@property(copy) NSString *tokenString; // @synthesize tokenString;
@property(copy) NSString *regularExpression; // @synthesize regularExpression;
@property(copy) NSString *displayString; // @synthesize displayString;
- (void).cxx_destruct;
- (id)backreferenceExpression;
- (id)replaceExpression;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithPropertyListRepresentation:(id)arg1;
- (id)propertyListRepresentation;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)generateNewUniqueID;
- (void)_setUniqueID:(id)arg1;
- (id)description;
- (BOOL)isEqual:(id)arg1;

@end

@interface DVTDiffDataSource : NSObject <NSCopying>
{
    id _content;
    NSString *_label;
    unsigned long long _timestamp;
    struct _DVTDiffContextFlags _dcFlags;
}

+ (id)diffDataSourceWithContent:(id)arg1;
@property struct _DVTDiffContextFlags dcFlags; // @synthesize dcFlags=_dcFlags;
@property unsigned long long timestamp; // @synthesize timestamp=_timestamp;
- (void).cxx_destruct;
- (id)tokenStringWithTokenRange:(struct _NSRange)arg1;
- (id)tokenStringWithPrefix:(id)arg1 tokenRange:(struct _NSRange)arg2;
- (void)appendTokenStringToString:(id)arg1 tokenRange:(struct _NSRange)arg2;
- (void)appendTokenStringToString:(id)arg1 prefix:(id)arg2 tokenRange:(struct _NSRange)arg3;
- (void)appendLabelToString:(id)arg1 prefix:(id)arg2;
- (unsigned long long)diffTokenHashWithRange:(struct _NSRange)arg1;
- (unsigned long long)diffTokenHashInDiffDescriptor:(id)arg1 range:(struct _NSRange)arg2;
- (long long)numberOfDiffTokens;
- (long long)numberOfDiffTokensInDiffDescriptor:(id)arg1;
- (CDStruct_3dd9eb72)diffTokenAtIndex:(long long)arg1;
- (void)getDiffTokens:(CDStruct_3dd9eb72 *)arg1 inDiffDescriptor:(id)arg2 inRange:(struct _NSRange)arg3;
- (CDStruct_3dd9eb72)diffTokenInDiffDescriptor:(id)arg1 atIndex:(long long)arg2;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToDiffDataSource:(id)arg1;
@property(retain) NSString *label; // @synthesize label=_label;
- (id)THREAD_arrangedContent;
- (id)arrangedContent;
@property(readonly) id THREAD_content;
@property(retain) id content; // @synthesize content=_content;
- (BOOL)_setContent:(id)arg1;
- (void)didChangeContent;
- (void)willChangeContent;
- (void)didChange;
- (id)description;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)initWithContent:(id)arg1;

@end

@interface DVTDeviceManager : NSObject
{
    DVTDeviceStateManager *_stateManager;
    NSMutableDictionary *_locatorTrackers;
    NSMapTable *_observingTokens;
    NSMutableSet *_availableDevices;
    DVTLocalComputer *_localComputer;
}

+ (id)defaultDeviceManager;
+ (void)initialize;
- (void).cxx_destruct;
- (id)deviceLocatorForDeviceType:(id)arg1;
- (id)searchForDevicesWithType:(id)arg1 options:(id)arg2 timeout:(double)arg3 error:(id *)arg4;
- (id)searchForDeviceWithType:(id)arg1 options:(id)arg2 genericOnly:(BOOL)arg3 timeout:(double)arg4 error:(id *)arg5;
- (id)_searchForDevicesWithType:(id)arg1 options:(id)arg2 genericOnly:(BOOL)arg3 allowMultiple:(BOOL)arg4 timeout:(double)arg5 error:(id *)arg6;
- (id)_waitForDeviceUsingLocatorsToOptions:(id)arg1 genericOnly:(BOOL)arg2 allowMultiple:(BOOL)arg3 timeout:(double)arg4 error:(id *)arg5;
- (id)_lookUpAvailableDevicesUsingLocatorsToOptions:(id)arg1 genericOnly:(BOOL)arg2 allowMultiple:(BOOL)arg3 error:(id *)arg4;
- (id)_deviceLocatorForDeviceSpecifierPrefix:(id)arg1 error:(id *)arg2;
- (BOOL)locateOnlyLocalComputerWithError:(id *)arg1;
- (void)locateOnlyLocalComputer;
- (void)stopLocating;
- (BOOL)startLocatingWithError:(id *)arg1;
- (void)startLocating;
- (void)_updateDefaultsForDevice:(id)arg1;
- (void)_adjustAvailableDevicesForChangeKind:(unsigned long long)arg1 addedObjects:(id)arg2 removedObjects:(id)arg3;
- (void)_stopObservingDevice:(id)arg1;
- (void)_startObservingDevice:(id)arg1;
- (id)_discoverDeviceLocators;
- (id)deviceAtDeviceLocation:(id)arg1;
- (id)_deviceLocatorForDeviceLocationScheme:(id)arg1;
- (id)devicesMatchingPredicate:(id)arg1;
@property(readonly) DVTLocalComputer *localComputer;
- (id)init;

// Remaining properties
@property(copy) NSSet *availableDevices; // @dynamic availableDevices;
@property(readonly, copy) NSMutableSet *mutableAvailableDevices; // @dynamic mutableAvailableDevices;

@end

@interface _DVTDeviceLocatorTracker : NSObject
{
    DVTDeviceLocator *_deviceLocator;
    DVTDeviceManager *_deviceManager;
    DVTObservingToken *_observation;
}

@property(readonly) DVTDeviceLocator *deviceLocator; // @synthesize deviceLocator=_deviceLocator;
- (void).cxx_destruct;
- (void)stopLocatingAndObserving;
- (void)startLocating;
- (void)startObserving;
- (id)initWithDeviceLocator:(id)arg1 forDeviceManager:(id)arg2;

@end

@interface DVTVersion : NSObject <NSCopying>
{
    CDUnion_7de6e739 _components;
    NSString *_stringValue;
    NSString *_buildNumber;
}

+ (id)userRepresentationOfVersion:(id)arg1 build:(id)arg2;
+ (id)currentSystemVersion;
+ (id)versionWithStringValue:(id)arg1;
+ (id)versionWithStringValue:(id)arg1 buildNumber:(id)arg2;
+ (id)versionWithMajorComponent:(unsigned long long)arg1 minorComponent:(unsigned long long)arg2 updateComponent:(unsigned long long)arg3;
+ (id)versionWithAvailabilityForm:(unsigned long long)arg1;
+ (void)initialize;
@property(copy) NSString *buildNumber; // @synthesize buildNumber=_buildNumber;
- (void).cxx_destruct;
- (unsigned long long)availabilityFormIncludingUpdate:(BOOL)arg1 shortForm:(BOOL)arg2;
- (unsigned long long)availabilityFormIncludingUpdate:(BOOL)arg1;
- (id)initWithString:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isEqualToOrNewerThanVersion:(id)arg1;
- (long long)compare:(id)arg1;
@property(readonly, copy) NSString *stringValue;
@property(readonly) unsigned long long updateComponent;
@property(readonly) unsigned long long minorComponent;
@property(readonly) unsigned long long majorComponent;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithVersionComponents:(CDUnion_7de6e739)arg1;

@end

@interface DVTBuildVersion : NSObject
{
    NSString *_buildVersion;
    unsigned long long _buildVersionMajorNumber;
    NSString *_buildVersionMajorLetter;
    unsigned long long _buildVersionMinorNumber;
    NSString *_buildVersionMinorLetter;
}

+ (id)buildVersionWithString:(id)arg1;
+ (id)currentSystemVersion;
- (void).cxx_destruct;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (long long)compare:(id)arg1;
@property(readonly) NSString *buildVersionMinorLetter;
@property(readonly) unsigned long long buildVersionMinorNumber;
@property(readonly) NSString *buildVersionMajorLetter;
@property(readonly) unsigned long long buildVersionMajorNumber;
- (void)_parseBuildVersionIfNecessary;
- (id)name;
- (id)initWithString:(id)arg1;

@end

@interface DVTQuickLookPage : NSObject
{
    NSURL *_documentURL;
    unsigned long long _pageNumber;
}

@property(readonly) unsigned long long pageNumber; // @synthesize pageNumber=_pageNumber;
@property(readonly) NSURL *documentURL; // @synthesize documentURL=_documentURL;
- (void).cxx_destruct;
- (id)description;
- (id)initWithDocumentURL:(id)arg1 pageNumber:(unsigned long long)arg2;

@end

@interface DVTLocalComputerLocator : DVTDeviceLocator
{
}

+ (id)localComputer;
- (BOOL)matchDevice:(id)arg1 againstOptions:(id)arg2 genericOnly:(BOOL)arg3 allowAliases:(BOOL)arg4;
- (id)deviceType;
- (id)knownDeviceAtDeviceLocation:(id)arg1;
- (void)stopLocating;
- (void)startLocating;
- (id)platforms;
- (id)deviceLocationScheme;

@end

@interface DVTSourceModelParser : NSObject
{
    DVTLanguageSpecification *_langSpec;
    long long _langId;
    long long _langToken;
    CDStruct_341fcc3f _currentToken;
    CDStruct_627e0f85 _parseRange;
    BOOL _saveToken;
    BOOL _validToken;
    struct _NSRange _previousTokenRange;
    NSMutableArray *_nodeStack;
    NSMutableArray *_productionState;
    NSMutableIndexSet *_validProductionStates;
    struct _NSRange _dirtyRange;
}

+ (id)createTerminalNodeForToken:(CDStruct_341fcc3f *)arg1 scopeProductionRule:(id *)arg2;
+ (id)languageSpecification;
+ (void)initializeLanguageSpecification:(id)arg1;
- (void).cxx_destruct;
- (BOOL)_atEndOfParseRange;
- (void)_endLexerMode:(unsigned long long)arg1;
- (void)_beginLexerMode:(unsigned long long)arg1;
- (BOOL)_getNextToken:(CDStruct_341fcc3f *)arg1 temporaryFlags:(unsigned long long)arg2;
- (unsigned long long)_currentLocation;
- (void)_setCurrentLocation:(unsigned long long)arg1;
- (void)_resetLexerWithInputString:(id)arg1;
- (void)_hoistUpTrailingIgnoreNodesFromNode:(id)arg1 toArray:(id)arg2;
- (unsigned long long)_reuseScopeNode:(id)arg1 using:(id)arg2;
- (id)_branchToReuseInScope:(id)arg1 atLocation:(unsigned long long)arg2 node:(id)arg3;
- (unsigned long long)_acceptChildrenInScope:(id)arg1 atIndex:(unsigned long long)arg2 stackRange:(struct _NSRange)arg3 node:(id)arg4;
- (id)_reduceToProduction:(id)arg1 stackRange:(struct _NSRange)arg2 node:(id)arg3 inScope:(id)arg4;
- (void)_initializeProductionStateForNode:(id)arg1 scopeProdRule:(id)arg2 nodeInteriorPredictSet:(id)arg3 nodeInteriorPredictSetCount:(unsigned long long)arg4;
- (void)_initializeProductionStateForCurrentToken:(id)arg1 tokenInteriorPredictSet:(id)arg2 tokenInteriorPredictSetCount:(unsigned long long)arg3;
- (unsigned long long)_reuseAndSkipAhead:(id)arg1 index:(unsigned long long)arg2 location:(unsigned long long)arg3;
- (unsigned long long)_discardChildrenInScope:(id)arg1 fromIndex:(unsigned long long)arg2 toLocation:(unsigned long long)arg3;
- (unsigned long long)_replaceItemsWithinRange:(id)arg1 newArray:(id)arg2 index:(unsigned long long)arg3;
- (id)_parseOutOfBand:(id)arg1;
- (id)_parse:(id)arg1 inScope:(id)arg2 node:(id)arg3 outOfBand:(long long)arg4;
- (id)parse:(id)arg1 withContext:(id)arg2 inputString:(id)arg3 range:(struct _NSRange)arg4 dirtyRange:(struct _NSRange *)arg5;
- (id)init;

@end

@interface DVTExtensionPoint : NSObject <DVTPropertyListEncoding>
{
    NSDictionary *_extensionPointData;
    DVTPlugInManager *_plugInManager;
    NSString *_identifier;
    NSString *_version;
    NSString *_name;
    DVTPlugIn *_plugIn;
    DVTExtensionElementDescription *_extensionSchema;
    DVTExtensionPoint *_parentExtensionPoint;
    NSMutableSet *_extensions;
    NSMutableSet *_childExtensionPoints;
}

+ (id)requiredExtensionsForExtensionPointWithIdentifier:(id)arg1;
+ (id)requiredExtensionPointForIdentifier:(id)arg1;
@property(readonly, copy) NSSet *childExtensionPoints; // @synthesize childExtensionPoints=_childExtensionPoints;
@property(readonly, copy) NSSet *extensions; // @synthesize extensions=_extensions;
@property(readonly) DVTPlugIn *plugIn; // @synthesize plugIn=_plugIn;
@property(readonly, copy) NSString *name; // @synthesize name=_name;
@property(readonly, copy) NSString *version; // @synthesize version=_version;
@property(readonly, copy) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (void)_registerChildExtensionPoint:(id)arg1;
- (void)_registerExtension:(id)arg1;
- (id)extensionsMatchingPredicate:(id)arg1;
@property(readonly) NSBundle *bundle;
@property(readonly) DVTExtensionPoint *parentExtensionPoint; // @dynamic parentExtensionPoint;
@property(readonly, copy) DVTExtensionElementDescription *extensionSchema; // @dynamic extensionSchema;
- (void)_setUpParentExtensionPoint;
@property(readonly, copy) NSString *description;
- (void)encodeIntoPropertyList:(id)arg1;
- (void)awakeFromPropertyList;
- (id)initWithPropertyList:(id)arg1 owner:(id)arg2;
- (id)initWithExtensionPointData:(id)arg1 plugIn:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface DVTToolsInfo : NSObject
{
    NSNumber *_isAppleInternal;
    DVTBuildVersion *_toolsBuildVersion;
}

+ (id)toolsInfo;
+ (void)initialize;
- (void).cxx_destruct;
@property(readonly) BOOL hasUnlimitedPower;
@property(readonly) BOOL isRuntimeOSAppleInternal;
@property(readonly) DVTVersion *runtimeOSVersion;
@property(readonly) unsigned long long runtimeOSActualVersion;
@property(readonly) unsigned long long runtimeOSMajorVersion;
@property(readonly) DVTVersion *buildOSVersion;
@property(readonly) unsigned long long buildOSActualVersion;
@property(readonly) unsigned long long buildOSMajorVersion;
@property(readonly) unsigned long long toolsBetaVersion;
@property(readonly) BOOL isBeta;
@property(readonly) DVTBuildVersion *toolsBuildVersion;
@property(readonly) DVTToolsVersion *toolsVersion;
@property(readonly) BOOL isAppleInternal;

@end

@interface DVTComparisonDocumentLocation : DVTDocumentLocation
{
    DVTDocumentLocation *_primaryDocumentLocation;
    DVTDocumentLocation *_secondaryDocumentLocation;
    DVTDocumentLocation *_ancestorDocumentLocation;
}

@property(readonly) DVTDocumentLocation *ancestorDocumentLocation; // @synthesize ancestorDocumentLocation=_ancestorDocumentLocation;
@property(copy) DVTDocumentLocation *secondaryDocumentLocation; // @synthesize secondaryDocumentLocation=_secondaryDocumentLocation;
@property(copy) DVTDocumentLocation *primaryDocumentLocation; // @synthesize primaryDocumentLocation=_primaryDocumentLocation;
- (void).cxx_destruct;
- (long long)compare:(id)arg1;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqualDisregardingTimestamp:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)timestamp;
- (id)documentURL;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2;
- (id)initWithPrimaryDocumentLocation:(id)arg1 secondaryDocumentLocation:(id)arg2 ancestorDocumentLocation:(id)arg3;

@end

@interface DVTFileDataType : NSObject <NSCopying>
{
    struct DVTBitSet *_conformanceBitSet;
}

+ (id)logAspect;
+ (id)fileDataTypeForFilename:(id)arg1 error:(id *)arg2;
+ (id)fileDataTypeForFilePath:(id)arg1 error:(id *)arg2;
+ (id)fileDataTypeForFileURL:(id)arg1 error:(id *)arg2;
+ (id)fileDataTypeForFileContentAtPath:(id)arg1 error:(id *)arg2;
+ (id)fileDataTypeForFileContentAtURL:(id)arg1 error:(id *)arg2;
+ (id)_fileDataTypeForFileAtPath:(id)arg1 consideringFileContent:(BOOL)arg2 error:(id *)arg3;
+ (id)_findMatchingTypeUsingDetectors:(id)arg1 givenCurrentMatchingType:(id)arg2 filePath:(id)arg3 allowCustomDetectors:(BOOL)arg4 error:(id *)arg5;
+ (id)_matchingTypeDetectorExtensionsForFilePathExtension:(id)arg1;
+ (id)_launchServicesUTIForMimeType:(id)arg1;
+ (id)_launchServicesUTIForFileAtPath:(id)arg1 consideringFileContent:(BOOL)arg2;
+ (id)_launchServicesUTIForFileAtURL:(id)arg1;
+ (id)_convertFromLaunchServicesDynamicUTIIfNeeded:(id)arg1;
+ (id)fileDataTypeWithIdentifier:(id)arg1;
+ (id)fileDataTypeFromStringRepresentation:(id)arg1;
+ (id)_synthesizedFileTypeWithPrimaryType:(id)arg1 secondaryTypes:(id)arg2;
+ (void)_splitSynthesizedTypeStringRepresentation:(id)arg1 intoPrimaryType:(id *)arg2 andSecondaryTypes:(id *)arg3;
+ (id)_makeSynthesizedTypeStringRepresentationFromPrimaryType:(id)arg1 secondaryTypes:(id)arg2;
- (BOOL)isUnknownType;
- (BOOL)isDynamicType;
- (BOOL)isDeclaredType;
- (id)fileConversionTypeForFilePath:(id)arg1;
- (id)secondaryFileDataTypes;
- (id)primaryFileDataType;
- (BOOL)isGenericFileDataType;
- (BOOL)conformsToAnyIdentifierInSet:(id)arg1;
- (BOOL)conformsTo:(id)arg1;
- (BOOL)conformsToType:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct DVTBitSet *)conformanceBitSet;
@property(readonly) NSString *displayName;
@property(readonly) NSString *identifier;
- (id)stringRepresentation;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;
- (id)init;
- (id)initWithConformanceBitSetNoCopy:(struct DVTBitSet *)arg1;

@end

@interface DVTPrimitiveFileDataType : DVTFileDataType
{
    unsigned long long _number;
    NSString *_identifier;
    NSString *_displayName;
}

- (void).cxx_destruct;
- (id)description;
- (id)stringRepresentation;
- (id)secondaryFileDataTypes;
- (id)primaryFileDataType;
- (id)displayName;
- (id)identifier;
- (BOOL)isEqual:(id)arg1;
- (id)init;
- (id)initWithIdentifier:(id)arg1;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2 conformingToTypes:(id)arg3;

@end

@interface DVTDeclaredPrimitiveFileDataType : DVTPrimitiveFileDataType
{
}

- (BOOL)isDeclaredType;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2 conformingToTypes:(id)arg3;

@end

@interface DVTDynamicPrimitiveFileDataType : DVTPrimitiveFileDataType
{
}

- (BOOL)isDynamicType;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2;

@end

@interface DVTUnknownPrimitiveFileDataType : DVTPrimitiveFileDataType
{
}

- (BOOL)isUnknownType;
- (id)initWithIdentifier:(id)arg1 displayName:(id)arg2;

@end

@interface DVTSynthesizedFileDataType : DVTFileDataType
{
    DVTPrimitiveFileDataType *_primaryType;
    NSSet *_secondaryTypes;
}

- (void).cxx_destruct;
- (id)description;
- (id)stringRepresentation;
- (id)displayName;
- (id)secondaryFileDataTypes;
- (id)primaryFileDataType;
- (id)init;
- (id)initWithPrimaryType:(id)arg1 secondaryTypes:(id)arg2;

@end

@interface DVTExtensionParameter : NSObject
{
    NSMutableDictionary *_parameterData;
    DVTExtensionElementDescription *_schema;
    DVTExtension *_extension;
}

@property(readonly) DVTExtension *extension; // @synthesize extension=_extension;
- (void).cxx_destruct;
- (void)_adjustClassReferencesInParameterData;
- (BOOL)_adjustParameterData;
- (BOOL)hasValueForKey:(id)arg1;
- (id)valueForKey:(id)arg1 error:(id *)arg2;
- (id)valueForKey:(id)arg1;
- (id)debugDescription;
- (id)description;
- (id)initWithParameterData:(id)arg1 usingSchema:(id)arg2 forExtension:(id)arg3;

@end

@interface DVTConfinementService : NSObject
{
    DVTConfinementServiceConnection *_debugserverServiceConnection;
    NSString *_controlPath;
}

+ (void)initialize;
@property(readonly, copy) NSString *controlPath; // @synthesize controlPath=_controlPath;
- (void).cxx_destruct;
- (BOOL)acceptConnection:(int *)arg1 onListeningSocket:(int)arg2 error:(id *)arg3;
- (BOOL)listenOnRandomPort:(unsigned short *)arg1 socket:(int *)arg2 error:(id *)arg3;
- (BOOL)startDebuggerService:(id)arg1 withPseudoTerminalMaster:(int)arg2 andSlavePath:(id)arg3 connectedSocket:(int *)arg4 error:(id *)arg5;
- (BOOL)synchronizeItemsFromLocalPaths:(id)arg1 toRemotePaths:(id)arg2 error:(id *)arg3;
- (id)initWithControlPath:(id)arg1;

@end

@interface _TtC13DVTFoundation9DVTSymbol : NSObject
{
    // Error parsing type: , name: symbolKind
    // Error parsing type: , name: resolution
}

+ (BOOL)supportsSecureCoding;
- (CDUnknownBlockType).cxx_destruct;
- (id)init;
@property(nonatomic, readonly) long long hash;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(void *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithResolution:(id)arg1 kind:(id)arg2;
@property(nonatomic, readonly) NSString *resolution; // @synthesize resolution;
@property(nonatomic, readonly) DVTSourceCodeSymbolKind *symbolKind; // @synthesize symbolKind;

@end

@interface NSOrderedSet (DVTNSOrderedSetAdditions)
- (id)dvt_orderedSetByApplyingBlock:(CDUnknownBlockType)arg1;
- (id)dvt_objectsPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_orderedSetByRemovingObject:(id)arg1;
- (id)dvt_orderedSetByAddingObject:(id)arg1;
- (id)dvt_orderedSetBySubtractingOrderedSet:(id)arg1;
- (id)dvt_anyObjectPassingTest:(CDUnknownBlockType)arg1;
@end

@interface NSMutableOrderedSet (DVTNSOrderedSetAdditions)
- (void)dvt_addObjectIfNotNil:(id)arg1;
@end

@interface NSObject (DVTXMLArchiving)
- (void)dvt_encodeRelationshipsWithXMLArchiver:(id)arg1 version:(id)arg2;
- (void)dvt_encodeAttributesWithXMLArchiver:(id)arg1 version:(id)arg2;
- (void)dvt_encodeWithXMLArchiver:(id)arg1 version:(id)arg2;
@end

@interface NSURL (DVTDeviceSupportDiskStockAdditions) <DVTDiskStockMember>
- (void)diskStockManager:(id)arg1 didCullThisMemberFromDiskStock:(id)arg2;
- (BOOL)diskStockManager:(id)arg1 willCullThisMemberFromDiskStock:(id)arg2;
- (long long)diskStockMemberCompareTo:(id)arg1;
@property(readonly) NSDate *diskStockMemberTTL;
@property(readonly) NSString *diskStockMemberDisplayName;
@property(readonly) __weak NSObject<DVTDiskStock> *diskStock;
@property(readonly) DVTFilePath *diskStockMemberRepresentation;
- (BOOL)_markedAsKept;
- (void)_markAsKept:(BOOL)arg1;
- (id)_deviceSupportInfo;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSString (DVTSharedCopying)
- (id)dvt_sharedCopy;
@end

@interface NSSet (DVTNSSetAdditions)
- (id)dvt_objectByFoldingWithBlock:(CDUnknownBlockType)arg1;
- (id)dvt_sortedArrayUsingComparator:(CDUnknownBlockType)arg1;
- (id)dvt_sortedArrayUsingSelector:(SEL)arg1;
- (id)dvt_sortedArray;
- (id)dvt_onlyObject;
- (BOOL)dvt_isNonEmpty;
- (id)dvt_objectsPassingTest:(CDUnknownBlockType)arg1;
- (BOOL)dvt_areAllObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_anyObjectPassingTest:(CDUnknownBlockType)arg1;
- (BOOL)dvt_areAnyObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_setByFilteringUsingBlock:(CDUnknownBlockType)arg1;
- (id)dvt_setByApplyingBlockStrictly:(CDUnknownBlockType)arg1;
- (id)dvt_arrayByApplyingBlock:(CDUnknownBlockType)arg1;
- (id)dvt_setByApplyingBlock:(CDUnknownBlockType)arg1;
- (id)dvt_setByApplyingSelector:(SEL)arg1;
- (id)dvt_setByRemovingObject:(id)arg1;
- (id)dvt_setBySubtractingSet:(id)arg1;
- (id)dvt_setByIntersectingSet:(id)arg1;
- (Class)dvt_mutableClass;
@end

@interface NSMutableSet (DVTNSMutableSetAdditions)
- (id)dvt_popAllObjects;
- (void)dvt_addObjectIfNonNil:(id)arg1;
- (void)dvt_recursivelyRemoveAllObjects;
@end

@interface NSCountedSet (DVTNSCountedSetAdditions)
- (id)dvt_objectsWithMaxCount;
- (long long)dvt_maxCount;
- (void)dvt_removeAllCountsForObject:(id)arg1;
- (BOOL)dvt_containsAnyObjects:(id)arg1;
- (unsigned long long)dvt_countsOfAllObjects;
- (unsigned long long)dvt_countForObjects:(id)arg1;
@end

@interface NSObject (DVTInvalidation)
+ (void)dvt_synthesizeInvalidationWithDeallocAssertionBehavior:(unsigned long long)arg1 multipleInvalidationAssertionBehavior:(unsigned long long)arg2;
+ (void)dvt_synthesizeInvalidation;
- (void)dvt_performAdditionalInvalidation;
@end

@interface NSObject (DVTInvalidation_Private)
+ (BOOL)__classIsDVTInvalidation;
+ (void)_dvt_synthesizeInvalidationWithDeallocAssertion:(BOOL)arg1 multipleInvalidationAssertion:(BOOL)arg2;
+ (void)_dvt_synthesizeInvalidationWithoutDeallocAssertion;
+ (id)_dvt_invalidatableClasses;
- (BOOL)__isKVOInvalidationZombie;
- (BOOL)__isInvalidationZombie;
- (BOOL)__isDVTInvalidation;
@end

@interface NSObject (DVTInvalidationZombie_Private)
- (void)_dvt_removeObserver:(id)arg1 forKeyPath:(id)arg2;
- (void)_dvt_removeObserver:(id)arg1 forKeyPath:(id)arg2 context:(void *)arg3;
- (void)_dvt_addObserver:(id)arg1 forKeyPath:(id)arg2 options:(unsigned long long)arg3 context:(void *)arg4;
@end

@interface NSArray (DVTInvalidationZombie_Private)
- (void)_dvt_removeObserver:(id)arg1 fromObjectsAtIndexes:(id)arg2 forKeyPath:(id)arg3;
- (void)_dvt_removeObserver:(id)arg1 fromObjectsAtIndexes:(id)arg2 forKeyPath:(id)arg3 context:(void *)arg4;
- (void)_dvt_addObserver:(id)arg1 toObjectsAtIndexes:(id)arg2 forKeyPath:(id)arg3 options:(unsigned long long)arg4 context:(void *)arg5;
@end

@interface NSPointerArray (DVTNSPointerArrayAdditions)
- (unsigned long long)dvt_indexOfObjectIdenticalTo:(id)arg1;
- (void)dvt_replaceObjectAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)dvt_insertObject:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)dvt_objectAtIndex:(unsigned long long)arg1;
- (void)dvt_addObject:(id)arg1;
@end

@interface NSExpression (DVTFoundationAdditions)
+ (id)dvt_expressionWithStringRepresentation:(id)arg1 error:(id *)arg2;
@property(readonly, copy) NSString *dvt_expressionFormat;
@end

@interface NSKeyedArchiver (IBKeyedArchiverAdditions)
+ (id)dvt_archiveDataFromRunningBlock:(CDUnknownBlockType)arg1;
@end

@interface NSKeyedUnarchiver (IBKeyedArchiverAdditions)
+ (void)dvt_unarchiveData:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
@end

@interface NSOperation (DVTNSOperationAdditions)
- (void)dvt_observeCompletionOnQueue:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
@end

@interface NSBlockOperation (DVTNSOperationAdditions)
+ (id)dvt_blockOperationWithBlock:(CDUnknownBlockType)arg1;
- (void)dvt_addExecutionBlock:(CDUnknownBlockType)arg1;
@end

@interface NSOperationQueue (DVTNSOperationAdditions)
- (void)dvt_addOperationWithBlock:(CDUnknownBlockType)arg1;
@end

@interface NSFileHandle (DVTTaskAdditions)
+ (id)dvt_writeOnlyFileHandleWithNullDevice:(id *)arg1;
+ (id)dvt_readOnlyFileHandleWithNullDevice:(id *)arg1;
+ (id)dvt_fileHandleWithNullDeviceInMode:(int)arg1 error:(id *)arg2;
@end

@interface NSIndexSet (DVTNSIndexSetAdditions)
- (id)dvt_allIndexes;
@end

@interface NSMutableIndexSet (DVTNSMutableIndexSetAdditions)
- (void)dvt_addIndex:(long long)arg1 shiftingLaterIndexes:(BOOL)arg2;
@end

@interface NSObject (DVTArcSupport)
- (BOOL)dvt_requiresWeakIntercession;
@end

@interface NSObject (DVTObjectDeallocationMonitorAdditions)
- (void)dvt_logReferenceTree;
@property(setter=dvt_setLeakingFatal:) BOOL dvt_isLeakingFatal;
- (void)dvt_shouldDeallocate;
@end

@interface NSArray (DVTShellUtilitiesAdditions)
- (id)dvt_stringByConcatenatingAsShellCommandArguments;
@end

@interface NSBundle (DVTPlatformAdditions)
+ (id)dvt_platformForBundleAtPath:(id)arg1 error:(id *)arg2;
@end

@interface NSMutableURLRequest (DVTHTTPCookies)
- (void)dvt_addHTTPCookies:(id)arg1;
@end

@interface NSHTTPURLResponse (DVTHTTPCookies)
- (id)dvt_cookieWithName:(id)arg1;
- (id)dvt_allCookies;
@end

@interface NSDictionary (ADCDownloadAuthenticationResponse)
- (id)adc_userString;
- (id)adc_resultString;
- (id)adc_resultCode;
@end

@interface NSProcessInfo (DVTNSProcessInfoCachedEnvironmentAdditions)
- (id)dvt_cachedEnvironment;
- (void)dvt_removeEnvironmentVariable:(id)arg1;
- (void)dvt_setValue:(id)arg1 forEnvironmentVariable:(id)arg2;
@end

@interface NSBundle (DVTOnDemandResourcesAdditions)
@property(readonly) DVTFilePath *pathForAssetPackManifest;
@end

@interface NSValue (DVTGeometryAdditions)
- (CDStruct_d2b197d1)dvt_insetValue;
@end

@interface NSFileManager (DVTNSFileManagerAdditions)
+ (BOOL)dvt_isPathValidForFileManagerOperations:(id)arg1;
- (BOOL)dvt_unzipArchiveAtPath:(id)arg1 toPath:(id)arg2 withIntermediateDirectories:(BOOL)arg3;
- (BOOL)dvt_zipArchiveAtPath:(id)arg1 toPath:(id)arg2 elideContainingDirectory:(BOOL)arg3 error:(id *)arg4;
- (BOOL)dvt_zipArchiveContentsOfDirectoryAtPath:(id)arg1 toPath:(id)arg2 error:(id *)arg3;
- (BOOL)dvt_zipArchiveAtPath:(id)arg1 toPath:(id)arg2 error:(id *)arg3;
- (id)dvt_availableFilenameInDirectory:(id)arg1 desiredFilename:(id)arg2;
@end

@interface NSURL (DVTNSURLAdditions) <DVTSimpleSerialization>
+ (id)dvt_URLWithScheme:(id)arg1 path:(id)arg2 documentParameters:(id)arg3 locationParameters:(id)arg4;
+ (id)dvt_fileURLWithAbsoluteOrRelativePath:(id)arg1;
+ (id)dvt_emptyURL;
- (id)dvt_locationParameters;
- (id)dvt_documentParameters;
- (id)dvt_sanitizedFilePath;
- (BOOL)dvt_isGeneneratedInterface;
@end

@interface NSObject (DVTNSRunLoopAdditions)
- (id)dvt_performAfterDelay:(double)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)dvt_performAfterDelay:(double)arg1 inModes:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)dvt_performOnRunLoop:(id)arg1 inModes:(id)arg2 order:(long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)_DVTRunLoopToken_perform:(id)arg1;
@end

@interface NSRunLoop (DVTNSRunLoopAdditions)
+ (void)dvt_initializeRunLoopAdditions;
- (void)dvt_spinRunLoopInMode:(id)arg1 waitingForGroup:(id)arg2;
- (void)dvt_spinRunLoopInMode:(id)arg1 waitingForSemaphore:(id)arg2;
- (void)dvt_spinRunLoopInMode:(id)arg1 whileBlockExecutesConcurrently:(CDUnknownBlockType)arg2;
- (id)dvt_performInModes:(id)arg1 withOrder:(long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
@end

@interface NSOperation (DVTMainThreadLatencyCheckerAdditions)
- (void)__DVTMainThreadLatencyChecker__setCompletionBlock:(CDUnknownBlockType)arg1;
@property(retain) DVTStackBacktrace *__DVTMainThreadLatencyChecker__creationBacktrace;
- (id)__DVTMainThreadLatencyChecker__init;
@end

@interface NSBlockOperation (DVTMainThreadLatencyCheckerAdditions)
- (void)__DVTMainThreadLatencyChecker__addExecutionBlock:(CDUnknownBlockType)arg1;
@end

@interface NSTimer (DVTMainThreadLatencyCheckerAdditions)
- (id)__DVTMainThreadLatencyChecker__initWithFireDate:(id)arg1 interval:(double)arg2 target:(id)arg3 selector:(SEL)arg4 userInfo:(id)arg5 repeats:(BOOL)arg6;
@end

@interface NSBundle (DVTMainThreadLatencyCheckerAdditions)
- (BOOL)__DVTMainThreadLatencyChecker__loadAndReturnError:(id *)arg1;
@end

@interface NSAppleEventManager (DVTMainThreadLatencyCheckerAdditions)
- (void)__DVTMainThreadLatencyChecker__setEventHandler:(id)arg1 andSelector:(SEL)arg2 forEventClass:(unsigned int)arg3 andEventID:(unsigned int)arg4;
@end

@interface NSNotificationCenter (DVTMainThreadLatencyCheckerAdditions)
- (void)__DVTMainThreadLatencyChecker__addObserver:(id)arg1 selector:(SEL)arg2 name:(id)arg3 object:(id)arg4;
@end

@interface NSRunLoop (DVTMainThreadLatencyCheckerAdditions)
- (void)__DVTMainThreadLatencyChecker__cancelPerformSelector:(SEL)arg1 target:(id)arg2 argument:(id)arg3;
- (void)__DVTMainThreadLatencyChecker__performSelector:(SEL)arg1 target:(id)arg2 argument:(id)arg3 order:(unsigned long long)arg4 modes:(id)arg5;
@end

@interface NSObject (DVTMainThreadLatencyCheckerAdditions)
+ (void)__DVTMainThreadLatencyChecker__cancelPreviousPerformRequestsWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
- (void)__DVTMainThreadLatencyChecker__performSelector:(SEL)arg1 withObject:(id)arg2 afterDelay:(double)arg3 inModes:(id)arg4;
@end

@interface NSDistributedNotificationCenter (DVTNSNotificationCenterAdditions)
- (id)dvt_addObserverForName:(id)arg1 object:(id)arg2 suspensionBehavior:(unsigned long long)arg3 queue:(id)arg4 usingBlock:(CDUnknownBlockType)arg5;
- (id)dvt_addObserver:(id)arg1 selector:(SEL)arg2 name:(id)arg3 object:(id)arg4 suspensionBehavior:(unsigned long long)arg5;
- (id)dvt_addObserverForName:(id)arg1 object:(id)arg2 queue:(id)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (id)dvt_addObserver:(id)arg1 selector:(SEL)arg2 name:(id)arg3 object:(id)arg4;
@end

@interface NSObject (DVTSelectorAdditions)
- (id)dvt_performNonOwnershipTransferingSelector:(SEL)arg1 withObject:(id)arg2;
- (id)dvt_performNonOwnershipTransferingSelector:(SEL)arg1;
@end

@interface NSThread (DVTObjectAllocationTracking)
+ (id)countedSetOfObjectAllocationDescriptionsOnCurrentThreadWhileInvokingBlock:(CDUnknownBlockType)arg1;
+ (void)stopTrackingObjectAllocationsOnCurrentThread;
+ (BOOL)isTrackingObjectAllocationsOnCurrentThread;
+ (void)startTrackingObjectAllocationsOnCurrentThreadUsingBlock:(CDUnknownBlockType)arg1;
@end

@interface NSDictionary (DVTFoundationClassAdditions)
+ (id)dvt_dictionaryWithObjects:(id)arg1 groupedIntoSetsByKeyPath:(id)arg2;
+ (id)dvt_dictionaryWithObjects:(id)arg1 groupedIntoArraysByKeyPath:(id)arg2;
+ (id)dvt_dictionaryWithTuples:(id)arg1;
+ (id)dvt_strictDictionaryWithKeysAndObjects:(id)arg1;
+ (id)dvt_dictionaryWithKeysAndValues:(id)arg1;
- (id)dvt_dictionaryByApplyingBlock:(CDUnknownBlockType)arg1;
- (BOOL)dvt_areAnyEntriesPassingTest:(CDUnknownBlockType)arg1;
- (BOOL)dvt_areAllEntriesPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_entriesPassingTest:(CDUnknownBlockType)arg1;
- (struct CGRect)dvt_rectForKey:(id)arg1 defaultValue:(struct CGRect)arg2;
- (struct CGSize)dvt_sizeForKey:(id)arg1 defaultValue:(struct CGSize)arg2;
- (struct CGPoint)dvt_pointForKey:(id)arg1 defaultValue:(struct CGPoint)arg2;
- (double)dvt_doubleForKey:(id)arg1 defaultValue:(double)arg2;
- (float)dvt_floatForKey:(id)arg1 defaultValue:(float)arg2;
- (BOOL)dvt_boolForKey:(id)arg1 defaultValue:(BOOL)arg2;
- (id)dvt_stringForKey:(id)arg1 defaultValue:(id)arg2;
- (long long)dvt_integerForKey:(id)arg1 defaultValue:(long long)arg2;
- (id)dvt_numberOrNilForKey:(id)arg1;
- (id)dvt_dateOrNilForKey:(id)arg1;
- (id)dvt_arrayOrNilForKey:(id)arg1;
- (id)dvt_dictionaryOrNilForKey:(id)arg1;
- (id)dvt_dataOrNilForKey:(id)arg1;
- (id)dvt_stringOrNilForKey:(id)arg1;
- (BOOL)dvt_isNonEmpty;
- (id)dvt_dictionaryByAddingEntriesFromDictionary:(id)arg1;
- (id)dvt_dictionaryBySettingObject:(id)arg1 forKey:(id)arg2;
- (id)dvt_dictionaryByRemovingObjectsForKeys:(id)arg1;
@end

@interface NSMutableDictionary (DVTFoundationClassAdditions)
- (void)dvt_intersectKeys:(id)arg1;
- (void)dvt_setObject:(id)arg1 forKeyIfNonNil:(id)arg2;
- (void)dvt_setObjectIfNonNil:(id)arg1 forKey:(id)arg2;
- (id)dvt_objectForKey:(id)arg1 creatingIfNecessaryWithBlock:(CDUnknownBlockType)arg2;
- (id)dvt_objectForKey:(id)arg1 creatingIfNecessaryFromClass:(Class)arg2;
- (void)dvt_recursivelyRemoveAllObjects;
- (void)dvt_setRect:(struct CGRect)arg1 forKey:(id)arg2;
- (void)dvt_setSize:(struct CGSize)arg1 forKey:(id)arg2;
- (void)dvt_setPoint:(struct CGPoint)arg1 forKey:(id)arg2;
- (void)dvt_setDouble:(double)arg1 forKey:(id)arg2;
- (void)dvt_setFloat:(float)arg1 forKey:(id)arg2;
- (void)dvt_setBool:(BOOL)arg1 forKey:(id)arg2;
- (void)dvt_setInteger:(long long)arg1 forKey:(id)arg2;
- (void)dvt_addObject:(id)arg1 toSetForKey:(id)arg2;
- (void)dvt_addObject:(id)arg1 toArrayForKey:(id)arg2;
- (void)dvt_setObject:(id)arg1 forKey:(id)arg2 inDictionaryForKey:(id)arg3;
@end

@interface NSString (DVTMacroNameStringCompatibility)
- (unsigned long long)macroRegistrationNumber;
@end

@interface NSPredicate (DVTFoundationAdditions)
+ (id)dvt_predicateWithStringRepresentation:(id)arg1 error:(id *)arg2;
@end

@interface NSObject (DVTXMLUnarchivingPartial)
- (void)dvt_awakeFromXMLUnarchiver:(id)arg1;
- (void)dvt_setProperty:(id)arg1 fromUTF8String:(const char *)arg2 fromXMLUnarchiver:(id)arg3;
@end

@interface NSBundle (DVTPlatformFamilyAdditions)
+ (id)dvt_platformFamilyForBundleAtPath:(id)arg1 error:(id *)arg2;
@end

@interface NSObject (DVTExtraXMArchiveDataAdditions)
- (id)dvt_extraArchiveData;
- (void)dvt_setExtraArchiveData:(id)arg1;
@end

@interface NSMapTable (DVTNSMapTableAdditions)
+ (id)dvt_strongObjectToStrongObjectTable;
+ (id)dvt_strongObjectPointerToStrongObjectTable;
- (id)dvt_objectForKey:(id)arg1 creatingIfNecessaryWithBlock:(CDUnknownBlockType)arg2;
- (id)dvt_objectForKey:(id)arg1 creatingIfNecessaryFromClass:(Class)arg2;
- (void)dvt_addObject:(id)arg1 toArrayForKey:(id)arg2;
- (id)dvt_collectionOfClass:(Class)arg1 forKey:(id)arg2;
- (id)dvt_removeObjectForKey:(id)arg1;
- (void)dvt_enumerateKeysAndObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (BOOL)dvt_isNonEmpty;
- (id)dvt_allValues;
- (id)dvt_allKeys;
@end

@interface NSBundle (DVTNSBundleAdditions)
+ (id)dvt_rawInfoDictionaryForBundleAtPath:(id)arg1 error:(id *)arg2;
+ (id)dvt_filteredInfoDictionaryForBundleAtPath:(id)arg1 error:(id *)arg2;
+ (id)dvt_uncachedPathForResource:(id)arg1 ofType:(id)arg2 atBundlePath:(id)arg3;
+ (id)_uncachedValueForKey:(struct __CFString *)arg1 atURL:(id)arg2;
+ (id)_uncachedBundleStringForKey:(struct __CFString *)arg1 AtURL:(id)arg2;
+ (id)dvt_uncachedExtensionInfoAtPath:(id)arg1;
+ (id)dvt_uncachedBundleExecutableAtPath:(id)arg1;
+ (id)dvt_uncachedBundleIdentifierAtPath:(id)arg1;
+ (id)dvt_uncachedBundleExecutableAtURL:(id)arg1;
+ (id)dvt_uncachedBundleIdentifierAtURL:(id)arg1;
+ (id)dvt_executablePathForBundleAtPath:(id)arg1;
@property(readonly, nonatomic) NSString *dvt_contentsPath;
@end

@interface NSError (DVTFoundationClassAdditions)
+ (id)dvt_errorWithDomain:(id)arg1 errorCode:(long long)arg2 message:(id)arg3 recoverySuggestion:(id)arg4 recoveryOptions:(id)arg5 andRecoveryBlock:(CDUnknownBlockType)arg6;
+ (id)dvt_errorWithDomain:(id)arg1 errorCode:(long long)arg2 message:(id)arg3 recoverySuggestion:(id)arg4;
+ (id)dvt_errorWithPOSIXErrorCode:(int)arg1;
+ (id)dvt_errorWithPOSIXErrorCode:(int)arg1 messageFormat:(id)arg2;
+ (id)dvt_errorWithDomain:(id)arg1 errorCode:(int)arg2 messageFormat:(id)arg3;
+ (id)dvt_errorWithDomain:(id)arg1 errorCode:(int)arg2 messageFormat:(id)arg3 arguments:(struct __va_list_tag [1])arg4;
@property(readonly) BOOL dvt_isNoSuchFileError;
- (BOOL)dvt_hasDomain:(id)arg1 errorCode:(long long)arg2;
- (id)dvt_errorByInjectingUserInfoObjects:(id)arg1;
- (id)dvt_errorByInjectingUserInfoObject:(id)arg1 forKey:(id)arg2;
- (id)dvt_errorBySettingRecoveryOptions:(id)arg1 andRecoveryBlock:(CDUnknownBlockType)arg2;
@end

@interface NSData (DVTFoundationClassAdditions)
+ (id)dvt_dataWithStrictBase64EncodedString:(id)arg1 error:(id *)arg2;
+ (id)dvt_dataWithBase64EncodedString:(id)arg1 error:(id *)arg2;
+ (id)dvt_dataWithFirstBytes:(unsigned long long)arg1 ofFile:(id)arg2 error:(id *)arg3;
- (id)dvt_stringRepresentationInBase:(unsigned long long)arg1;
- (id)dvt_base64EncodedString;
- (id)dvt_hexString;
- (id)dvt_dataWithSHA1Digest;
- (id)dvt_dataWithMD5Digest;
@end

@interface NSMutableData (DVTFoundationClassAdditions)
- (void)dvt_appendMD5DigestOfData:(id)arg1;
- (void)dvt_appendMD5DigestOfBytes:(const void *)arg1 length:(unsigned long long)arg2;
@end

@interface NSData (DVTNSDataStdIO)
- (struct __sFILE *)openForReading;
@end

@interface NSMutableData (DVTNSDataStdIO)
- (struct __sFILE *)openForWriting;
- (struct __sFILE *)openForReading;
@end

@interface NSString (DVTMacroExpansion)
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
@end

@interface NSArray (DVTMacroExpansion)
- (id)dvt_debugDescription;
- (void)dvt_assertInternalConsistency;
- (id)dvt_stringForm;
- (BOOL)dvt_isLiteral;
- (id)dvt_evaluateAsStringListInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
- (id)dvt_evaluateAsStringInScope:(id)arg1 withState:(const struct DVTNestedMacroExpansionState *)arg2;
@end

@interface NSString (DVTMacroExpansionAdditions)
- (id)dvt_literalValueOfCommonString;
- (id)dvt_parseAsMacroExpansionStringList;
- (id)dvt_parseAsMacroExpansionStringListReturningError:(id *)arg1;
- (id)dvt_parseAsMacroExpansionString;
- (id)dvt_parseAsMacroExpansionStringReturningError:(id *)arg1;
@end

@interface NSArray (DVTMacroExpansionAdditions)
- (id)dvt_arrayByExpandingEntriesWithMacroExpansionScope:(id)arg1;
@end

@interface NSDictionary (DVTMacroExpansionAdditions)
- (id)dvt_dictionaryByExpandingKeysAndValuesWithMacroExpansionScope:(id)arg1;
- (id)dvt_dictionaryByExpandingValuesWithMacroExpansionScope:(id)arg1;
@end

@interface NSString (DVTMacroDefinitionAdditions)
- (id)dvt_parseAsMacroAssignmentsUsingMacroNameRegistry:(id)arg1 returningErrorString:(id *)arg2;
- (id)dvt_parseAsMacroAssignmentUsingMacroNameRegistry:(id)arg1 returningErrorString:(id *)arg2;
- (id)dvt_parseAsMacroAssignmentsWithBlock:(CDUnknownBlockType)arg1 returningErrorString:(id *)arg2;
- (id)_dvt_parseAsMacroAssignmentsIntoMacroDefinitionTable:(id)arg1 withBlock:(CDUnknownBlockType)arg2 returningErrorString:(id *)arg3;
- (id)dvt_parseAsMacroAssignmentParsingValueWithBlock:(CDUnknownBlockType)arg1 returningErrorString:(id *)arg2;
@end

@interface NSProcessInfo (DVTNSProcessInfoAdditions)
- (id)dvt_activeSystemActivityTokensMatchingOptions:(unsigned long long)arg1;
- (id)dvt_beginActivityWithOptions:(unsigned long long)arg1 reason:(id)arg2;
- (void)dvt_setUseCommandLineMessageTracerReportingOverride:(BOOL)arg1;
- (BOOL)dvt_shouldUseCommandLineMessageTracerReporting;
- (void)dvt_setDisableSCMOverride:(BOOL)arg1;
- (BOOL)dvt_shouldDisableSCM;
- (void)dvt_setDisallowSavingOverride:(BOOL)arg1;
- (BOOL)dvt_shouldDisallowSaving;
- (BOOL)dvt_isNonGraphicalProcess;
- (void)dvt_setIsNonGraphicalProcess:(BOOL)arg1;
- (void)dvt_disableSuddenTerminationForReason:(id)arg1;
- (void)dvt_enableSuddenTerminationForReason:(id)arg1;
- (void)dvt_enableAutomaticTerminationForReason:(id)arg1;
- (void)dvt_disableAutomaticTerminationForReason:(id)arg1;
- (id)dvt_disableAutomaticTerminationWithReason:(id)arg1;
- (long long)dvt_automaticTerminationDisablingCountForReason:(id)arg1;
- (id)dvt_automaticTerminationDisablingReasons;
- (void)_dvt_setSuddenTerminationDisablingCount:(long long)arg1 forReason:(id)arg2;
- (long long)dvt_suddenTerminationDisablingCountForReason:(id)arg1;
- (id)dvt_suddenTerminationDisablingReasons;
- (id)dvt_executablePath;
- (unsigned long long)dvt_numberOfAvailableCPUs;
@end

@interface NSArray (DVTRangeArrayAdditions)
- (struct _NSRange)rangeAtIndex:(unsigned long long)arg1;
@end

@interface NSObject (DVTKVCMutableCollectionPropertySupport)
+ (void)synthesizeMutableSetProperty:(id)arg1 withInstanceVariable:(id)arg2;
+ (void)synthesizeMutableArrayProperty:(id)arg1 withInstanceVariable:(id)arg2;
@end

@interface NSTimer (DVTNSTimerAdditions)
+ (id)dvt_scheduledTimerWithTimeInterval:(double)arg1 repeats:(BOOL)arg2 handler:(CDUnknownBlockType)arg3;
@end

@interface NSNotificationCenter (DVTNSNotificationCenterAdditions)
- (id)dvt_addObserverForName:(id)arg1 object:(id)arg2 queue:(id)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (id)dvt_addObserver:(id)arg1 selector:(SEL)arg2 name:(id)arg3 object:(id)arg4;
- (void)_dvt_postNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
- (id)_dvt_addObserverForName:(id)arg1 object:(id)arg2 queue:(id)arg3 usingBlock:(CDUnknownBlockType)arg4;
@end

@interface NSString (DVTFileSystemRepresentationProviding)
- (void)dvt_provideFileSystemRepresentationToBlock:(CDUnknownBlockType)arg1;
@end

@interface NSFileHandle (DVTNSFileHandleAdditions)
- (BOOL)dvt_writeFormat:(id)arg1;
- (BOOL)dvt_writeFormat:(id)arg1 arguments:(struct __va_list_tag [1])arg2;
- (BOOL)dvt_writeString:(id)arg1;
- (BOOL)dvt_writeString:(id)arg1 error:(id *)arg2;
- (BOOL)dvt_writeData:(id)arg1 error:(id *)arg2;
- (id)dvt_duplicateFileHandleWithError:(id *)arg1;
@end

@interface NSInputStream (DVTFoundationClassAdditions)
- (long long)dvt_readSignedLEB128Integer;
- (unsigned long long)dvt_readUnsignedLEB128Integer;
@end

@interface NSOutputStream (DVTFoundationClassAdditions)
- (void)dvt_writeSignedLEB128Integer:(long long)arg1;
- (void)dvt_writeUnsignedLEB128Integer:(unsigned long long)arg1;
@end

@interface NSObject (DVTSimpleSerialization) <DVTSimpleSerialization>
- (void)dvt_writeToSerializer:(id)arg1;
- (id)dvt_initFromDeserializer:(id)arg1;
@end

@interface NSError (DVTSecurityAdditions)
+ (id)dvt_errorWithSecurityErrorCode:(int)arg1;
- (BOOL)dvt_secItemNotFound;
@end

@interface NSData (DVTSecurityAdditions)
- (id)dvt_dataDecryptedWithKey:(struct OpaqueSecKeyRef *)arg1 error:(id *)arg2;
- (id)dvt_dataEncryptedWithKey:(struct OpaqueSecKeyRef *)arg1 error:(id *)arg2;
@end

@interface NSURL (DVTSecurityAdditions)
- (unsigned int)dvt_secProtocol;
@end

@interface NSURLProtectionSpace (DVTSecurityAdditions)
- (unsigned int)dvt_secProtocol;
- (unsigned int)dvt_secAuthentication;
@end

@interface NSUserDefaults (DVTNSUserDefaultsAdditions)
- (void)dvt_setupDefaultsFromEnvironment;
- (void)dvt_setFilePath:(id)arg1 forKey:(id)arg2;
- (id)dvt_filePathForKey:(id)arg1;
- (BOOL)dvt_objectIsChangedForKey:(id)arg1;
- (id)dvt_objectForKey:(id)arg1 inVolatileDomainForName:(id)arg2;
@end

@interface NSUserDefaults (DVTUserDefaults) <DVTUserDefaults>
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@end

@interface NSManagedObjectContext (DVTNSManagedObjectContextAdditions)
- (void)dvt_disallowOperationFinish:(id)arg1 whilePerformingBlock:(CDUnknownBlockType)arg2;
- (void)dvt_disallowOperationFinish:(id)arg1 withReason:(id)arg2 whilePerformingBlock:(CDUnknownBlockType)arg3;
@end

@interface NSSortDescriptor (DVTNSSortDescriptorAdditions)
+ (id)dvt_sortDescriptorWithPredicateBlock:(CDUnknownBlockType)arg1;
+ (id)dvt_sortDescriptorWithTransformBlock:(CDUnknownBlockType)arg1;
@end

@interface NSPropertyListSerialization (DVTNSPropertyListSerializationAdditions)
+ (id)dvt_stableDataWithPropertyList:(id)arg1 format:(unsigned long long)arg2 options:(unsigned long long)arg3 error:(out id *)arg4;
+ (BOOL)dvt_writePropertyList:(id)arg1 toURL:(id)arg2 format:(unsigned long long)arg3 error:(id *)arg4;
+ (id)dvt_propertyListWithURL:(id)arg1 options:(unsigned long long)arg2 format:(unsigned long long *)arg3 error:(id *)arg4;
@end

@interface NSDate (DVTFoundationClassAdditions)
- (id)dvt_mostSignificantDateComponentStringRelativeToToday;
- (id)dvt_descriptionWithDateFormat:(id)arg1;
- (id)dvt_dateStringRelativeToTodayWithDateStyle:(unsigned long long)arg1 timeStyle:(unsigned long long)arg2 capitalizeFirstLetter:(BOOL)arg3 seperateWithComma:(BOOL)arg4;
- (id)dvt_dateStringRelativeToTodayWithDateStyle:(unsigned long long)arg1 timeStyle:(unsigned long long)arg2 capitalizeFirstLetter:(BOOL)arg3;
- (id)dvt_dateStringRelativeToTodayWithDateStyle:(unsigned long long)arg1 timeStyle:(unsigned long long)arg2;
@end

@interface NSArray (DVTFoundationClassAdditions)
+ (id)dvt_arrayWithObjectIfNonNil:(id)arg1;
- (id)dvt_objectAtWrappedIndex:(long long)arg1;
- (id)dvt_objectAtIndexIfInBounds:(long long)arg1;
- (BOOL)dvt_isIndexInBounds:(long long)arg1;
- (id)dvt_secondToLastObject;
- (long long)dvt_lastIndex;
- (id)dvt_flatMap:(CDUnknownBlockType)arg1;
- (id)dvt_componentsJoinedByString:(id)arg1 finalComponentJoinString:(id)arg2;
- (id)dvt_arrayByRemovingDuplicatesFromBack;
- (id)dvt_arrayByRemovingDuplicates;
- (BOOL)dvt_isNonEmpty;
- (BOOL)dvt_hasPrefix:(id)arg1;
- (id)dvt_stringByConcatenatingAsCommandLineArguments;
- (id)dvt_arrayByAddingObjects:(id)arg1;
- (id)dvt_arrayByAddingObjectIfNonNil:(id)arg1;
- (id)dvt_subarrayFromIndex:(long long)arg1;
- (id)dvt_subarrayAfterIndex:(long long)arg1;
- (id)dvt_arrayByReversingObjects;
- (id)dvt_arrayByRemovingObjectsInArray:(id)arg1;
- (id)dvt_arrayByRemovingObject:(id)arg1;
- (BOOL)dvt_areAnyObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_onlyObjectPassingTest:(CDUnknownBlockType)arg1;
- (BOOL)dvt_areAllObjectsPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_objectsPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_objectsOfClass:(Class)arg1;
- (id)dvt_objectByFoldingWithBlock:(CDUnknownBlockType)arg1;
- (id)dvt_onlyObject;
- (id)dvt_firstObjectPassingTest:(CDUnknownBlockType)arg1;
- (id)dvt_unorderedArrayByGroupingObjectsUsingKeyPaths:(id)arg1;
- (id)dvt_arrayByGroupingAdjacentObjectsUsingBlock:(CDUnknownBlockType)arg1;
- (id)dvt_arrayByApplyingBlockStrictly:(CDUnknownBlockType)arg1;
- (id)dvt_arrayByApplyingBlockWithIndex:(CDUnknownBlockType)arg1;
- (id)dvt_arrayByApplyingBlock:(CDUnknownBlockType)arg1;
- (id)dvt_arrayByApplyingSelector:(SEL)arg1;
- (struct _NSRange)dvt_rangeOfArray:(id)arg1;
- (struct _NSRange)dvt_rangeOfArray:(id)arg1 inRange:(struct _NSRange)arg2;
@end

@interface NSMutableArray (DVTFoundationClassAdditions)
- (void)dvt_reverseObjects;
- (void)dvt_recursivelyRemoveAllObjects;
- (_Bool)dvt_uniqueSortedInsert:(id)arg1 withComparator:(CDUnknownBlockType)arg2;
- (_Bool)dvt_uniqueSortedInsert:(id)arg1;
- (void)dvt_sortedMerge:(id)arg1 withComparator:(CDUnknownBlockType)arg2;
- (void)dvt_sortedMerge:(id)arg1;
- (long long)dvt_sortedInsert:(id)arg1 withComparator:(CDUnknownBlockType)arg2;
- (long long)dvt_sortedInsert:(id)arg1 withComparisonSelector:(SEL)arg2;
- (long long)dvt_sortedInsert:(id)arg1;
- (void)dvt_truncateToMaxCount:(long long)arg1;
- (void)dvt_moveObjectAtIndex:(long long)arg1 toIndex:(long long)arg2;
- (void)dvt_removeObjectsIdenticalToObjectsInArray:(id)arg1;
- (void)dvt_addObjectsFromCollection:(id)arg1;
- (void)dvt_addObjectsFromArrayIfAbsent:(id)arg1;
- (void)dvt_addObjectIfNonNil:(id)arg1;
- (void)dvt_addObjectIfAbsent:(id)arg1;
- (id)dvt_popSuffixWithMaxLength:(long long)arg1;
- (id)dvt_popLastObject;
- (id)dvt_popFirstObject;
@end

@interface NSCache (DVTNSCacheAdditions)
- (id)dvt_cachedObjectForKey:(id)arg1 creationBlock:(CDUnknownBlockType)arg2;
@end

@interface NSObject (DVTAssertionSupport)
+ (id)descriptionForAssertionMessage;
- (id)descriptionForAssertionMessage;
@end

@interface NSObject (DVTObservingConvenience)
+ (id)dvt_creationBacktracesOfObservingTokensForObservedObject:(id)arg1;
+ (id)_dvt_observingTokensForOwner:(id)arg1;
+ (void)dvt_cancelAllObservingTokensForOwner:(id)arg1;
- (void)_dvt_treeDescription:(id)arg1 ofKeyPathsAffectingValueForKey:(id)arg2 depth:(int)arg3;
- (id)dvt_treeDescriptionOfKeyPathsAffectingValueForKey:(id)arg1;
- (id)dvt_observationInfoSummary;
- (void)dvt_changeValueForKeys:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)dvt_changeValueForKey:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 withHandlerBlock:(CDUnknownBlockType)arg3;
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 owner:(id)arg3 withHandlerBlock:(CDUnknownBlockType)arg4;
- (id)_dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 owner:(id)arg3 creationBacktrace:(id)arg4 withHandlerBlock:(CDUnknownBlockType)arg5;
- (void)dvt_addObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 owner:(id)arg3 withHandlerBlock:(CDUnknownBlockType)arg4;
- (void)dvt_unregisterValueChangedCallbackForKeyPath:(id)arg1;
- (void)dvt_unregisterValueChangedCallbackForKeyPath:(id)arg1 ofObject:(id)arg2;
- (void)dvt_registerValueChangedCallback:(SEL)arg1 forKeyPath:(id)arg2;
- (void)dvt_registerValueChangedCallback:(SEL)arg1 forKeyPath:(id)arg2 ofObject:(id)arg3;
- (void)_dvt_setObserverTokensForKeyPath:(id)arg1;
- (id)_dvt_observerTokensForKeyPath;
@end

@interface NSArray (DVTObservingConvenience)
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 withHandlerBlock:(CDUnknownBlockType)arg3;
- (id)dvt_newObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 owner:(id)arg3 withHandlerBlock:(CDUnknownBlockType)arg4;
- (void)dvt_addObserverForKeyPath:(id)arg1 options:(unsigned long long)arg2 owner:(id)arg3 withHandlerBlock:(CDUnknownBlockType)arg4;
@end

@interface NSObject (DVTSharedObserverAccess)
- (void)dvt_removeSharedObserverForKeyPath:(id)arg1;
- (id)dvt_sharedObserverForKeyPath:(id)arg1;
@end

@interface NSObject (DVTPropertyLinking)
- (void)dvt_removeObserverWithName:(id)arg1 fromKeyPath:(id)arg2 ofObject:(id)arg3;
- (void)dvt_addObserverWithName:(id)arg1 toKeyPath:(id)arg2 ofObject:(id)arg3 block:(CDUnknownBlockType)arg4;
@end

@interface NSArray (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSData (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSNumber (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSDictionary (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSString (DVTDiffHashing) <DVTDiffHashing>
- (unsigned long long)dvt_diffHashForDataSource:(id)arg1;
@end

@interface NSString (DVTFoundationClassAdditionsUnicode)
+ (BOOL)dvt_isDataUTF8WithBOM:(id)arg1;
+ (BOOL)dvt_isDataUnicodeEncoded:(id)arg1 isBigEndian:(char *)arg2;
+ (id)dvt_stringWithPotentiallyMalformedUTF8Bytes:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)dvt_stringWithPotentiallyMalformedUTF8Bytes:(const char *)arg1 length:(unsigned long long)arg2 stopAtTrailingIncompleteUTF8Sequence:(BOOL)arg3 getUsedLength:(unsigned long long *)arg4 getNumberOfMalformedSequences:(unsigned long long *)arg5;
@end

@interface NSLock (DVTFoundationExtensions) <DVTLocking>
- (void)dvt_asyncPerformLockedBlock:(CDUnknownBlockType)arg1;
- (void)dvt_performLockedBlock:(CDUnknownBlockType)arg1;
@end

@interface NSRecursiveLock (DVTFoundationExtensions) <DVTLocking>
- (void)dvt_asyncPerformLockedBlock:(CDUnknownBlockType)arg1;
- (void)dvt_performLockedBlock:(CDUnknownBlockType)arg1;
@end

@interface NSString (DVTFoundationClassAdditions)
+ (id)dvt_stringWithListComponentsJoinedByCommasAndOr:(id)arg1;
+ (id)dvt_stringWithListComponentsJoinedByCommasAndAnd:(id)arg1;
+ (id)dvt_stringWithUniqueFileNameSuffixForDistinguishingStrings:(id)arg1;
+ (BOOL)dvt_isFileUTF8WithBOM:(id)arg1 fileData:(id)arg2;
+ (BOOL)dvt_isFileUnicode:(id)arg1 fileData:(id)arg2;
+ (id)dvt_stringWithUnsignedLong:(unsigned long long)arg1 base:(unsigned long long)arg2;
+ (id)dvt_UUIDString;
+ (id)dvt_localizedNameOfLineEnding:(unsigned long long)arg1;
+ (id)dvt_stringWithFileSystemRepresentation:(const char *)arg1 length:(unsigned long long)arg2;
+ (id)dvt_stringWithFileSystemRepresentation:(const char *)arg1;
- (BOOL)dvt_isComposedEntirelyOfCharactersFromSet:(id)arg1;
- (BOOL)dvt_isRange:(struct _NSRange)arg1 composedEntirelyOfCharactersFromSet:(id)arg2;
- (struct _NSRange)dvt_interiorRangeAfterTrimmingCharactesFromSet:(id)arg1 preservingRange:(struct _NSRange)arg2;
- (struct _NSRange)dvt_interiorRangeAfterTrimmingCharactesFromSet:(id)arg1;
- (id)dvt_stringByReplacingCharactersFromSet:(id)arg1 withString:(id)arg2;
- (id)dvt_stringByReplacingCharactersFromSet:(id)arg1 inRange:(struct _NSRange)arg2 withString:(id)arg3;
- (struct _NSRange)dvt_fullRange;
- (void)dvt_invokeWithAccessToCharacters:(CDUnknownBlockType)arg1;
- (void)dvt_invokeWithAccessToUTF8Bytes:(CDUnknownBlockType)arg1;
- (BOOL)dvt_range:(struct _NSRange)arg1 isEqualToString:(id)arg2;
- (BOOL)dvt_hasCaseInsensitivePrefix:(id)arg1;
- (id)dvt_arrayByParsingAsStringList;
- (void)dvt_enumerateWhitespaceSeparatedSubstringsInRange:(struct _NSRange)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)dvt_enumerateOccurrencesOfSubstring:(id)arg1 options:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)dvt_md5Hash;
- (id)dvt_stringByRepeating:(unsigned long long)arg1;
- (id)dvt_componentsSeparatedByUnquotedWhitespacePreservingQuotes:(BOOL)arg1;
- (id)dvt_stringByMakingAbsolutePathWithBasePath:(id)arg1;
- (id)dvt_stringByMakingPathRelativeToBasePath:(id)arg1;
- (id)dvt_stringByStrippingExtraZeroesAfterDecimalPlace;
- (id)dvt_capitalizedWordsFromString;
- (id)dvt_wordsFromString;
- (id)dvt_wordsFromStringWithLetterCasing:(unsigned long long)arg1;
- (id)dvt_stringByManglingToLegalC99ExtendedIdentifier;
- (id)dvt_stringByManglingToLegalCIdentifier;
- (id)dvt_stringByManglingToLegalRFC1034Identifier;
- (id)dvt_stringByManglingToLegalBundleIdentifier;
- (id)dvt_stringByManglingToLegalIdentifierOfType:(int)arg1;
- (long long)dvt_versionNumberComparison:(id)arg1;
- (id)dvt_dataForHexString;
- (BOOL)dvt_isLegalCIdentifier;
- (BOOL)dvt_isNonEmpty;
- (id)dvt_stringByEscapingForXML;
- (id)dvt_stringByDecodingXMLEntities;
- (id)dvt_stringByRemovingCStringEscapeSequences;
- (id)dvt_stringByQuotingOnlyIfNeeded:(BOOL)arg1 quoteTabsAndEOLs:(BOOL)arg2 quoteHighBitUnichars:(BOOL)arg3;
- (id)dvt_stringByQuotingIfNeeded;
- (id)dvt_stringByTranslatingSmartQuotesToReal;
- (unsigned long long)dvt_numberOfLines;
- (struct _NSRange)dvt_lineIndexRangeForCharacterRange:(struct _NSRange)arg1;
- (struct _NSRange)dvt_characterRangeForLineRange:(struct _NSRange)arg1;
- (id)dvt_UUIDStringWithHyphens;
- (unsigned long long)dvt_adlerHashWithRange:(struct _NSRange)arg1;
- (id)dvt_stringByStandardizingWithLineEnding:(unsigned long long)arg1;
- (id)dvt_stringByLowercasingFirstCharacter;
- (id)dvt_stringByCapitalizingFirstCharacter;
- (id)dvt_lastKeyPathComponent;
- (id)dvt_firstKeyPathComponent;
- (id)dvt_stringByReplacingWhitespaceRunsWithCharacter:(unsigned short)arg1 range:(struct _NSRange)arg2;
- (id)dvt_stringByAppendingSuffixIfMissing:(id)arg1;
- (id)dvt_stringByRemovingSuffix:(id)arg1;
- (id)dvt_stringByRemovingPrefix:(id)arg1;
- (BOOL)dvt_getFileSystemRepresentation:(char *)arg1 maxLength:(unsigned long long)arg2;
@end

@interface NSString (DVTFoundationANSIText)
- (id)dvt_stringWithANSITextBoldCyan;
- (id)dvt_stringWithANSITextBoldRed;
- (id)dvt_stringWithANSITextBold;
@end

@interface NSMutableString (DVTFoundationClassAdditions)
- (void)dvt_standardizeWithLineEnding:(unsigned long long)arg1;
- (void)dvt_standardizeWithLineEnding:(unsigned long long)arg1 range:(struct _NSRange)arg2;
- (void)dvt_trimCharactesFromSet:(id)arg1 preservingRange:(struct _NSRange)arg2;
- (void)dvt_replaceCharactersFromSet:(id)arg1 inRange:(struct _NSRange)arg2 withString:(id)arg3;
@end

@interface NSCharacterSet (DVTFoundationClassAdditions)
@end

@interface NSDictionary (DVTFoundationClassAdditions_MRR)
- (void)dvt_getStrongObjects:(id *)arg1 andStrongKeys:(id *)arg2;
@end

@interface NSXMLElement (DVTFoundationClassAdditions)
+ (id)dvt_elementWithXMLStringByPreservingWhitespace:(id)arg1 error:(id *)arg2;
- (BOOL)dvt_isApplicableForCurrentRuntimeOSVersion;
- (id)dvt_elementsApplicableForCurrentRuntimeOSVersionForName:(id)arg1;
- (id)dvt_elementsApplicableForCurrentRuntimeOSVersion;
@end

@interface NSObject (DVTFoundation)
@property(nonatomic, readonly) NSArray *dvt_reflectingDebugDescriptionKeyPaths;
@end

